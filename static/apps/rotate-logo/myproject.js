// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var ceramic_Lazy = function() { };
$hxClasses["ceramic.Lazy"] = ceramic_Lazy;
ceramic_Lazy.__name__ = "ceramic.Lazy";
ceramic_Lazy.__isInterface__ = true;
var tracker_Events = function() { };
$hxClasses["tracker.Events"] = tracker_Events;
tracker_Events.__name__ = "tracker.Events";
tracker_Events.__isInterface__ = true;
var ceramic_Entity = function() {
	this._components = null;
	this.autoruns = null;
	this._lifecycleState = 0;
	this.id = null;
	this._data = null;
};
$hxClasses["ceramic.Entity"] = ceramic_Entity;
ceramic_Entity.__name__ = "ceramic.Entity";
ceramic_Entity.__interfaces__ = [ceramic_Lazy,tracker_Events];
ceramic_Entity.prototype = {
	get_hasData: function() {
		return this._data != null;
	}
	,get_data: function() {
		if(this._data == null) {
			this._data = { };
		}
		return this._data;
	}
	,set_data: function(data) {
		return this._data = data;
	}
	,get_destroyed: function() {
		return this._lifecycleState < 0;
	}
	,get_disposed: function() {
		return this._lifecycleState == 1;
	}
	,emitDispose: function(entity) {
		var len = 0;
		if(this.__cbOnDispose != null) {
			len += this.__cbOnDispose.length;
		}
		if(this.__cbOnceDispose != null) {
			len += this.__cbOnceDispose.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnDispose.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDispose[ii];
					++i;
				}
			}
			if(this.__cbOnceDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDispose.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDispose[ii];
					var unbind = this.__cbOnceOwnerUnbindDispose[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDispose = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(entity);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDispose: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "dispose" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDispose(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDispose == null) {
				this.__cbOnOwnerUnbindDispose = [];
			}
			this.__cbOnOwnerUnbindDispose.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDispose == null) {
				this.__cbOnOwnerUnbindDispose = [];
			}
			this.__cbOnOwnerUnbindDispose.push(null);
		}
		if(this.__cbOnDispose == null) {
			this.__cbOnDispose = [];
		}
		this.__cbOnDispose.push(handleEntity);
	}
	,onceDispose: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "dispose" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDispose(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDispose == null) {
				this.__cbOnceOwnerUnbindDispose = [];
			}
			this.__cbOnceOwnerUnbindDispose.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDispose == null) {
				this.__cbOnceOwnerUnbindDispose = [];
			}
			this.__cbOnceOwnerUnbindDispose.push(null);
		}
		if(this.__cbOnceDispose == null) {
			this.__cbOnceDispose = [];
		}
		this.__cbOnceDispose.push(handleEntity);
	}
	,offDispose: function(handleEntity) {
		if(handleEntity != null) {
			var index;
			var unbind;
			if(this.__cbOnDispose != null) {
				index = this.__cbOnDispose.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnDispose.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDispose[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDispose.splice(index,1);
				}
			}
			if(this.__cbOnceDispose != null) {
				index = this.__cbOnceDispose.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnceDispose.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDispose[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDispose.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDispose.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDispose[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDispose = null;
			}
			if(this.__cbOnceOwnerUnbindDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDispose.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDispose[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDispose = null;
			}
			this.__cbOnDispose = null;
			this.__cbOnceDispose = null;
		}
	}
	,listensDispose: function() {
		if(!(this.__cbOnDispose != null && this.__cbOnDispose.length > 0)) {
			if(this.__cbOnceDispose != null) {
				return this.__cbOnceDispose.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitDestroy: function(entity) {
		var len = 0;
		if(this.__cbOnDestroy != null) {
			len += this.__cbOnDestroy.length;
		}
		if(this.__cbOnceDestroy != null) {
			len += this.__cbOnceDestroy.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnDestroy.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDestroy[ii];
					++i;
				}
			}
			if(this.__cbOnceDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDestroy.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDestroy[ii];
					var unbind = this.__cbOnceOwnerUnbindDestroy[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDestroy = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(entity);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDestroy: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "destroy" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDestroy(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDestroy == null) {
				this.__cbOnOwnerUnbindDestroy = [];
			}
			this.__cbOnOwnerUnbindDestroy.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDestroy == null) {
				this.__cbOnOwnerUnbindDestroy = [];
			}
			this.__cbOnOwnerUnbindDestroy.push(null);
		}
		if(this.__cbOnDestroy == null) {
			this.__cbOnDestroy = [];
		}
		this.__cbOnDestroy.push(handleEntity);
	}
	,onceDestroy: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "destroy" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDestroy(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDestroy == null) {
				this.__cbOnceOwnerUnbindDestroy = [];
			}
			this.__cbOnceOwnerUnbindDestroy.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDestroy == null) {
				this.__cbOnceOwnerUnbindDestroy = [];
			}
			this.__cbOnceOwnerUnbindDestroy.push(null);
		}
		if(this.__cbOnceDestroy == null) {
			this.__cbOnceDestroy = [];
		}
		this.__cbOnceDestroy.push(handleEntity);
	}
	,offDestroy: function(handleEntity) {
		if(handleEntity != null) {
			var index;
			var unbind;
			if(this.__cbOnDestroy != null) {
				index = this.__cbOnDestroy.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnDestroy.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDestroy[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDestroy.splice(index,1);
				}
			}
			if(this.__cbOnceDestroy != null) {
				index = this.__cbOnceDestroy.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnceDestroy.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDestroy[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDestroy.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDestroy.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDestroy[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDestroy = null;
			}
			if(this.__cbOnceOwnerUnbindDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDestroy.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDestroy[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDestroy = null;
			}
			this.__cbOnDestroy = null;
			this.__cbOnceDestroy = null;
		}
	}
	,listensDestroy: function() {
		if(!(this.__cbOnDestroy != null && this.__cbOnDestroy.length > 0)) {
			if(this.__cbOnceDestroy != null) {
				return this.__cbOnceDestroy.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -3;
		if(this.autoruns != null) {
			var _g = 0;
			var _g1 = this.autoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var _autorun = this.autoruns[i];
				if(_autorun != null) {
					this.autoruns[i] = null;
					_autorun.destroy();
				}
			}
		}
		this.emitDestroy(this);
		if(this._components != null) {
			var toRemove = null;
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(toRemove == null) {
					toRemove = [name];
				} else {
					toRemove.push(name);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var name = toRemove[_g];
					++_g;
					this.removeComponent(name);
				}
			}
		}
		this.unbindEvents();
	}
	,dispose: function() {
		if(this._lifecycleState == 0) {
			this._lifecycleState = 1;
			ceramic_App.app.disposedEntities.push(this);
		}
		this.emitDispose(this);
	}
	,unbindEvents: function() {
		this.offDispose();
		this.offDestroy();
	}
	,autorun: function(run,afterRun) {
		if(this._lifecycleState < 0) {
			return null;
		}
		var _autorun = new tracker_Autorun(run,afterRun);
		run = null;
		afterRun = null;
		if(this.autoruns == null) {
			this.autoruns = [_autorun];
		} else {
			var didAdd = false;
			var _g = 0;
			var _g1 = this.autoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var existing = this.autoruns[i];
				if(existing == null) {
					this.autoruns[i] = _autorun;
					didAdd = true;
					break;
				}
			}
			if(!didAdd) {
				this.autoruns.push(_autorun);
			}
		}
		_autorun.onDestroy(this,$bind(this,this.checkAutoruns));
		return _autorun;
	}
	,checkAutoruns: function(_) {
		var _g = 0;
		var _g1 = this.autoruns.length;
		while(_g < _g1) {
			var i = _g++;
			var _autorun = this.autoruns[i];
			if(_autorun != null && _autorun._lifecycleState < 0) {
				this.autoruns[i] = null;
			}
		}
	}
	,tween: function(easing,duration,fromValue,toValue,update) {
		return ceramic_Tween.start(this,easing,duration,fromValue,toValue,update);
	}
	,className: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		var dotIndex = className.lastIndexOf(".");
		if(dotIndex != -1) {
			className = HxOverrides.substr(className,dotIndex + 1,null);
		}
		return className;
	}
	,toString: function() {
		var className = this.className();
		if(this.id != null) {
			return "" + className + "(" + this.id + ")";
		} else {
			return "" + className;
		}
	}
	,clearComponents: function() {
		if(this._components != null) {
			var toRemove = null;
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(toRemove == null) {
					toRemove = [name];
				} else {
					toRemove.push(name);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var name = toRemove[_g];
					++_g;
					this.removeComponent(name);
				}
			}
		}
	}
	,get_components: function() {
		return this._components;
	}
	,set_components: function(components) {
		if(this._components == components) {
			return components;
		}
		if(this._components != null) {
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(components == null || !Object.prototype.hasOwnProperty.call(components.h,name)) {
					this.removeComponent(name);
				}
			}
		}
		if(components != null) {
			var h = components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = components.h[name];
				if(this._components != null) {
					var existing = this._components.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this._components = components;
		return components;
	}
	,component: function(name,component) {
		var _gthis = this;
		if(name == null && component == null) {
			throw haxe_Exception.thrown("Invalid component() call: either `name` or `component` should be provided at least.");
		}
		if(name == null) {
			var c = js_Boot.getClass(component);
			name = c.__name__;
			if(this._components != null && Object.prototype.hasOwnProperty.call(this._components.h,name)) {
				var baseName = name;
				var n = 1;
				name = baseName + "#" + n;
				while(Object.prototype.hasOwnProperty.call(this._components.h,name)) {
					++n;
					name = baseName + "#" + n;
				}
			}
		}
		if(component != null) {
			if(this._components == null) {
				this._components = new haxe_ds_StringMap();
			} else {
				var existing = this._components.h[name];
				if(existing != null) {
					var existingAsEntity = existing;
					existingAsEntity.destroy();
				}
			}
			this._components.h[name] = component;
			component.setEntity(this);
			var componentAsEntity = component;
			componentAsEntity.onceDestroy(this,function(_) {
				if(Reflect.getProperty(component,"entity") == _gthis) {
					Reflect.setProperty(component,"entity",null);
				}
				if(_gthis._lifecycleState >= 0) {
					var existing = _gthis._components.h[name];
					if(existing == component) {
						var _this = _gthis._components;
						if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
							delete(_this.h[name]);
						}
					}
				}
			});
			component.bindAsComponent();
			return component;
		} else {
			if(this._components == null) {
				return null;
			}
			return this._components.h[name];
		}
	}
	,hasComponent: function(name) {
		return this.component(name) != null;
	}
	,removeComponent: function(name) {
		var existing = this._components.h[name];
		if(existing != null) {
			var _this = this._components;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
			}
			var existingAsEntity = existing;
			existingAsEntity.destroy();
		}
	}
	,__class__: ceramic_Entity
	,__properties__: {set_components:"set_components",get_components:"get_components",get_disposed:"get_disposed",get_destroyed:"get_destroyed",set_data:"set_data",get_data:"get_data",get_hasData:"get_hasData"}
};
var ceramic_DecomposedTransform = function() {
	this.skewY = 0;
	this.skewX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.pivotY = 0;
	this.pivotX = 0;
};
$hxClasses["ceramic.DecomposedTransform"] = ceramic_DecomposedTransform;
ceramic_DecomposedTransform.__name__ = "ceramic.DecomposedTransform";
ceramic_DecomposedTransform.prototype = {
	toString: function() {
		return "(pos=" + this.x + "," + this.y + " pivot=" + this.pivotX + "," + this.pivotY + " rotation=" + this.rotation + " scale=" + (this.scaleX == this.scaleY ? "" + this.scaleX : this.scaleX + "," + this.scaleY) + " skew=" + this.skewX + "," + this.skewY + ")";
	}
	,__class__: ceramic_DecomposedTransform
};
var ceramic_Transform = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this._aPrev = a;
	this._bPrev = b;
	this._cPrev = c;
	this._dPrev = d;
	this._txPrev = tx;
	this._tyPrev = ty;
	this.changed = false;
	this.changedDirty = false;
};
$hxClasses["ceramic.Transform"] = ceramic_Transform;
ceramic_Transform.__name__ = "ceramic.Transform";
ceramic_Transform.__interfaces__ = [tracker_Events];
ceramic_Transform.prototype = {
	emitChange: function() {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,onChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handle);
	}
	,onceChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handle);
	}
	,offChange: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeChanged: function() {
		if(this.changedDirty) {
			this.changed = this.tx != this._txPrev || this.ty != this._tyPrev || this.a != this._aPrev || this.b != this._bPrev || this.c != this._cPrev || this.d != this._dPrev;
			this.changedDirty = false;
		}
	}
	,didEmitChange: function() {
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,cleanChangedState: function() {
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,clone: function() {
		return new ceramic_Transform(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,decompose: function(output) {
		if(output == null) {
			output = new ceramic_DecomposedTransform();
		}
		output.pivotX = 0;
		output.pivotY = 0;
		output.skewX = -Math.atan2(-this.c,this.d);
		output.skewY = Math.atan2(this.b,this.a);
		var delta = Math.abs(output.skewX + output.skewY);
		if(delta < 0.00001) {
			output.rotation = output.skewY;
			if(this.a < 0 && this.d >= 0) {
				output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
			}
			output.skewX = 0;
			output.skewY = 0;
		}
		output.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
		output.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
		output.x = this.tx;
		output.y = this.ty;
		return output;
	}
	,setFromDecomposed: function(decomposed) {
		var x = decomposed.x;
		var y = decomposed.y;
		var scaleX = decomposed.scaleX;
		var scaleY = decomposed.scaleY;
		var rotation = decomposed.rotation;
		var skewX = decomposed.skewX;
		var skewY = decomposed.skewY;
		var pivotX = decomposed.pivotX;
		var pivotY = decomposed.pivotY;
		if(pivotY == null) {
			pivotY = 0;
		}
		if(pivotX == null) {
			pivotX = 0;
		}
		if(skewY == null) {
			skewY = 0;
		}
		if(skewX == null) {
			skewX = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
		this.tx += -pivotX;
		this.ty += -pivotY;
		this.changedDirty = true;
		if(skewX != 0) {
			this.c = skewX * Math.PI / 180.0;
		}
		if(skewY != 0) {
			this.b = skewY * Math.PI / 180.0;
		}
		if(rotation != 0) {
			var angle = rotation * Math.PI / 180.0;
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
			this.changedDirty = true;
		}
		this.tx += pivotX;
		this.ty += pivotY;
		this.changedDirty = true;
		if(scaleX != 1.0 || scaleY != 1.0) {
			this.a *= scaleX;
			this.b *= scaleY;
			this.c *= scaleX;
			this.d *= scaleY;
			this.tx *= scaleX;
			this.ty *= scaleY;
			this.changedDirty = true;
		}
		this.tx += x - pivotX * scaleX;
		this.ty += y - pivotY * scaleY;
		this.changedDirty = true;
	}
	,setFromValues: function(x,y,scaleX,scaleY,rotation,skewX,skewY,pivotX,pivotY) {
		if(pivotY == null) {
			pivotY = 0;
		}
		if(pivotX == null) {
			pivotX = 0;
		}
		if(skewY == null) {
			skewY = 0;
		}
		if(skewX == null) {
			skewX = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
		this.tx += -pivotX;
		this.ty += -pivotY;
		this.changedDirty = true;
		if(skewX != 0) {
			this.c = skewX * Math.PI / 180.0;
		}
		if(skewY != 0) {
			this.b = skewY * Math.PI / 180.0;
		}
		if(rotation != 0) {
			var angle = rotation * Math.PI / 180.0;
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
			this.changedDirty = true;
		}
		this.tx += pivotX;
		this.ty += pivotY;
		this.changedDirty = true;
		if(scaleX != 1.0 || scaleY != 1.0) {
			this.a *= scaleX;
			this.b *= scaleY;
			this.c *= scaleX;
			this.d *= scaleY;
			this.tx *= scaleX;
			this.ty *= scaleY;
			this.changedDirty = true;
		}
		this.tx += x - pivotX * scaleX;
		this.ty += y - pivotY * scaleY;
		this.changedDirty = true;
	}
	,setFromInterpolated: function(transform1,transform2,ratio) {
		if(ratio == 0) {
			this.a = transform1.a;
			this.b = transform1.b;
			this.c = transform1.c;
			this.d = transform1.d;
			this.tx = transform1.tx;
			this.ty = transform1.ty;
			this.changedDirty = true;
		} else if(ratio == 1) {
			this.a = transform2.a;
			this.b = transform2.b;
			this.c = transform2.c;
			this.d = transform2.d;
			this.tx = transform2.tx;
			this.ty = transform2.ty;
			this.changedDirty = true;
		} else {
			var output = ceramic_Transform._decomposed1;
			if(output == null) {
				output = new ceramic_DecomposedTransform();
			}
			output.pivotX = 0;
			output.pivotY = 0;
			output.skewX = -Math.atan2(-transform1.c,transform1.d);
			output.skewY = Math.atan2(transform1.b,transform1.a);
			var delta = Math.abs(output.skewX + output.skewY);
			if(delta < 0.00001) {
				output.rotation = output.skewY;
				if(transform1.a < 0 && transform1.d >= 0) {
					output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
				}
				output.skewX = 0;
				output.skewY = 0;
			}
			output.scaleX = Math.sqrt(transform1.a * transform1.a + transform1.b * transform1.b);
			output.scaleY = Math.sqrt(transform1.c * transform1.c + transform1.d * transform1.d);
			output.x = transform1.tx;
			output.y = transform1.ty;
			var output = ceramic_Transform._decomposed2;
			if(output == null) {
				output = new ceramic_DecomposedTransform();
			}
			output.pivotX = 0;
			output.pivotY = 0;
			output.skewX = -Math.atan2(-transform2.c,transform2.d);
			output.skewY = Math.atan2(transform2.b,transform2.a);
			var delta = Math.abs(output.skewX + output.skewY);
			if(delta < 0.00001) {
				output.rotation = output.skewY;
				if(transform2.a < 0 && transform2.d >= 0) {
					output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
				}
				output.skewX = 0;
				output.skewY = 0;
			}
			output.scaleX = Math.sqrt(transform2.a * transform2.a + transform2.b * transform2.b);
			output.scaleY = Math.sqrt(transform2.c * transform2.c + transform2.d * transform2.d);
			output.x = transform2.tx;
			output.y = transform2.ty;
			ceramic_Transform._decomposed1.pivotX += (ceramic_Transform._decomposed2.pivotX - ceramic_Transform._decomposed1.pivotX) * ratio;
			ceramic_Transform._decomposed1.pivotY += (ceramic_Transform._decomposed2.pivotY - ceramic_Transform._decomposed1.pivotY) * ratio;
			ceramic_Transform._decomposed1.rotation += (ceramic_Transform._decomposed2.rotation - ceramic_Transform._decomposed1.rotation) * ratio;
			ceramic_Transform._decomposed1.scaleX += (ceramic_Transform._decomposed2.scaleX - ceramic_Transform._decomposed1.scaleX) * ratio;
			ceramic_Transform._decomposed1.scaleY += (ceramic_Transform._decomposed2.scaleY - ceramic_Transform._decomposed1.scaleY) * ratio;
			ceramic_Transform._decomposed1.skewX += (ceramic_Transform._decomposed2.skewX - ceramic_Transform._decomposed1.skewX) * ratio;
			ceramic_Transform._decomposed1.skewY += (ceramic_Transform._decomposed2.skewY - ceramic_Transform._decomposed1.skewY) * ratio;
			ceramic_Transform._decomposed1.x += (ceramic_Transform._decomposed2.x - ceramic_Transform._decomposed1.x) * ratio;
			ceramic_Transform._decomposed1.y += (ceramic_Transform._decomposed2.y - ceramic_Transform._decomposed1.y) * ratio;
			var decomposed = ceramic_Transform._decomposed1;
			var x = decomposed.x;
			var y = decomposed.y;
			var scaleX = decomposed.scaleX;
			var scaleY = decomposed.scaleY;
			var rotation = decomposed.rotation;
			var skewX = decomposed.skewX;
			var skewY = decomposed.skewY;
			var pivotX = decomposed.pivotX;
			var pivotY = decomposed.pivotY;
			if(pivotY == null) {
				pivotY = 0;
			}
			if(pivotX == null) {
				pivotX = 0;
			}
			if(skewY == null) {
				skewY = 0;
			}
			if(skewX == null) {
				skewX = 0;
			}
			if(rotation == null) {
				rotation = 0;
			}
			if(scaleY == null) {
				scaleY = 1;
			}
			if(scaleX == null) {
				scaleX = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			this.a = 1;
			this.b = 0;
			this.c = 0;
			this.d = 1;
			this.tx = 0;
			this.ty = 0;
			this.changedDirty = true;
			this.tx += -pivotX;
			this.ty += -pivotY;
			this.changedDirty = true;
			if(skewX != 0) {
				this.c = skewX * Math.PI / 180.0;
			}
			if(skewY != 0) {
				this.b = skewY * Math.PI / 180.0;
			}
			if(rotation != 0) {
				var angle = rotation * Math.PI / 180.0;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = this.a * cos - this.b * sin;
				this.b = this.a * sin + this.b * cos;
				this.a = a1;
				var c1 = this.c * cos - this.d * sin;
				this.d = this.c * sin + this.d * cos;
				this.c = c1;
				var tx1 = this.tx * cos - this.ty * sin;
				this.ty = this.tx * sin + this.ty * cos;
				this.tx = tx1;
				this.changedDirty = true;
			}
			this.tx += pivotX;
			this.ty += pivotY;
			this.changedDirty = true;
			if(scaleX != 1.0 || scaleY != 1.0) {
				this.a *= scaleX;
				this.b *= scaleY;
				this.c *= scaleX;
				this.d *= scaleY;
				this.tx *= scaleX;
				this.ty *= scaleY;
				this.changedDirty = true;
			}
			this.tx += x - pivotX * scaleX;
			this.ty += y - pivotY * scaleY;
			this.changedDirty = true;
		}
	}
	,deltaTransformX: function(x,y) {
		return x * this.a + y * this.c;
	}
	,deltaTransformY: function(x,y) {
		return x * this.b + y * this.d;
	}
	,equals: function(transform) {
		if(transform != null && this.tx == transform.tx && this.ty == transform.ty && this.a == transform.a && this.b == transform.b && this.c == transform.c) {
			return this.d == transform.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		this.changedDirty = true;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,scale: function(x,y) {
		this.a *= x;
		this.b *= y;
		this.c *= x;
		this.d *= y;
		this.tx *= x;
		this.ty *= y;
		this.changedDirty = true;
	}
	,translate: function(x,y) {
		this.tx += x;
		this.ty += y;
		this.changedDirty = true;
	}
	,skew: function(skewX,skewY) {
		var _this = ceramic_Transform._tmp;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		var sr = 0;
		var cr = 1;
		var cy = Math.cos(skewY);
		var sy = Math.sin(skewY);
		var nsx = -Math.sin(skewX);
		var cx = Math.cos(skewX);
		var a = cr;
		var b = sr;
		var c = -sr;
		var d = cr;
		ceramic_Transform._tmp.a = cy * a + sy * c;
		ceramic_Transform._tmp.b = cy * b + sy * d;
		ceramic_Transform._tmp.c = nsx * a + cx * c;
		ceramic_Transform._tmp.d = nsx * b + cx * d;
		var m = ceramic_Transform._tmp;
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,setRotation: function(angle,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(angle) * scale;
		this.c = Math.sin(angle) * scale;
		this.b = -this.c;
		this.d = this.a;
		this.changedDirty = true;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
		this.changedDirty = true;
	}
	,setToTransform: function(transform) {
		this.a = transform.a;
		this.b = transform.b;
		this.c = transform.c;
		this.d = transform.d;
		this.tx = transform.tx;
		this.ty = transform.ty;
		this.changedDirty = true;
	}
	,toString: function() {
		var output = ceramic_Transform._decomposed1;
		if(output == null) {
			output = new ceramic_DecomposedTransform();
		}
		output.pivotX = 0;
		output.pivotY = 0;
		output.skewX = -Math.atan2(-this.c,this.d);
		output.skewY = Math.atan2(this.b,this.a);
		var delta = Math.abs(output.skewX + output.skewY);
		if(delta < 0.00001) {
			output.rotation = output.skewY;
			if(this.a < 0 && this.d >= 0) {
				output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
			}
			output.skewX = 0;
			output.skewY = 0;
		}
		output.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
		output.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
		output.x = this.tx;
		output.y = this.ty;
		return "(a=" + this.a + ", b=" + this.b + ", c=" + this.c + ", d=" + this.d + ", tx=" + this.tx + ", ty=" + this.ty + " " + Std.string(ceramic_Transform._decomposed1) + ")";
	}
	,transformX: function(x,y) {
		return x * this.a + y * this.c + this.tx;
	}
	,transformY: function(x,y) {
		return x * this.b + y * this.d + this.ty;
	}
	,unbindEvents: function() {
		this.offChange();
	}
	,__class__: ceramic_Transform
};
var ceramic_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["ceramic.Point"] = ceramic_Point;
ceramic_Point.__name__ = "ceramic.Point";
ceramic_Point.prototype = {
	toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: ceramic_Point
};
var ceramic_Visual = function() {
	this.parent = null;
	this.children = null;
	this.computedClip = false;
	this.computedTouchable = true;
	this.computedRenderTarget = null;
	this.computedDepth = 0;
	this.computedAlpha = 1;
	this.computedVisible = true;
	this.matTY = 0;
	this.matTX = 0;
	this.matD = 1;
	this.matC = 0;
	this.matB = 0;
	this.matA = 1;
	this.flags = 0;
	this.shader = null;
	this.transform = null;
	this.alpha = 1;
	this.rotation = 0;
	this.roundTranslation = -1;
	this._height = 0;
	this._width = 0;
	this.anchorY = 0;
	this.anchorX = 0;
	this.skewY = 0;
	this.skewX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.depthRange = 1;
	this.depth = 0;
	this.touchable = true;
	this.visible = true;
	this.blending = 0;
	this.renderTarget = null;
	this.clipDirty = true;
	this.touchableDirty = true;
	this.visibilityDirty = true;
	this.renderTargetDirty = true;
	this.matrixDirty = true;
	this.contentDirty = true;
	this.translatesOnlyDirty = false;
	this.translatesOnly = true;
	this.inheritAlpha = false;
	this.clip = null;
	this._numPointerOver = 0;
	this._numPointerDown = 0;
	this.multiTouch = false;
	this.asMesh = null;
	this.asQuad = null;
	ceramic_Entity.call(this);
	ceramic_App.app.pendingVisuals.push(this);
};
$hxClasses["ceramic.Visual"] = ceramic_Visual;
ceramic_Visual.__name__ = "ceramic.Visual";
ceramic_Visual.__super__ = ceramic_Entity;
ceramic_Visual.prototype = $extend(ceramic_Entity.prototype,{
	emitPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnPointerDown != null) {
			len += this.__cbOnPointerDown.length;
		}
		if(this.__cbOncePointerDown != null) {
			len += this.__cbOncePointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerDown[ii];
					++i;
				}
			}
			if(this.__cbOncePointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerDown[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOnPointerDown == null) {
			this.__cbOnPointerDown = [];
		}
		this.__cbOnPointerDown.push(handleInfo);
	}
	,oncePointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOncePointerDown == null) {
			this.__cbOncePointerDown = [];
		}
		this.__cbOncePointerDown.push(handleInfo);
	}
	,offPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerDown != null) {
				index = this.__cbOnPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerDown.splice(index,1);
				}
			}
			if(this.__cbOncePointerDown != null) {
				index = this.__cbOncePointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = null;
			}
			this.__cbOnPointerDown = null;
			this.__cbOncePointerDown = null;
		}
	}
	,listensPointerDown: function() {
		if(!(this.__cbOnPointerDown != null && this.__cbOnPointerDown.length > 0)) {
			if(this.__cbOncePointerDown != null) {
				return this.__cbOncePointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnPointerUp != null) {
			len += this.__cbOnPointerUp.length;
		}
		if(this.__cbOncePointerUp != null) {
			len += this.__cbOncePointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerUp[ii];
					++i;
				}
			}
			if(this.__cbOncePointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerUp[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOnPointerUp == null) {
			this.__cbOnPointerUp = [];
		}
		this.__cbOnPointerUp.push(handleInfo);
	}
	,oncePointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOncePointerUp == null) {
			this.__cbOncePointerUp = [];
		}
		this.__cbOncePointerUp.push(handleInfo);
	}
	,offPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerUp != null) {
				index = this.__cbOnPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerUp.splice(index,1);
				}
			}
			if(this.__cbOncePointerUp != null) {
				index = this.__cbOncePointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = null;
			}
			this.__cbOnPointerUp = null;
			this.__cbOncePointerUp = null;
		}
	}
	,listensPointerUp: function() {
		if(!(this.__cbOnPointerUp != null && this.__cbOnPointerUp.length > 0)) {
			if(this.__cbOncePointerUp != null) {
				return this.__cbOncePointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerOver: function(info) {
		var len = 0;
		if(this.__cbOnPointerOver != null) {
			len += this.__cbOnPointerOver.length;
		}
		if(this.__cbOncePointerOver != null) {
			len += this.__cbOncePointerOver.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerOver.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerOver[ii];
					++i;
				}
			}
			if(this.__cbOncePointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerOver.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerOver[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerOver[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerOver = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerOver: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOver" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOver(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerOver == null) {
				this.__cbOnOwnerUnbindPointerOver = [];
			}
			this.__cbOnOwnerUnbindPointerOver.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerOver == null) {
				this.__cbOnOwnerUnbindPointerOver = [];
			}
			this.__cbOnOwnerUnbindPointerOver.push(null);
		}
		if(this.__cbOnPointerOver == null) {
			this.__cbOnPointerOver = [];
		}
		this.__cbOnPointerOver.push(handleInfo);
	}
	,oncePointerOver: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOver" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOver(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerOver == null) {
				this.__cbOnceOwnerUnbindPointerOver = [];
			}
			this.__cbOnceOwnerUnbindPointerOver.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerOver == null) {
				this.__cbOnceOwnerUnbindPointerOver = [];
			}
			this.__cbOnceOwnerUnbindPointerOver.push(null);
		}
		if(this.__cbOncePointerOver == null) {
			this.__cbOncePointerOver = [];
		}
		this.__cbOncePointerOver.push(handleInfo);
	}
	,offPointerOver: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerOver != null) {
				index = this.__cbOnPointerOver.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerOver.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerOver[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerOver.splice(index,1);
				}
			}
			if(this.__cbOncePointerOver != null) {
				index = this.__cbOncePointerOver.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerOver.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerOver[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerOver.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerOver.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerOver[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerOver = null;
			}
			if(this.__cbOnceOwnerUnbindPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerOver.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerOver[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerOver = null;
			}
			this.__cbOnPointerOver = null;
			this.__cbOncePointerOver = null;
		}
	}
	,listensPointerOver: function() {
		if(!(this.__cbOnPointerOver != null && this.__cbOnPointerOver.length > 0)) {
			if(this.__cbOncePointerOver != null) {
				return this.__cbOncePointerOver.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerOut: function(info) {
		var len = 0;
		if(this.__cbOnPointerOut != null) {
			len += this.__cbOnPointerOut.length;
		}
		if(this.__cbOncePointerOut != null) {
			len += this.__cbOncePointerOut.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerOut.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerOut[ii];
					++i;
				}
			}
			if(this.__cbOncePointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerOut.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerOut[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerOut[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerOut = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerOut: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOut" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOut(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerOut == null) {
				this.__cbOnOwnerUnbindPointerOut = [];
			}
			this.__cbOnOwnerUnbindPointerOut.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerOut == null) {
				this.__cbOnOwnerUnbindPointerOut = [];
			}
			this.__cbOnOwnerUnbindPointerOut.push(null);
		}
		if(this.__cbOnPointerOut == null) {
			this.__cbOnPointerOut = [];
		}
		this.__cbOnPointerOut.push(handleInfo);
	}
	,oncePointerOut: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOut" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOut(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerOut == null) {
				this.__cbOnceOwnerUnbindPointerOut = [];
			}
			this.__cbOnceOwnerUnbindPointerOut.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerOut == null) {
				this.__cbOnceOwnerUnbindPointerOut = [];
			}
			this.__cbOnceOwnerUnbindPointerOut.push(null);
		}
		if(this.__cbOncePointerOut == null) {
			this.__cbOncePointerOut = [];
		}
		this.__cbOncePointerOut.push(handleInfo);
	}
	,offPointerOut: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerOut != null) {
				index = this.__cbOnPointerOut.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerOut.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerOut[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerOut.splice(index,1);
				}
			}
			if(this.__cbOncePointerOut != null) {
				index = this.__cbOncePointerOut.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerOut.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerOut[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerOut.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerOut.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerOut[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerOut = null;
			}
			if(this.__cbOnceOwnerUnbindPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerOut.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerOut[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerOut = null;
			}
			this.__cbOnPointerOut = null;
			this.__cbOncePointerOut = null;
		}
	}
	,listensPointerOut: function() {
		if(!(this.__cbOnPointerOut != null && this.__cbOnPointerOut.length > 0)) {
			if(this.__cbOncePointerOut != null) {
				return this.__cbOncePointerOut.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFocus: function() {
		var len = 0;
		if(this.__cbOnFocus != null) {
			len += this.__cbOnFocus.length;
		}
		if(this.__cbOnceFocus != null) {
			len += this.__cbOnceFocus.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFocus[ii];
					++i;
				}
			}
			if(this.__cbOnceFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFocus[ii];
					var unbind = this.__cbOnceOwnerUnbindFocus[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFocus = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFocus: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFocus(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnFocus == null) {
			this.__cbOnFocus = [];
		}
		this.__cbOnFocus.push(handle);
	}
	,onceFocus: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFocus(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnceFocus == null) {
			this.__cbOnceFocus = [];
		}
		this.__cbOnceFocus.push(handle);
	}
	,offFocus: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFocus != null) {
				index = this.__cbOnFocus.indexOf(handle);
				if(index != -1) {
					this.__cbOnFocus.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFocus.splice(index,1);
				}
			}
			if(this.__cbOnceFocus != null) {
				index = this.__cbOnceFocus.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFocus.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFocus.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFocus = null;
			}
			if(this.__cbOnceOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFocus = null;
			}
			this.__cbOnFocus = null;
			this.__cbOnceFocus = null;
		}
	}
	,listensFocus: function() {
		if(!(this.__cbOnFocus != null && this.__cbOnFocus.length > 0)) {
			if(this.__cbOnceFocus != null) {
				return this.__cbOnceFocus.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBlur: function() {
		var len = 0;
		if(this.__cbOnBlur != null) {
			len += this.__cbOnBlur.length;
		}
		if(this.__cbOnceBlur != null) {
			len += this.__cbOnceBlur.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBlur[ii];
					++i;
				}
			}
			if(this.__cbOnceBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBlur[ii];
					var unbind = this.__cbOnceOwnerUnbindBlur[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBlur = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBlur: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBlur(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnBlur == null) {
			this.__cbOnBlur = [];
		}
		this.__cbOnBlur.push(handle);
	}
	,onceBlur: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBlur(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnceBlur == null) {
			this.__cbOnceBlur = [];
		}
		this.__cbOnceBlur.push(handle);
	}
	,offBlur: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBlur != null) {
				index = this.__cbOnBlur.indexOf(handle);
				if(index != -1) {
					this.__cbOnBlur.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBlur.splice(index,1);
				}
			}
			if(this.__cbOnceBlur != null) {
				index = this.__cbOnceBlur.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBlur.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBlur.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBlur = null;
			}
			if(this.__cbOnceOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBlur = null;
			}
			this.__cbOnBlur = null;
			this.__cbOnceBlur = null;
		}
	}
	,listensBlur: function() {
		if(!(this.__cbOnBlur != null && this.__cbOnBlur.length > 0)) {
			if(this.__cbOnceBlur != null) {
				return this.__cbOnceBlur.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_isPointerDown: function() {
		return this._numPointerDown > 0;
	}
	,get_isPointerOver: function() {
		return this._numPointerOver > 0;
	}
	,set_clip: function(clip) {
		if(this.clip == clip) {
			return clip;
		}
		this.clip = clip;
		this.clipDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		return clip;
	}
	,set_inheritAlpha: function(inheritAlpha) {
		if(this.inheritAlpha == inheritAlpha) {
			return inheritAlpha;
		}
		this.inheritAlpha = inheritAlpha;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return inheritAlpha;
	}
	,stop: function() {
	}
	,set_contentDirty: function(contentDirty) {
		this.contentDirty = contentDirty;
		if(contentDirty) {
			ceramic_App.app.visualsContentDirty = true;
		}
		return contentDirty;
	}
	,set_matrixDirty: function(matrixDirty) {
		this.matrixDirty = matrixDirty;
		if(matrixDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_matrixDirty(true);
				}
			}
		}
		return matrixDirty;
	}
	,set_renderTargetDirty: function(renderTargetDirty) {
		this.renderTargetDirty = renderTargetDirty;
		if(renderTargetDirty) {
			this.clipDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.clipDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_clipDirty(true);
						}
					}
				}
			}
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_renderTargetDirty(true);
				}
			}
		}
		return renderTargetDirty;
	}
	,set_visibilityDirty: function(visibilityDirty) {
		this.visibilityDirty = visibilityDirty;
		if(visibilityDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_visibilityDirty(true);
				}
			}
		}
		return visibilityDirty;
	}
	,set_touchableDirty: function(touchableDirty) {
		this.touchableDirty = touchableDirty;
		if(touchableDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_touchableDirty(true);
				}
			}
		}
		return touchableDirty;
	}
	,set_clipDirty: function(clipDirty) {
		this.clipDirty = clipDirty;
		if(clipDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_clipDirty(true);
				}
			}
		}
		return clipDirty;
	}
	,set_renderTarget: function(renderTarget) {
		if(this.renderTarget == renderTarget) {
			return renderTarget;
		}
		this.renderTarget = renderTarget;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.renderTargetDirty = true;
		this.clipDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.renderTargetDirty = true;
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.clipDirty = true;
						if(child1.children != null) {
							var _g4 = 0;
							var _g5 = child1.children.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var child2 = child1.children[i2];
								child2.clipDirty = true;
								if(child2.children != null) {
									var _g6 = 0;
									var _g7 = child2.children.length;
									while(_g6 < _g7) {
										var i3 = _g6++;
										var child3 = child2.children[i3];
										child3.set_clipDirty(true);
									}
								}
							}
						}
					}
				}
				if(child.children != null) {
					var _g8 = 0;
					var _g9 = child.children.length;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var child4 = child.children[i4];
						child4.set_renderTargetDirty(true);
					}
				}
			}
		}
		return renderTarget;
	}
	,set_blending: function(blending) {
		return this.blending = blending;
	}
	,set_visible: function(visible) {
		if(this.visible == visible) {
			return visible;
		}
		this.visible = visible;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return visible;
	}
	,set_touchable: function(touchable) {
		if(this.touchable == touchable) {
			return touchable;
		}
		this.touchable = touchable;
		this.touchableDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.touchableDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_touchableDirty(true);
					}
				}
			}
		}
		return touchable;
	}
	,set_depth: function(depth) {
		if(this.depth == depth) {
			return depth;
		}
		this.depth = depth;
		ceramic_App.app.hierarchyDirty = true;
		return depth;
	}
	,set_depthRange: function(depthRange) {
		if(this.depthRange == depthRange) {
			return depthRange;
		}
		this.depthRange = depthRange;
		ceramic_App.app.hierarchyDirty = true;
		return depthRange;
	}
	,set_x: function(x) {
		if(this.x == x) {
			return x;
		}
		this.x = x;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return x;
	}
	,set_y: function(y) {
		if(this.y == y) {
			return y;
		}
		this.y = y;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return y;
	}
	,set_scaleX: function(scaleX) {
		if(this.scaleX == scaleX) {
			return scaleX;
		}
		this.scaleX = scaleX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return scaleX;
	}
	,set_scaleY: function(scaleY) {
		if(this.scaleY == scaleY) {
			return scaleY;
		}
		this.scaleY = scaleY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return scaleY;
	}
	,set_skewX: function(skewX) {
		if(this.skewX == skewX) {
			return skewX;
		}
		this.skewX = skewX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return skewX;
	}
	,set_skewY: function(skewY) {
		if(this.skewY == skewY) {
			return skewY;
		}
		this.skewY = skewY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return skewY;
	}
	,set_anchorX: function(anchorX) {
		if(this.anchorX == anchorX) {
			return anchorX;
		}
		this.anchorX = anchorX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return anchorX;
	}
	,set_anchorY: function(anchorY) {
		if(this.anchorY == anchorY) {
			return anchorY;
		}
		this.anchorY = anchorY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return anchorY;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(width) {
		if(this._width == width) {
			return width;
		}
		this._width = width;
		if(this.anchorX != 0) {
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
		return width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(height) {
		if(this._height == height) {
			return height;
		}
		this._height = height;
		if(this.anchorY != 0) {
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
		return height;
	}
	,set_roundTranslation: function(roundTranslation) {
		if(this.roundTranslation == roundTranslation) {
			return roundTranslation;
		}
		this.roundTranslation = roundTranslation;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return roundTranslation;
	}
	,set_rotation: function(rotation) {
		if(this.rotation == rotation) {
			return rotation;
		}
		this.rotation = rotation;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return rotation;
	}
	,set_alpha: function(alpha) {
		if(this.alpha == alpha) {
			return alpha;
		}
		this.alpha = alpha;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return alpha;
	}
	,get_translateX: function() {
		if(this.transform != null) {
			return this.transform.tx;
		} else {
			return 0;
		}
	}
	,set_translateX: function(translateX) {
		if(translateX == 0) {
			if(this.transform != null && this.transform.tx != 0) {
				this.transform.tx = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.tx != translateX) {
				this.transform.tx = translateX;
				this.transform.changedDirty = true;
			}
		}
		return translateX;
	}
	,get_translateY: function() {
		if(this.transform != null) {
			return this.transform.ty;
		} else {
			return 0;
		}
	}
	,set_translateY: function(translateY) {
		if(translateY == 0) {
			if(this.transform != null && this.transform.ty != 0) {
				this.transform.ty = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.ty != translateY) {
				this.transform.ty = translateY;
				this.transform.changedDirty = true;
			}
		}
		return translateY;
	}
	,set_transform: function(transform) {
		if(this.transform == transform) {
			return transform;
		}
		if(this.transform != null) {
			this.transform.offChange($bind(this,this.transformDidChange));
		}
		this.transform = transform;
		if(this.transform != null) {
			this.transform.onChange(this,$bind(this,this.transformDidChange));
		}
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return transform;
	}
	,set_shader: function(shader) {
		return this.shader = shader;
	}
	,flag: function(index,value) {
		var i = index + 16;
		if(value != null) {
			this.flags = value ? this.flags | 1 << i : this.flags & ~(1 << i);
			return value;
		} else {
			var mask = 1 << i;
			return (this.flags & mask) == mask;
		}
	}
	,internalFlag: function(index,value) {
		if(value != null) {
			this.flags = value ? this.flags | 1 << index : this.flags & ~(1 << index);
			return value;
		} else {
			var mask = 1 << index;
			return (this.flags & mask) == mask;
		}
	}
	,get_active: function() {
		var mask = 1;
		return (this.flags & mask) != mask;
	}
	,set_active: function(active) {
		var mask = 1;
		if(active == ((this.flags & mask) != mask)) {
			return active;
		}
		var bool = !active;
		this.flags = bool ? this.flags | 1 : this.flags & -2;
		if(active) {
			var mask = 2;
			this.set_visible((this.flags & mask) == mask);
			var mask = 4;
			this.set_touchable((this.flags & mask) == mask);
		} else {
			var bool = this.visible;
			this.flags = bool ? this.flags | 2 : this.flags & -3;
			var bool = this.touchable;
			this.flags = bool ? this.flags | 4 : this.flags & -5;
			this.set_visible(false);
			this.set_touchable(false);
		}
		return active;
	}
	,size: function(width,height) {
		this.set_width(width);
		this.set_height(height);
	}
	,anchor: function(anchorX,anchorY) {
		this.set_anchorX(anchorX);
		this.set_anchorY(anchorY);
	}
	,pos: function(x,y) {
		this.set_x(x);
		this.set_y(y);
	}
	,scale: function(scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = -1;
		}
		this.set_scaleX(scaleX);
		this.set_scaleY(scaleY != -1 ? scaleY : scaleX);
	}
	,skew: function(skewX,skewY) {
		this.set_skewX(skewX);
		this.set_skewY(skewY);
	}
	,translate: function(translateX,translateY) {
		if(translateX == 0) {
			if(this.transform != null && this.transform.tx != 0) {
				this.transform.tx = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.tx != translateX) {
				this.transform.tx = translateX;
				this.transform.changedDirty = true;
			}
		}
		if(translateY == 0) {
			if(this.transform != null && this.transform.ty != 0) {
				this.transform.ty = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.ty != translateY) {
				this.transform.ty = translateY;
				this.transform.changedDirty = true;
			}
		}
	}
	,anchorKeepPosition: function(anchorX,anchorY) {
		if(this.anchorX == anchorX && this.anchorY == anchorY) {
			return;
		}
		this.visualToScreen(0,0,ceramic_Visual._point,false);
		if(this.parent != null) {
			this.parent.screenToVisual(ceramic_Visual._point.x,ceramic_Visual._point.y,ceramic_Visual._point,false);
		}
		var prevX = ceramic_Visual._point.x;
		var prevY = ceramic_Visual._point.y;
		this.set_anchorX(anchorX);
		this.set_anchorY(anchorY);
		this.visualToScreen(0,0,ceramic_Visual._point,false);
		if(this.parent != null) {
			this.parent.screenToVisual(ceramic_Visual._point.x,ceramic_Visual._point.y,ceramic_Visual._point,false);
		}
		this.set_x(this.x + (prevX - ceramic_Visual._point.x));
		this.set_y(this.y + (prevY - ceramic_Visual._point.y));
	}
	,childWithId: function(id,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				if(child.id == id) {
					return child;
				}
			}
			if(recursive) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					var childResult = child.childWithId(id,true);
					if(childResult != null) {
						return childResult;
					}
				}
			}
		}
		return null;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(ceramic_App.app.screen.focusedVisual == this) {
			ceramic_App.app.screen.set_focusedVisual(null);
		}
		ceramic_App.app.destroyedVisuals.push(this);
		if(this.parent != null) {
			this.parent.remove(this);
		}
		if(this.transform != null) {
			this.set_transform(null);
		}
		this.clear();
	}
	,clear: function() {
		if(this.children != null && this.children.length > 0) {
			var len = this.children.length;
			var pool = ceramic_ArrayPool.pool(len);
			var tmp = pool.get();
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				tmp.vector[i] = this.children[i];
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var child = tmp.vector[i];
				child.destroy();
			}
			this.children = null;
			pool.release(tmp);
		}
	}
	,transformDidChange: function() {
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,computeMatrix: function() {
		if(this.parent != null && this.parent.matrixDirty) {
			this.parent.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,computeTranslatesOnly: function() {
		this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
		this.translatesOnlyDirty = false;
	}
	,doComputeMatrix: function() {
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,hits: function(x,y) {
		if(this.renderTargetDirty) {
			this.computeRenderTarget();
		}
		if(this.computedRenderTarget != null) {
			var parent = this.parent;
			if(parent != null) {
				while(true) {
					if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
						var filter = parent;
						if(filter.get_renderTexture() == this.computedRenderTarget) {
							if(ceramic_Screen.matchedHitVisual == null || filter.hitVisual == ceramic_Screen.matchedHitVisual) {
								return filter.visualInContentHits(this,x,y);
							}
						}
					}
					parent = parent.parent;
					if(!(parent != null)) {
						break;
					}
				}
			}
			return false;
		} else if(ceramic_Screen.matchedHitVisual != null && ceramic_Screen.matchedHitVisual != this) {
			return false;
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		return this.hitTest(x,y,ceramic_Visual._matrix);
	}
	,hitTest: function(x,y,matrix) {
		var _this = ceramic_Visual._matrix;
		var testX = x * _this.a + y * _this.c + _this.tx;
		var _this = ceramic_Visual._matrix;
		var testY = x * _this.b + y * _this.d + _this.ty;
		if(testX >= 0 && testX < this.get_width() && testY >= 0) {
			return testY < this.get_height();
		} else {
			return false;
		}
	}
	,interceptPointerDown: function(hittingVisual,x,y,touchIndex,buttonId) {
		return false;
	}
	,interceptPointerOver: function(hittingVisual,x,y) {
		return false;
	}
	,screenToVisual: function(x,y,point,handleFilters) {
		if(handleFilters == null) {
			handleFilters = true;
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		point.x = x * _this.a + y * _this.c + _this.tx;
		var _this = ceramic_Visual._matrix;
		point.y = x * _this.b + y * _this.d + _this.ty;
		if(handleFilters) {
			if(this.renderTargetDirty) {
				this.computeRenderTarget();
			}
			if(this.computedRenderTarget != null) {
				var parent = this.parent;
				if(parent != null) {
					while(true) {
						if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
							var filter = parent;
							if(filter.get_renderTexture() == this.computedRenderTarget) {
								filter.screenToVisual(point.x,point.y,point);
								break;
							}
						}
						parent = parent.parent;
						if(!(parent != null)) {
							break;
						}
					}
				}
			}
		}
	}
	,visualToScreen: function(x,y,point,handleFilters) {
		if(handleFilters == null) {
			handleFilters = true;
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		point.x = x * _this.a + y * _this.c + _this.tx;
		var _this = ceramic_Visual._matrix;
		point.y = x * _this.b + y * _this.d + _this.ty;
		if(handleFilters) {
			if(this.renderTargetDirty) {
				this.computeRenderTarget();
			}
			if(this.computedRenderTarget != null) {
				var parent = this.parent;
				if(parent != null) {
					while(true) {
						if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
							var filter = parent;
							if(filter.get_renderTexture() == this.computedRenderTarget) {
								filter.visualToScreen(point.x,point.y,point);
								break;
							}
						}
						parent = parent.parent;
						if(!(parent != null)) {
							break;
						}
					}
				}
			}
		}
	}
	,visualToTransform: function(transform) {
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		transform.a = this.matA;
		transform.b = this.matB;
		transform.c = this.matC;
		transform.d = this.matD;
		transform.tx = this.matTX;
		transform.ty = this.matTY;
		transform.changedDirty = true;
	}
	,computeVisibility: function() {
		if(this.parent != null && this.parent.visibilityDirty) {
			this.parent.computeVisibility();
		}
		this.computedVisible = this.visible;
		this.computedAlpha = this.alpha;
		if(this.computedVisible) {
			if(this.parent != null) {
				if(!this.parent.computedVisible && (this.parent.inheritAlpha || !this.parent.visible || this.parent.parent != null && !this.parent.parent.computedVisible)) {
					this.computedVisible = false;
				}
				if(this.inheritAlpha) {
					this.computedAlpha *= this.parent.computedAlpha;
				}
			}
			if(this.computedAlpha == 0 && this.blending != 4) {
				this.computedVisible = false;
			}
		}
		this.visibilityDirty = false;
	}
	,computeClip: function() {
		if(this.renderTargetDirty) {
			this.computeRenderTarget();
		}
		if(this.parent != null && this.parent.clipDirty) {
			this.parent.computeClip();
		}
		this.computedClip = false;
		if(this.parent != null) {
			if(this.parent.computedClip || this.parent.clip != null) {
				if(this.computedRenderTarget == this.parent.computedRenderTarget) {
					this.computedClip = true;
				}
			}
		}
		this.clipDirty = false;
	}
	,computeTouchable: function() {
		if(this.parent != null && this.parent.touchableDirty) {
			this.parent.computeTouchable();
		}
		this.computedTouchable = this.touchable;
		if(this.computedTouchable) {
			if(this.parent != null) {
				if(!this.parent.computedTouchable) {
					this.computedTouchable = false;
				}
			}
		}
		this.touchableDirty = false;
	}
	,computeRenderTarget: function() {
		if(this.parent != null && this.parent.renderTargetDirty) {
			this.parent.computeRenderTarget();
		}
		var prevComputedRenderTarget = this.computedRenderTarget;
		this.computedRenderTarget = this.renderTarget;
		if(this.computedRenderTarget == null && this.parent != null && this.parent.computedRenderTarget != null) {
			this.computedRenderTarget = this.parent.computedRenderTarget;
		}
		this.renderTargetDirty = false;
	}
	,computeContent: function() {
		this.contentDirty = false;
	}
	,autoChildrenDepth: function(start,step) {
		if(step == null) {
			step = 1;
		}
		if(start == null) {
			start = 1;
		}
		var depth = start;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.set_depth(depth);
				depth += step;
			}
		}
	}
	,sortChildrenByDepth: function() {
		if(this.children != null && this.children.length > 0) {
			var a = this.children;
			ceramic_SortVisualsByDepth.rec(a,0,a.length);
		}
	}
	,normalizeChildrenDepth: function(start,step) {
		if(step == null) {
			step = 1;
		}
		if(start == null) {
			start = 1;
		}
		if(this.children != null && this.children.length > 0) {
			this.sortChildrenByDepth();
			this.autoChildrenDepth();
		}
	}
	,computeChildrenDepth: function() {
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.computedDepth = child.depth * 2000000;
				child.computeChildrenDepth();
			}
			if(this.depthRange != -1) {
				ceramic_Visual._minDepth = 9999999999;
				ceramic_Visual._maxDepth = -9999999999;
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.computeMinMaxDepths();
				}
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.multiplyDepths(this.computedDepth + Math.min(0.01,this.depthRange * 2000000),Math.max(0,this.depthRange * 2000000 - 0.01));
				}
			}
		}
	}
	,computeMinMaxDepths: function() {
		if(ceramic_Visual._minDepth > this.computedDepth) {
			ceramic_Visual._minDepth = this.computedDepth;
		}
		if(ceramic_Visual._maxDepth < this.computedDepth + 1) {
			ceramic_Visual._maxDepth = this.computedDepth + 1;
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.computeMinMaxDepths();
			}
		}
	}
	,multiplyDepths: function(startDepth,targetRange) {
		if(ceramic_Visual._maxDepth == ceramic_Visual._minDepth) {
			this.computedDepth = startDepth + 0.5 * targetRange;
		} else {
			this.computedDepth = startDepth + (this.computedDepth - ceramic_Visual._minDepth) / (ceramic_Visual._maxDepth - ceramic_Visual._minDepth) * targetRange;
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.multiplyDepths(startDepth,targetRange);
			}
		}
	}
	,hasIndirectParent: function(targetParent) {
		var parent = this.parent;
		while(parent != null) {
			if(parent == targetParent) {
				return true;
			}
			parent = parent.parent;
		}
		return false;
	}
	,firstParentWithClass: function(clazz) {
		var parent = this.parent;
		while(parent != null) {
			if(js_Boot.__instanceof(parent,clazz)) {
				return parent;
			}
			parent = parent.parent;
		}
		return null;
	}
	,add: function(visual) {
		if(visual == this) {
			throw haxe_Exception.thrown("A visual cannot add itself as child!");
		}
		ceramic_App.app.hierarchyDirty = true;
		if(visual.parent != null) {
			visual.parent.remove(visual);
		}
		visual.parent = this;
		visual.visibilityDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		visual.matrixDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		visual.renderTargetDirty = true;
		visual.clipDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.renderTargetDirty = true;
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.clipDirty = true;
						if(child1.children != null) {
							var _g4 = 0;
							var _g5 = child1.children.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var child2 = child1.children[i2];
								child2.clipDirty = true;
								if(child2.children != null) {
									var _g6 = 0;
									var _g7 = child2.children.length;
									while(_g6 < _g7) {
										var i3 = _g6++;
										var child3 = child2.children[i3];
										child3.set_clipDirty(true);
									}
								}
							}
						}
					}
				}
				if(child.children != null) {
					var _g8 = 0;
					var _g9 = child.children.length;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var child4 = child.children[i4];
						child4.set_renderTargetDirty(true);
					}
				}
			}
		}
		if(this.children == null) {
			this.children = [];
		}
		this.children.push(visual);
		this.clipDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
	}
	,remove: function(visual) {
		ceramic_App.app.hierarchyDirty = true;
		if(this.children == null) {
			return;
		}
		var index = this.children.indexOf(visual);
		if(index != -1) {
			this.children.splice(this.children.indexOf(visual),1);
		} else {
			ceramic_App.app.logger.warning("Cannot remove visual " + Std.string(visual) + ", index is -1",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Visual.hx", lineNumber : 2079, className : "ceramic.Visual", methodName : "remove"});
		}
		visual.parent = null;
		visual.visibilityDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		visual.matrixDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		visual.renderTargetDirty = true;
		visual.clipDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.renderTargetDirty = true;
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.clipDirty = true;
						if(child1.children != null) {
							var _g4 = 0;
							var _g5 = child1.children.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var child2 = child1.children[i2];
								child2.clipDirty = true;
								if(child2.children != null) {
									var _g6 = 0;
									var _g7 = child2.children.length;
									while(_g6 < _g7) {
										var i3 = _g6++;
										var child3 = child2.children[i3];
										child3.set_clipDirty(true);
									}
								}
							}
						}
					}
				}
				if(child.children != null) {
					var _g8 = 0;
					var _g9 = child.children.length;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var child4 = child.children[i4];
						child4.set_renderTargetDirty(true);
					}
				}
			}
		}
		visual.clipDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
	}
	,contains: function(child,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var parent = child.parent;
		while(parent != null) {
			if(parent == this) {
				return true;
			}
			parent = parent.parent;
			if(!recursive) {
				break;
			}
		}
		return false;
	}
	,computeBounds: function() {
		if(this.children == null) {
			this._width = 0;
			this._height = 0;
		} else {
			var minX = 999999999.0;
			var minY = 999999999.0;
			var maxX = -999999999.9;
			var maxY = -999999999.9;
			var point = new ceramic_Point();
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				if(child.visible) {
					if(child.asMesh != null) {
						var mesh = child.asMesh;
						var vertices = mesh.vertices;
						var i1 = 0;
						var len = vertices.length;
						var x = 0.0;
						var y = 0.0;
						while(i1 < len) {
							x = vertices[i1];
							y = vertices[i1 + 1];
							child.visualToScreen(x,y,point,false);
							if(point.x > maxX) {
								maxX = point.x;
							}
							if(point.y > maxY) {
								maxY = point.y;
							}
							if(point.x < minX) {
								minX = point.x;
							}
							if(point.y < minY) {
								minY = point.y;
							}
							i1 += 2;
						}
					} else {
						child.visualToScreen(0,0,point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(child.get_width(),0,point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(0,child.get_height(),point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(child.get_width(),child.get_height(),point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
					}
				}
			}
			this.visualToScreen(0,0,point,false);
			var origX = point.x;
			var origY = point.y;
			this.screenToVisual(minX,minY,point,false);
			minX = point.x;
			minY = point.y;
			this.screenToVisual(maxX,maxY,point,false);
			maxX = point.x;
			maxY = point.y;
			if(maxX < minX) {
				var prevMinX = minX;
				minX = maxX;
				maxX = prevMinX;
			}
			if(maxY < minY) {
				var prevMinY = minY;
				minY = maxY;
				maxY = prevMinY;
			}
			this._width = maxX - minX;
			this._height = maxY - minY;
			this.set_anchorX(this._width != 0 ? -minX / this._width : 0);
			this.set_anchorY(this._height != 0 ? -minY / this._height : 0);
			this.screenToVisual(origX,origY,point,false);
			this.set_x(point.x - this._width * this.anchorX);
			this.set_y(point.y - this._height * this.anchorY);
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
	}
	,bindToScreenSize: function() {
		var _gthis = this;
		ceramic_App.app.screen.onResize(this,function() {
			var height = ceramic_App.app.screen.height;
			_gthis.set_width(ceramic_App.app.screen.width);
			_gthis.set_height(height);
		});
		var height = ceramic_App.app.screen.height;
		this.set_width(ceramic_App.app.screen.width);
		this.set_height(height);
	}
	,bindToTargetSize: function() {
		var _gthis = this;
		ceramic_App.app.screen.onResize(this,function() {
			var width = ceramic_App.app.settings.get_targetWidth();
			var height = ceramic_App.app.settings.get_targetHeight();
			_gthis.set_width(width);
			_gthis.set_height(height);
		});
		var width = ceramic_App.app.settings.get_targetWidth();
		var height = ceramic_App.app.settings.get_targetHeight();
		this.set_width(width);
		this.set_height(height);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offPointerDown();
		this.offPointerUp();
		this.offPointerOver();
		this.offPointerOut();
		this.offFocus();
		this.offBlur();
	}
	,__class__: ceramic_Visual
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_active:"set_active",get_active:"get_active",set_shader:"set_shader",set_transform:"set_transform",set_translateY:"set_translateY",get_translateY:"get_translateY",set_translateX:"set_translateX",get_translateX:"get_translateX",set_alpha:"set_alpha",set_rotation:"set_rotation",set_roundTranslation:"set_roundTranslation",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_anchorY:"set_anchorY",set_anchorX:"set_anchorX",set_skewY:"set_skewY",set_skewX:"set_skewX",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x",set_depthRange:"set_depthRange",set_depth:"set_depth",set_touchable:"set_touchable",set_visible:"set_visible",set_blending:"set_blending",set_renderTarget:"set_renderTarget",set_clipDirty:"set_clipDirty",set_touchableDirty:"set_touchableDirty",set_visibilityDirty:"set_visibilityDirty",set_renderTargetDirty:"set_renderTargetDirty",set_matrixDirty:"set_matrixDirty",set_contentDirty:"set_contentDirty",set_inheritAlpha:"set_inheritAlpha",set_clip:"set_clip",get_isPointerOver:"get_isPointerOver",get_isPointerDown:"get_isPointerDown"})
});
var ceramic_Quad = function() {
	this.frameHeight = -1;
	this.frameWidth = -1;
	this.frameY = -1;
	this.frameX = -1;
	this.texture = null;
	this.tile = null;
	this.transparent = false;
	this.color = 16777215;
	ceramic_Visual.call(this);
	this.asQuad = this;
};
$hxClasses["ceramic.Quad"] = ceramic_Quad;
ceramic_Quad.__name__ = "ceramic.Quad";
ceramic_Quad.__super__ = ceramic_Visual;
ceramic_Quad.prototype = $extend(ceramic_Visual.prototype,{
	set_tile: function(tile) {
		if(this.tile == tile) {
			return tile;
		}
		this.tile = tile;
		if(tile == null) {
			var texture = null;
			if(this.texture != texture) {
				if(this.texture != null) {
					this.texture.offDestroy($bind(this,this.textureDestroyed));
					if(this.texture.asset != null) {
						this.texture.asset.release();
					}
				}
				this.texture = texture;
				if(texture == null) {
					this.frameX = -1;
					this.frameY = -1;
					if(this.frameWidth != -1) {
						this.frameWidth = -1;
					}
					if(this.frameHeight != -1) {
						this.frameHeight = -1;
					}
				} else if(this.tile != null) {
					this.frameX = this.tile.frameX;
					this.frameY = this.tile.frameY;
					var frameWidth = this.tile.frameWidth;
					if(this.frameWidth != frameWidth) {
						this.frameWidth = frameWidth;
						if(frameWidth != -1) {
							this.set_width(frameWidth);
						}
					}
					var frameHeight = this.tile.frameHeight;
					if(this.frameHeight != frameHeight) {
						this.frameHeight = frameHeight;
						if(frameHeight != -1) {
							this.set_height(frameHeight);
						}
					}
				} else {
					this.frameX = 0;
					this.frameY = 0;
					var frameWidth = texture.width;
					if(this.frameWidth != frameWidth) {
						this.frameWidth = frameWidth;
						if(frameWidth != -1) {
							this.set_width(frameWidth);
						}
					}
					var frameHeight = texture.height;
					if(this.frameHeight != frameHeight) {
						this.frameHeight = frameHeight;
						if(frameHeight != -1) {
							this.set_height(frameHeight);
						}
					}
					texture.onDestroy(this,$bind(this,this.textureDestroyed));
					if(texture.asset != null) {
						texture.asset.retain();
					}
				}
			}
		} else {
			if(this.texture != tile.texture) {
				var texture = tile.texture;
				if(this.texture != texture) {
					if(this.texture != null) {
						this.texture.offDestroy($bind(this,this.textureDestroyed));
						if(this.texture.asset != null) {
							this.texture.asset.release();
						}
					}
					this.texture = texture;
					if(texture == null) {
						this.frameX = -1;
						this.frameY = -1;
						if(this.frameWidth != -1) {
							this.frameWidth = -1;
						}
						if(this.frameHeight != -1) {
							this.frameHeight = -1;
						}
					} else if(this.tile != null) {
						this.frameX = this.tile.frameX;
						this.frameY = this.tile.frameY;
						var frameWidth = this.tile.frameWidth;
						if(this.frameWidth != frameWidth) {
							this.frameWidth = frameWidth;
							if(frameWidth != -1) {
								this.set_width(frameWidth);
							}
						}
						var frameHeight = this.tile.frameHeight;
						if(this.frameHeight != frameHeight) {
							this.frameHeight = frameHeight;
							if(frameHeight != -1) {
								this.set_height(frameHeight);
							}
						}
					} else {
						this.frameX = 0;
						this.frameY = 0;
						var frameWidth = texture.width;
						if(this.frameWidth != frameWidth) {
							this.frameWidth = frameWidth;
							if(frameWidth != -1) {
								this.set_width(frameWidth);
							}
						}
						var frameHeight = texture.height;
						if(this.frameHeight != frameHeight) {
							this.frameHeight = frameHeight;
							if(frameHeight != -1) {
								this.set_height(frameHeight);
							}
						}
						texture.onDestroy(this,$bind(this,this.textureDestroyed));
						if(texture.asset != null) {
							texture.asset.retain();
						}
					}
				}
			}
			this.frameX = tile.frameX;
			this.frameY = tile.frameY;
			var frameWidth = tile.frameWidth;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = tile.frameHeight;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
		}
		return tile;
	}
	,set_texture: function(texture) {
		if(this.texture == texture) {
			return texture;
		}
		if(this.texture != null) {
			this.texture.offDestroy($bind(this,this.textureDestroyed));
			if(this.texture.asset != null) {
				this.texture.asset.release();
			}
		}
		this.texture = texture;
		if(texture == null) {
			this.frameX = -1;
			this.frameY = -1;
			if(this.frameWidth != -1) {
				this.frameWidth = -1;
			}
			if(this.frameHeight != -1) {
				this.frameHeight = -1;
			}
		} else if(this.tile != null) {
			this.frameX = this.tile.frameX;
			this.frameY = this.tile.frameY;
			var frameWidth = this.tile.frameWidth;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = this.tile.frameHeight;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
		} else {
			this.frameX = 0;
			this.frameY = 0;
			var frameWidth = texture.width;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = texture.height;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
			texture.onDestroy(this,$bind(this,this.textureDestroyed));
			if(texture.asset != null) {
				texture.asset.retain();
			}
		}
		return texture;
	}
	,set_frameWidth: function(frameWidth) {
		if(this.frameWidth == frameWidth) {
			return frameWidth;
		}
		this.frameWidth = frameWidth;
		if(frameWidth != -1) {
			this.set_width(frameWidth);
		}
		return frameWidth;
	}
	,set_frameHeight: function(frameHeight) {
		if(this.frameHeight == frameHeight) {
			return frameHeight;
		}
		this.frameHeight = frameHeight;
		if(frameHeight != -1) {
			this.set_height(frameHeight);
		}
		return frameHeight;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		var texture = null;
		if(this.texture != texture) {
			if(this.texture != null) {
				this.texture.offDestroy($bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.release();
				}
			}
			this.texture = texture;
			if(texture == null) {
				this.frameX = -1;
				this.frameY = -1;
				if(this.frameWidth != -1) {
					this.frameWidth = -1;
				}
				if(this.frameHeight != -1) {
					this.frameHeight = -1;
				}
			} else if(this.tile != null) {
				this.frameX = this.tile.frameX;
				this.frameY = this.tile.frameY;
				var frameWidth = this.tile.frameWidth;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = this.tile.frameHeight;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
			} else {
				this.frameX = 0;
				this.frameY = 0;
				var frameWidth = texture.width;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = texture.height;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
				texture.onDestroy(this,$bind(this,this.textureDestroyed));
				if(texture.asset != null) {
					texture.asset.retain();
				}
			}
		}
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
	}
	,frame: function(frameX,frameY,frameWidth,frameHeight) {
		this.frameX = frameX;
		this.frameY = frameY;
		if(this.frameWidth != frameWidth) {
			this.frameWidth = frameWidth;
			if(frameWidth != -1) {
				this.set_width(frameWidth);
			}
		}
		if(this.frameHeight != frameHeight) {
			this.frameHeight = frameHeight;
			if(frameHeight != -1) {
				this.set_height(frameHeight);
			}
		}
	}
	,computeMatrix: function() {
		if(this.parent != null && this.parent.matrixDirty) {
			this.parent.computeMatrix();
		}
		var _this = ceramic_Quad._matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,textureDestroyed: function(_) {
		var texture = null;
		if(this.texture != texture) {
			if(this.texture != null) {
				this.texture.offDestroy($bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.release();
				}
			}
			this.texture = texture;
			if(texture == null) {
				this.frameX = -1;
				this.frameY = -1;
				if(this.frameWidth != -1) {
					this.frameWidth = -1;
				}
				if(this.frameHeight != -1) {
					this.frameHeight = -1;
				}
			} else if(this.tile != null) {
				this.frameX = this.tile.frameX;
				this.frameY = this.tile.frameY;
				var frameWidth = this.tile.frameWidth;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = this.tile.frameHeight;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
			} else {
				this.frameX = 0;
				this.frameY = 0;
				var frameWidth = texture.width;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = texture.height;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
				texture.onDestroy(this,$bind(this,this.textureDestroyed));
				if(texture.asset != null) {
					texture.asset.retain();
				}
			}
		}
		this.set_tile(null);
	}
	,__class__: ceramic_Quad
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_frameHeight:"set_frameHeight",set_frameWidth:"set_frameWidth",set_texture:"set_texture",set_tile:"set_tile"})
});
var ceramic_Layer = function() {
	this.sizeDirty = false;
	ceramic_Quad.call(this);
	this.transparent = true;
};
$hxClasses["ceramic.Layer"] = ceramic_Layer;
ceramic_Layer.__name__ = "ceramic.Layer";
ceramic_Layer.__super__ = ceramic_Quad;
ceramic_Layer.prototype = $extend(ceramic_Quad.prototype,{
	emitResize: function(width,height) {
		this.willEmitResize(width,height);
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnResize[ii];
					++i;
				}
			}
			if(this.__cbOnceResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceResize[ii];
					var unbind = this.__cbOnceOwnerUnbindResize[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceResize = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(width,height);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onResize: function(owner,handleWidthHeight) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleWidthHeight != null) {
					_gthis.offResize(handleWidthHeight);
					handleWidthHeight = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleWidthHeight = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handleWidthHeight);
	}
	,onceResize: function(owner,handleWidthHeight) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleWidthHeight != null) {
					_gthis.offResize(handleWidthHeight);
					handleWidthHeight = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleWidthHeight = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handleWidthHeight);
	}
	,offResize: function(handleWidthHeight) {
		if(handleWidthHeight != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handleWidthHeight);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handleWidthHeight);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitResizeIfNeeded: function() {
		if(this._lifecycleState < 0 || !this.sizeDirty) {
			return;
		}
		this.sizeDirty = false;
		this.emitResize(this.get_width(),this.get_height());
	}
	,willEmitResize: function(width,height) {
	}
	,set_width: function(width) {
		if(this._width == width) {
			return width;
		}
		ceramic_Quad.prototype.set_width.call(this,width);
		if(!this.sizeDirty) {
			this.sizeDirty = true;
			ceramic_App.app.onceImmediate($bind(this,this.emitResizeIfNeeded));
		}
		return width;
	}
	,set_height: function(height) {
		if(this._height == height) {
			return height;
		}
		ceramic_Quad.prototype.set_height.call(this,height);
		if(!this.sizeDirty) {
			this.sizeDirty = true;
			ceramic_App.app.onceImmediate($bind(this,this.emitResizeIfNeeded));
		}
		return height;
	}
	,unbindEvents: function() {
		ceramic_Quad.prototype.unbindEvents.call(this);
		this.offResize();
	}
	,__class__: ceramic_Layer
});
var ceramic_Scene = function() {
	this.paused = false;
	this.autoUpdate = true;
	this.didCreate = false;
	this._assets = null;
	ceramic_Layer.call(this);
	this.transparent = true;
	ceramic_SceneSystem.get_shared().scenes.push(this);
};
$hxClasses["ceramic.Scene"] = ceramic_Scene;
ceramic_Scene.__name__ = "ceramic.Scene";
ceramic_Scene.__super__ = ceramic_Layer;
ceramic_Scene.prototype = $extend(ceramic_Layer.prototype,{
	get_assets: function() {
		if(this._assets == null && this._lifecycleState >= 0) {
			this._assets = new ceramic_Assets();
		}
		return this._assets;
	}
	,set_assets: function(assets) {
		return this._assets = assets;
	}
	,_boot: function() {
		this.preload();
		if(this._assets != null && this._assets.hasAnythingToLoad()) {
			this._assets.onceComplete(this,$bind(this,this._handleAssetsComplete));
			this._assets.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Scene.hx", lineNumber : 50, className : "ceramic.Scene", methodName : "_boot"});
		} else {
			this.load($bind(this,this.internalCreate));
		}
	}
	,internalCreate: function() {
		this.create();
		this.didCreate = true;
	}
	,_handleAssetsComplete: function(successful) {
		if(successful) {
			this.load($bind(this,this.internalCreate));
		} else {
			ceramic_App.app.logger.error("Failed to load all scene assets!",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Scene.hx", lineNumber : 72, className : "ceramic.Scene", methodName : "_handleAssetsComplete"});
		}
	}
	,willEmitResize: function(width,height) {
		this.resize(width,height);
	}
	,preload: function() {
	}
	,load: function(next) {
		next();
	}
	,create: function() {
	}
	,update: function(delta) {
	}
	,resize: function(width,height) {
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		HxOverrides.remove(ceramic_SceneSystem.get_shared().scenes,this);
		if(this._assets != null) {
			this._assets.destroy();
			this._assets = null;
		}
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
	}
	,__class__: ceramic_Scene
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_assets:"set_assets",get_assets:"get_assets"})
});
var GettingStarted = function() {
	ceramic_Scene.call(this);
};
$hxClasses["GettingStarted"] = GettingStarted;
GettingStarted.__name__ = "GettingStarted";
GettingStarted.__super__ = ceramic_Scene;
GettingStarted.prototype = $extend(ceramic_Scene.prototype,{
	preload: function() {
		this.get_assets().add(assets_Images.HAXE_LOGO);
	}
	,create: function() {
		var logo = new ceramic_Quad();
		var texture = this.get_assets().texture(assets_Images.HAXE_LOGO);
		if(logo.texture != texture) {
			if(logo.texture != null) {
				logo.texture.offDestroy($bind(logo,logo.textureDestroyed));
				if(logo.texture.asset != null) {
					logo.texture.asset.release();
				}
			}
			logo.texture = texture;
			if(texture == null) {
				logo.frameX = -1;
				logo.frameY = -1;
				if(logo.frameWidth != -1) {
					logo.frameWidth = -1;
				}
				if(logo.frameHeight != -1) {
					logo.frameHeight = -1;
				}
			} else if(logo.tile != null) {
				logo.frameX = logo.tile.frameX;
				logo.frameY = logo.tile.frameY;
				var frameWidth = logo.tile.frameWidth;
				if(logo.frameWidth != frameWidth) {
					logo.frameWidth = frameWidth;
					if(frameWidth != -1) {
						logo.set_width(frameWidth);
					}
				}
				var frameHeight = logo.tile.frameHeight;
				if(logo.frameHeight != frameHeight) {
					logo.frameHeight = frameHeight;
					if(frameHeight != -1) {
						logo.set_height(frameHeight);
					}
				}
			} else {
				logo.frameX = 0;
				logo.frameY = 0;
				var frameWidth = texture.width;
				if(logo.frameWidth != frameWidth) {
					logo.frameWidth = frameWidth;
					if(frameWidth != -1) {
						logo.set_width(frameWidth);
					}
				}
				var frameHeight = texture.height;
				if(logo.frameHeight != frameHeight) {
					logo.frameHeight = frameHeight;
					if(frameHeight != -1) {
						logo.set_height(frameHeight);
					}
				}
				texture.onDestroy(logo,$bind(logo,logo.textureDestroyed));
				if(texture.asset != null) {
					texture.asset.retain();
				}
			}
		}
		var x = this.get_width() * 0.5;
		var y = this.get_height() * 0.5;
		logo.set_x(x);
		logo.set_y(y);
		logo.set_anchorX(0.5);
		logo.set_anchorY(0.5);
		this.add(logo);
		ceramic_App.app.onUpdate(this,function(delta) {
			logo.set_rotation(logo.rotation + delta * 50);
		});
	}
	,__class__: GettingStarted
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	Main.events = new backend_ClayEvents(Main.ready);
	new clay_Clay(Main.configure,Main.events);
};
Main.configure = function(config) {
	config.window.backgroundSleep = 0.0166666666666666664;
	var userAgent = $global.navigator.userAgent.toLowerCase();
	if(userAgent.indexOf(" electron/") > -1) {
		try {
			var electronApp = require('electron').remote.require('./app.js');
			if(electronApp.isCeramicRunner) {
				backend_ElectronRunner.electronRunner = electronApp;
			}
		} catch( _g ) {
		}
	}
	if(backend_ElectronRunner.electronRunner != null) {
		document.getElementsByTagName('html')[0].className += ' in-electron-runner';
		ceramic_Logger._hasElectronRunner = true;
		var origConsoleLog = console.log;
		console.log = function(str) {
			backend_ElectronRunner.electronRunner.consoleLog(str);
			origConsoleLog(str);
		};
		window.addEventListener("error",function(event) {
			var error = event.error;
			if(((error) instanceof haxe_ValueException)) {
				var valueException = error;
				var _stack = valueException.get_stack();
			}
			var stack = ("" + error.stack).split("\n");
			var len = stack.length;
			var i = len - 1;
			var file = "";
			var line = 0;
			var isWin = navigator.platform.indexOf("Win") != -1;
			while(i >= 0) {
				var str = stack[i];
				str = StringTools.ltrim(str);
				str = StringTools.replace(str,"http://localhost:" + Std.string(backend_ElectronRunner.electronRunner.serverPort) + "/file:" + (isWin ? "/" : ""),"");
				str = StringTools.replace(str,"http://localhost:" + Std.string(backend_ElectronRunner.electronRunner.serverPort) + "/",Std.string(backend_ElectronRunner.electronRunner.appFiles) + "/");
				backend_ElectronRunner.electronRunner.consoleLog("[error] " + str);
				--i;
			}
		});
	}
	Main.project = new Project(ceramic_App.init());
	Main.app = ceramic_App.app;
	if(backend_ElectronRunner.electronRunner == null) {
		if(Main.app.settings.get_fullscreen()) {
			Main.app.settings.set_fullscreen(false);
		}
	}
	config.render.antialiasing = Main.app.settings.antialiasing;
	if(Main.app.settings.get_windowWidth() > 0) {
		config.window.width = Main.app.settings.get_windowWidth();
	} else if(Main.app.settings.get_targetWidth() > 0) {
		config.window.width = Main.app.settings.get_targetWidth();
	}
	if(Main.app.settings.get_windowHeight() > 0) {
		config.window.height = Main.app.settings.get_windowHeight();
	} else if(Main.app.settings.get_targetHeight() > 0) {
		config.window.height = Main.app.settings.get_targetHeight();
	}
	config.window.fullscreen = Main.app.settings.get_fullscreen();
	config.window.resizable = Main.app.settings.resizable;
	config.window.title = Main.app.settings.get_title();
	config.render.stencil = 2;
	config.render.depth = 16;
	Main.configureOrientation();
	if(Main.app.settings.backend.webParent != null) {
		config.runtime.windowParent = Main.app.settings.backend.webParent;
	} else {
		config.runtime.windowParent = window.document.getElementById("ceramic-app");
	}
	config.runtime.mouseUseBrowserWindowEvents = true;
	if(Main.app.settings.backend.allowDefaultKeys) {
		config.runtime.preventDefaultKeys = [];
	}
	var containerElId = Main.app.settings.backend.webParent != null ? Main.app.settings.backend.webParent.id : "ceramic-app";
	var containerWidth = 0;
	var containerHeight = 0;
	var containerPixelRatio = 0;
	var shouldFixSize = false;
	window.document.body.classList.add("ceramic-invisible");
	Main.app.onUpdate(null,function(delta) {
		var containerEl = window.document.getElementById(containerElId);
		if(containerEl != null) {
			var width = containerEl.offsetWidth;
			var height = containerEl.offsetHeight;
			var appEl = window.document.getElementById("app");
			if(Main.lastResizeTime != -1) {
				if(width != Main.lastNewWidth || height != Main.lastNewHeight) {
					if(Main.lastNewWidth != -1 || Main.lastNewHeight != -1) {
						window.document.body.classList.add("ceramic-invisible");
					}
					Main.lastResizeTime = ceramic_Timer.now;
					Main.lastNewWidth = width;
					Main.lastNewHeight = height;
					return;
				}
			}
			if(Main.lastResizeTime != -1 && ceramic_Timer.now - Main.lastResizeTime < 0.1) {
				return;
			}
			if(width != containerWidth || height != containerHeight || window.devicePixelRatio != containerPixelRatio) {
				var onlyDensityChanged = width == containerWidth && height == containerHeight;
				var pixelRatioUndefined = containerPixelRatio == 0;
				shouldFixSize = onlyDensityChanged || pixelRatioUndefined;
				containerWidth = width;
				containerHeight = height;
				containerPixelRatio = window.devicePixelRatio;
				var appEl1 = window.document.getElementById("app");
				appEl1.style.margin = "0 0 0 0";
				appEl1.style.width = containerWidth - (shouldFixSize ? 1 : 0) + "px";
				appEl1.style.height = containerHeight + "px";
				appEl1.width = Math.round((containerWidth - (shouldFixSize ? 1 : 0)) * window.devicePixelRatio);
				appEl1.height = Math.round(containerHeight * window.devicePixelRatio);
				Main.events.muteResizeEvent = shouldFixSize;
				Main.resizing++;
				if(Main.lastResizeTime != -1) {
					window.document.body.classList.add("ceramic-invisible");
				}
				var fn = null;
				fn = function() {
					if(Main.resizing == 0 && Main.readyToDisplay) {
						window.document.body.classList.remove("ceramic-invisible");
					}
				};
				ceramic_Timer.schedule(null,0.1,function() {
					Main.resizing--;
					fn();
				},-1);
				Main.lastResizeTime = ceramic_Timer.now;
			} else if(shouldFixSize) {
				shouldFixSize = false;
				Main.events.muteResizeEvent = false;
				appEl.style.width = containerWidth + "px";
				appEl.width = Math.round(containerWidth * window.devicePixelRatio);
			}
		}
	});
	if(backend_ElectronRunner.electronRunner != null) {
		if(backend_ElectronRunner.electronRunner.ceramicSettings != null) {
			backend_ElectronRunner.electronRunner.ceramicSettings({ "trace" : function(str) {
			}, title : Main.app.settings.get_title(), fullscreen : Main.app.settings.get_fullscreen(), resizable : Main.app.settings.resizable, targetWidth : Main.app.settings.get_windowWidth() > 0 ? Main.app.settings.get_windowWidth() : Main.app.settings.get_targetWidth(), targetHeight : Main.app.settings.get_windowHeight() > 0 ? Main.app.settings.get_windowHeight() : Main.app.settings.get_targetHeight()});
		}
		if(backend_ElectronRunner.electronRunner.listenFullscreen != null) {
			backend_ElectronRunner.electronRunner.listenFullscreen(function(e) {
				ceramic_App.app.settings.set_fullscreen(true);
			},function(e) {
				ceramic_App.app.settings.set_fullscreen(false);
			});
		}
	}
};
Main.ready = function() {
	var ext = clay_opengl_web_GL.gl.getExtension("OES_standard_derivatives");
	if(backend_ElectronRunner.electronRunner != null) {
		backend_ElectronRunner.electronRunner.ceramicReady();
	}
	var intervalId = null;
	var checkSizeReady = function() {
		var containerElId = Main.app.settings.backend.webParent != null ? Main.app.settings.backend.webParent.id : "ceramic-app";
		var containerEl = window.document.getElementById(containerElId);
		var appEl = window.document.getElementById("app");
		if(appEl.offsetWidth == containerEl.offsetWidth) {
			Main.readyToDisplay = true;
			window.clearInterval(intervalId);
		}
		if(Main.readyToDisplay && Main.resizing == 0) {
			window.document.body.classList.remove("ceramic-invisible");
		}
	};
	intervalId = window.setInterval(checkSizeReady,100);
};
Main.configureOrientation = function() {
};
Math.__name__ = "Math";
var Project = function(settings) {
	ceramic_Entity.call(this);
	settings.settings.antialiasing = 2;
	settings.settings.set_background(0);
	settings.settings.set_targetWidth(640);
	settings.settings.set_targetHeight(480);
	settings.settings.set_scaling(ceramic_ScreenScaling.FIT);
	settings.settings.resizable = true;
	ceramic_App.app.onceReady(this,$bind(this,this.ready));
};
$hxClasses["Project"] = Project;
Project.__name__ = "Project";
Project.__super__ = ceramic_Entity;
Project.prototype = $extend(ceramic_Entity.prototype,{
	ready: function() {
		clay_Clay.app.config.runtime.preventDefaultMouseWheel = false;
		clay_Clay.app.config.runtime.preventDefaultTouches = false;
		ceramic_SceneSystem.get_shared().setCurrentScene(new GettingStarted());
	}
	,__class__: Project
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var ceramic_Assets = function() {
	this.hotReload = false;
	this.nonBlocking = false;
	this.defaultImageOptions = null;
	this.runtimeAssets = null;
	this.assetsByKindAndName = new haxe_ds_StringMap();
	this.addedAssets = [];
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Assets"] = ceramic_Assets;
ceramic_Assets.__name__ = "ceramic.Assets";
ceramic_Assets.decodePath = function(path) {
	return new ceramic_AssetPathInfo(path);
};
ceramic_Assets.addAssetKind = function(kind,add,extensions,dir,types) {
	var this1 = ceramic_Assets.customAssetKinds;
	var value = new ceramic_CustomAssetKind(kind,add,extensions,dir,types);
	this1.h[kind] = value;
};
ceramic_Assets.assetNameFromPath = function(path) {
	var h = ceramic_Assets.allByName.h;
	var name_h = h;
	var name_keys = Object.keys(h);
	var name_length = name_keys.length;
	var name_current = 0;
	while(name_current < name_length) {
		var name = name_keys[name_current++];
		var list = ceramic_Assets.allByName.h[name];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i] == path) {
				return name;
			}
		}
	}
	return null;
};
ceramic_Assets.realAssetPath = function(path,runtimeAssets) {
	if(runtimeAssets != null) {
		if(runtimeAssets.path != null) {
			return ceramic_Path.join([runtimeAssets.path,path]);
		} else {
			return path;
		}
	} else {
		var assetsPrefix = null;
		if(assetsPrefix != null) {
			return assetsPrefix + path;
		} else {
			return path;
		}
	}
};
ceramic_Assets.incrementReloadCount = function(realAssetPath) {
	if(ceramic_Assets.reloadCountByRealAssetPath == null) {
		ceramic_Assets.reloadCountByRealAssetPath = new haxe_ds_StringMap();
	}
	if(Object.prototype.hasOwnProperty.call(ceramic_Assets.reloadCountByRealAssetPath.h,realAssetPath)) {
		ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath] += 1;
	} else {
		ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath] = 1;
	}
};
ceramic_Assets.getReloadCount = function(realAssetPath) {
	if(ceramic_Assets.reloadCountByRealAssetPath == null || !Object.prototype.hasOwnProperty.call(ceramic_Assets.reloadCountByRealAssetPath.h,realAssetPath)) {
		return 0;
	}
	return ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath];
};
ceramic_Assets.__super__ = ceramic_Entity;
ceramic_Assets.prototype = $extend(ceramic_Entity.prototype,{
	emitComplete: function(success) {
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnComplete[ii];
					++i;
				}
			}
			if(this.__cbOnceComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceComplete[ii];
					var unbind = this.__cbOnceOwnerUnbindComplete[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceComplete = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handleSuccess);
	}
	,onceComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handleSuccess);
	}
	,offComplete: function(handleSuccess) {
		if(handleSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitUpdate: function(asset) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(asset);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleAsset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAsset != null) {
					_gthis.offUpdate(handleAsset);
					handleAsset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAsset = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleAsset);
	}
	,onceUpdate: function(owner,handleAsset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAsset != null) {
					_gthis.offUpdate(handleAsset);
					handleAsset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAsset = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleAsset);
	}
	,offUpdate: function(handleAsset) {
		if(handleAsset != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleAsset);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleAsset);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitProgress: function(loaded,total,success) {
		var len = 0;
		if(this.__cbOnProgress != null) {
			len += this.__cbOnProgress.length;
		}
		if(this.__cbOnceProgress != null) {
			len += this.__cbOnceProgress.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnProgress.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnProgress[ii];
					++i;
				}
			}
			if(this.__cbOnceProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnceProgress.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceProgress[ii];
					var unbind = this.__cbOnceOwnerUnbindProgress[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceProgress = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(loaded,total,success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onProgress: function(owner,handleLoadedTotalSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "progress" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLoadedTotalSuccess != null) {
					_gthis.offProgress(handleLoadedTotalSuccess);
					handleLoadedTotalSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindProgress == null) {
				this.__cbOnOwnerUnbindProgress = [];
			}
			this.__cbOnOwnerUnbindProgress.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLoadedTotalSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindProgress == null) {
				this.__cbOnOwnerUnbindProgress = [];
			}
			this.__cbOnOwnerUnbindProgress.push(null);
		}
		if(this.__cbOnProgress == null) {
			this.__cbOnProgress = [];
		}
		this.__cbOnProgress.push(handleLoadedTotalSuccess);
	}
	,onceProgress: function(owner,handleLoadedTotalSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "progress" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLoadedTotalSuccess != null) {
					_gthis.offProgress(handleLoadedTotalSuccess);
					handleLoadedTotalSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindProgress == null) {
				this.__cbOnceOwnerUnbindProgress = [];
			}
			this.__cbOnceOwnerUnbindProgress.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLoadedTotalSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindProgress == null) {
				this.__cbOnceOwnerUnbindProgress = [];
			}
			this.__cbOnceOwnerUnbindProgress.push(null);
		}
		if(this.__cbOnceProgress == null) {
			this.__cbOnceProgress = [];
		}
		this.__cbOnceProgress.push(handleLoadedTotalSuccess);
	}
	,offProgress: function(handleLoadedTotalSuccess) {
		if(handleLoadedTotalSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnProgress != null) {
				index = this.__cbOnProgress.indexOf(handleLoadedTotalSuccess);
				if(index != -1) {
					this.__cbOnProgress.splice(index,1);
					unbind = this.__cbOnOwnerUnbindProgress[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindProgress.splice(index,1);
				}
			}
			if(this.__cbOnceProgress != null) {
				index = this.__cbOnceProgress.indexOf(handleLoadedTotalSuccess);
				if(index != -1) {
					this.__cbOnceProgress.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindProgress[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindProgress.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindProgress.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindProgress[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindProgress = null;
			}
			if(this.__cbOnceOwnerUnbindProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindProgress.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindProgress[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindProgress = null;
			}
			this.__cbOnProgress = null;
			this.__cbOnceProgress = null;
		}
	}
	,listensProgress: function() {
		if(!(this.__cbOnProgress != null && this.__cbOnProgress.length > 0)) {
			if(this.__cbOnceProgress != null) {
				return this.__cbOnceProgress.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitAssetFilesChange: function(newFiles,previousFiles) {
		var len = 0;
		if(this.__cbOnAssetFilesChange != null) {
			len += this.__cbOnAssetFilesChange.length;
		}
		if(this.__cbOnceAssetFilesChange != null) {
			len += this.__cbOnceAssetFilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnAssetFilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnAssetFilesChange[ii];
					++i;
				}
			}
			if(this.__cbOnceAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceAssetFilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceAssetFilesChange[ii];
					var unbind = this.__cbOnceOwnerUnbindAssetFilesChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceAssetFilesChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newFiles,previousFiles);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onAssetFilesChange: function(owner,handleNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "assetFilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFilesPreviousFiles != null) {
					_gthis.offAssetFilesChange(handleNewFilesPreviousFiles);
					handleNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindAssetFilesChange == null) {
				this.__cbOnOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnOwnerUnbindAssetFilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindAssetFilesChange == null) {
				this.__cbOnOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnOwnerUnbindAssetFilesChange.push(null);
		}
		if(this.__cbOnAssetFilesChange == null) {
			this.__cbOnAssetFilesChange = [];
		}
		this.__cbOnAssetFilesChange.push(handleNewFilesPreviousFiles);
	}
	,onceAssetFilesChange: function(owner,handleNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "assetFilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFilesPreviousFiles != null) {
					_gthis.offAssetFilesChange(handleNewFilesPreviousFiles);
					handleNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindAssetFilesChange == null) {
				this.__cbOnceOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnceOwnerUnbindAssetFilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindAssetFilesChange == null) {
				this.__cbOnceOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnceOwnerUnbindAssetFilesChange.push(null);
		}
		if(this.__cbOnceAssetFilesChange == null) {
			this.__cbOnceAssetFilesChange = [];
		}
		this.__cbOnceAssetFilesChange.push(handleNewFilesPreviousFiles);
	}
	,offAssetFilesChange: function(handleNewFilesPreviousFiles) {
		if(handleNewFilesPreviousFiles != null) {
			var index;
			var unbind;
			if(this.__cbOnAssetFilesChange != null) {
				index = this.__cbOnAssetFilesChange.indexOf(handleNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnAssetFilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindAssetFilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindAssetFilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceAssetFilesChange != null) {
				index = this.__cbOnceAssetFilesChange.indexOf(handleNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnceAssetFilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindAssetFilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindAssetFilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindAssetFilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindAssetFilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindAssetFilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindAssetFilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindAssetFilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindAssetFilesChange = null;
			}
			this.__cbOnAssetFilesChange = null;
			this.__cbOnceAssetFilesChange = null;
		}
	}
	,listensAssetFilesChange: function() {
		if(!(this.__cbOnAssetFilesChange != null && this.__cbOnAssetFilesChange.length > 0)) {
			if(this.__cbOnceAssetFilesChange != null) {
				return this.__cbOnceAssetFilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = [].concat(this.addedAssets);
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			asset.offDestroy($bind(this,this.assetDestroyed));
			asset.destroy();
		}
		this.addedAssets = null;
		this.assetsByKindAndName = null;
	}
	,flush: function() {
		var _g = 0;
		var _g1 = [].concat(this.addedAssets);
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset.refCount == 0) {
				asset.destroy();
			}
		}
	}
	,add: function(id,options) {
		var value = typeof(id) == "string" ? id : Reflect.field(id,"_id");
		var colonIndex = value.indexOf(":");
		if(colonIndex == -1) {
			throw haxe_Exception.thrown("Assets: invalid asset id: " + id);
		}
		var kind = HxOverrides.substr(value,0,colonIndex);
		var name = HxOverrides.substr(value,colonIndex + 1,null);
		switch(kind) {
		case "binary":
			this.addBinary(name,options);
			break;
		case "database":
			this.addDatabase(name,options);
			break;
		case "font":
			this.addFont(name,options);
			break;
		case "fragments":
			this.addFragments(name,options);
			break;
		case "image":
			this.addImage(name,options);
			break;
		case "shader":
			this.addShader(name,options);
			break;
		case "sound":
			this.addSound(name,options);
			break;
		case "text":
			this.addText(name,options);
			break;
		default:
			if(Object.prototype.hasOwnProperty.call(ceramic_Assets.customAssetKinds.h,kind)) {
				ceramic_Assets.customAssetKinds.h[kind].add(this,name,options);
			} else {
				throw haxe_Exception.thrown("Assets: invalid asset kind (" + kind + ") for id: " + id);
			}
		}
	}
	,addAll: function(pathPattern) {
		var info = ceramic_App.app.backend.info;
		var imageExtensions = ["png","jpg","jpeg"];
		var textExtensions = ["txt","json","fnt"];
		var soundExtensions = ["ogg","wav"];
		var shaderExtensions = ["frag","vert"];
		var fontExtensions = ["fnt"];
		var databaseExtensions = ["csv"];
		var fragmentsExtensions = ["fragments"];
		var customKindsExtensions = [];
		var customKindsAdd = [];
		var h = ceramic_Assets.customAssetKinds.h;
		var value_h = h;
		var value_keys = Object.keys(h);
		var value_length = value_keys.length;
		var value_current = 0;
		while(value_current < value_length) {
			var value = value_h[value_keys[value_current++]];
			customKindsExtensions.push(value.extensions);
			customKindsAdd.push(value.add);
		}
		var allByName = ceramic_Assets.allByName;
		if(this.runtimeAssets != null) {
			allByName = this.runtimeAssets.getLists().allByName;
		}
		var h = allByName.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var name = _g1_key;
			var paths = _g1_value;
			if(pathPattern != null) {
				var matches = false;
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					if(pathPattern.match(paths[i])) {
						matches = true;
						break;
					}
				}
				if(!matches) {
					continue;
				}
			}
			var assetExtension = ceramic_Path.extension(paths[0]);
			var didAdd = false;
			var _g2 = 0;
			var _g3 = imageExtensions.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(imageExtensions[i1] == assetExtension) {
					this.addImage(name);
					didAdd = true;
					break;
				}
			}
			if(!didAdd) {
				var _g4 = 0;
				var _g5 = textExtensions.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					if(textExtensions[i2] == assetExtension) {
						this.addText(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g6 = 0;
				var _g7 = soundExtensions.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					if(soundExtensions[i3] == assetExtension) {
						this.addSound(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g8 = 0;
				var _g9 = shaderExtensions.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(shaderExtensions[i4] == assetExtension) {
						this.addShader(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g10 = 0;
				var _g11 = fontExtensions.length;
				while(_g10 < _g11) {
					var i5 = _g10++;
					if(fontExtensions[i5] == assetExtension) {
						this.addFont(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g12 = 0;
				var _g13 = databaseExtensions.length;
				while(_g12 < _g13) {
					var i6 = _g12++;
					if(databaseExtensions[i6] == assetExtension) {
						this.addDatabase(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g14 = 0;
				var _g15 = fragmentsExtensions.length;
				while(_g14 < _g15) {
					var i7 = _g14++;
					if(fragmentsExtensions[i7] == assetExtension) {
						this.addFragments(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g16 = 0;
				var _g17 = customKindsExtensions.length;
				while(_g16 < _g17) {
					var j = _g16++;
					var extensions = customKindsExtensions[j];
					var _g18 = 0;
					var _g19 = extensions.length;
					while(_g18 < _g19) {
						var i8 = _g18++;
						if(extensions[i8] == assetExtension) {
							var add = customKindsAdd[j];
							add(this,name);
							didAdd = true;
							break;
						}
					}
					if(didAdd) {
						break;
					}
				}
			}
		}
	}
	,addImage: function(name,options) {
		if(StringTools.startsWith(name,"image:")) {
			name = HxOverrides.substr(name,6,null);
		}
		this.addAsset(new ceramic_ImageAsset(name,options));
	}
	,addFont: function(name,options) {
		if(StringTools.startsWith(name,"font:")) {
			name = HxOverrides.substr(name,5,null);
		}
		this.addAsset(new ceramic_FontAsset(name,options));
	}
	,addText: function(name,options) {
		if(StringTools.startsWith(name,"text:")) {
			name = HxOverrides.substr(name,5,null);
		}
		this.addAsset(new ceramic_TextAsset(name,options));
	}
	,addBinary: function(name,options) {
		if(StringTools.startsWith(name,"binary:")) {
			name = HxOverrides.substr(name,7,null);
		}
		this.addAsset(new ceramic_BinaryAsset(name,options));
	}
	,addSound: function(name,options) {
		if(StringTools.startsWith(name,"sound:")) {
			name = HxOverrides.substr(name,6,null);
		}
		this.addAsset(new ceramic_SoundAsset(name,options));
	}
	,addDatabase: function(name,options) {
		if(StringTools.startsWith(name,"database:")) {
			name = HxOverrides.substr(name,9,null);
		}
		this.addAsset(new ceramic_DatabaseAsset(name,options));
	}
	,addFragments: function(name,options) {
		if(StringTools.startsWith(name,"fragments:")) {
			name = HxOverrides.substr(name,10,null);
		}
		this.addAsset(new ceramic_FragmentsAsset(name,options));
	}
	,addShader: function(name,options) {
		if(StringTools.startsWith(name,"shader:")) {
			name = HxOverrides.substr(name,7,null);
		}
		this.addAsset(new ceramic_ShaderAsset(name,options));
	}
	,addAsset: function(asset) {
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,asset.kind)) {
			var this1 = this.assetsByKindAndName;
			var key = asset.kind;
			var value = new haxe_ds_StringMap();
			this1.h[key] = value;
		}
		var byName = this.assetsByKindAndName.h[asset.kind];
		if(((asset) instanceof ceramic_ImageAsset)) {
			var imageAsset = asset;
			imageAsset.defaultImageOptions = this.defaultImageOptions;
		}
		var previousAsset = byName.h[asset.name];
		if(previousAsset != null) {
			if(previousAsset != asset) {
				ceramic_App.app.logger.info("Replace " + Std.string(previousAsset) + " with " + Std.string(asset),{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Assets.hx", lineNumber : 322, className : "ceramic.Assets", methodName : "addAsset"});
				this.removeAsset(previousAsset);
			} else {
				ceramic_App.app.logger.warning("Cannot add asset " + Std.string(asset) + " because it is already added for name: " + asset.name + ".",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Assets.hx", lineNumber : 325, className : "ceramic.Assets", methodName : "addAsset"});
				return previousAsset;
			}
		}
		asset.onDestroy(this,$bind(this,this.assetDestroyed));
		byName.h[asset.name] = asset;
		if(asset.owner != null && asset.owner != this) {
			asset.owner.removeAsset(asset);
		}
		this.addedAssets.push(asset);
		asset.owner = this;
		asset.set_runtimeAssets(this.runtimeAssets);
		asset.set_hotReload(this.hotReload);
		return previousAsset;
	}
	,assetDestroyed: function(_) {
		var toDestroy = null;
		var _g = 0;
		var _g1 = this.addedAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset._lifecycleState < 0) {
				if(toDestroy == null) {
					toDestroy = [];
				}
				toDestroy.push(asset);
			}
		}
		if(toDestroy != null) {
			var _g = 0;
			while(_g < toDestroy.length) {
				var asset = toDestroy[_g];
				++_g;
				this.removeAsset(asset);
			}
		}
	}
	,imageAsset: function(name) {
		return this.asset(name,"image");
	}
	,fontAsset: function(name) {
		return this.asset(name,"font");
	}
	,textAsset: function(name) {
		return this.asset(name,"text");
	}
	,soundAsset: function(name) {
		return this.asset(name,"sound");
	}
	,databaseAsset: function(name) {
		return this.asset(name,"database");
	}
	,fragmentsAsset: function(name) {
		return this.asset(name,"fragments");
	}
	,shaderAsset: function(name) {
		return this.asset(name,"shader");
	}
	,asset: function(idOrName,kind) {
		var value = typeof(idOrName) == "string" ? idOrName : Reflect.field(idOrName,"_id");
		var colonIndex = value.indexOf(":");
		var name = value;
		if(colonIndex != -1) {
			name = value.substring(colonIndex + 1);
			kind = value.substring(0,colonIndex);
		}
		if(kind == null) {
			return null;
		}
		var byName = this.assetsByKindAndName.h[kind];
		if(byName == null) {
			return null;
		}
		return byName.h[name];
	}
	,removeAsset: function(asset) {
		asset.offDestroy($bind(this,this.assetDestroyed));
		var byName = this.assetsByKindAndName.h[asset.kind];
		var toRemove = byName.h[asset.name];
		if(asset != toRemove) {
			throw haxe_Exception.thrown("Cannot remove asset " + Std.string(asset) + " if it was not added at the first place.");
		}
		HxOverrides.remove(this.addedAssets,asset);
		var key = asset.name;
		if(Object.prototype.hasOwnProperty.call(byName.h,key)) {
			delete(byName.h[key]);
		}
		asset.owner = null;
	}
	,hasAnythingToLoad: function() {
		var _g = 0;
		var _g1 = this.addedAssets.length;
		while(_g < _g1) {
			var i = _g++;
			var asset = this.addedAssets[i];
			if(asset.get_status() == ceramic_AssetStatus.NONE) {
				return true;
			}
		}
		return false;
	}
	,load: function(warnIfNothingToLoad,pos) {
		if(warnIfNothingToLoad == null) {
			warnIfNothingToLoad = true;
		}
		var _gthis = this;
		var total = 0;
		var pending = 0;
		var allSuccess = true;
		var _g = 0;
		var _g1 = this.addedAssets;
		while(_g < _g1.length) {
			var asset = [_g1[_g]];
			++_g;
			if(asset[0].get_status() == ceramic_AssetStatus.NONE) {
				asset[0].onceComplete(this,(function(asset) {
					return function(success) {
						if(!success) {
							allSuccess = false;
							ceramic_App.app.logger.error("Failed to load asset " + asset[0].name + " (" + Std.string(asset[0]) + ")",pos);
						}
						pending -= 1;
						_gthis.emitProgress(total - pending,total,allSuccess);
						if(pending == 0) {
							_gthis.emitComplete(allSuccess);
						}
					};
				})(asset));
				pending += 1;
				total += 1;
			}
		}
		if(pending > 0) {
			if(this.nonBlocking) {
				var toLoad = [].concat(this.addedAssets);
				var loadNext = null;
				loadNext = function() {
					var asset = toLoad.shift();
					if(asset.get_status() == ceramic_AssetStatus.NONE) {
						asset.load();
						asset.onceComplete(_gthis,function(success) {
							if(toLoad.length > 0) {
								ceramic_App.app.onceUpdate(_gthis,function(delta) {
									ceramic_App.app.onceUpdate(_gthis,function(delta) {
										loadNext();
									});
								});
							}
						});
					} else if(toLoad.length > 0) {
						loadNext();
					}
				};
				loadNext();
			} else {
				var _g = 0;
				var _g1 = this.addedAssets;
				while(_g < _g1.length) {
					var asset1 = _g1[_g];
					++_g;
					if(asset1.get_status() == ceramic_AssetStatus.NONE) {
						asset1.load();
					}
				}
			}
		} else {
			if(warnIfNothingToLoad) {
				ceramic_App.app.logger.warning("There was no asset to load.",pos);
			}
			this.emitComplete(true);
		}
	}
	,ensure: function(id,options,done) {
		var existing = this.asset(id);
		var asset = null;
		if(existing == null) {
			this.add(id,options);
			asset = this.asset(id);
		} else {
			asset = existing;
		}
		if(asset == null) {
			done(null);
			return;
		}
		if(asset.get_status() == ceramic_AssetStatus.READY) {
			done(asset);
		} else if(asset.get_status() == ceramic_AssetStatus.LOADING || asset.get_status() == ceramic_AssetStatus.NONE) {
			asset.onceComplete(null,function(success) {
				if(success) {
					done(asset);
				} else {
					done(null);
				}
			});
			if(asset.get_status() == ceramic_AssetStatus.NONE) {
				this.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Assets.hx", lineNumber : 577, className : "ceramic.Assets", methodName : "ensure"});
			}
		} else {
			done(null);
		}
	}
	,ensureImage: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"image:")) {
			_name = "image:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_ImageAsset) ? asset : null);
		});
	}
	,ensureFont: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"font:")) {
			_name = "font:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_FontAsset) ? asset : null);
		});
	}
	,ensureText: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"text:")) {
			_name = "text:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_TextAsset) ? asset : null);
		});
	}
	,ensureSound: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"sound:")) {
			_name = "sound:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_SoundAsset) ? asset : null);
		});
	}
	,ensureDatabase: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"database:")) {
			_name = "database:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_DatabaseAsset) ? asset : null);
		});
	}
	,ensureShader: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"shader:")) {
			_name = "shader:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_ShaderAsset) ? asset : null);
		});
	}
	,texture: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"image:")) {
			realName = HxOverrides.substr(realName,6,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"image")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["image"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_texture();
	}
	,font: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"font:")) {
			realName = HxOverrides.substr(realName,5,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"font")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["font"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_font();
	}
	,sound: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"sound:")) {
			realName = HxOverrides.substr(realName,6,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"sound")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["sound"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_sound();
	}
	,text: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"text:")) {
			realName = HxOverrides.substr(realName,5,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"text")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["text"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_text();
	}
	,bytes: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"binary:")) {
			realName = HxOverrides.substr(realName,7,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"binary")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["binary"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_bytes();
	}
	,shader: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"shader:")) {
			realName = HxOverrides.substr(realName,7,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"shader")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["shader"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.shader;
	}
	,database: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"database:")) {
			realName = HxOverrides.substr(realName,9,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"database")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["database"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_database();
	}
	,fragments: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"fragments:")) {
			realName = HxOverrides.substr(realName,10,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"fragments")) {
			return null;
		}
		var asset = this.assetsByKindAndName.h["fragments"].h[realName];
		if(asset == null) {
			return null;
		}
		return asset.get_fragments();
	}
	,iterator: function() {
		var list = [];
		var h = this.assetsByKindAndName.h;
		var byName_h = h;
		var byName_keys = Object.keys(h);
		var byName_length = byName_keys.length;
		var byName_current = 0;
		while(byName_current < byName_length) {
			var byName = byName_h[byName_keys[byName_current++]];
			var h = byName.h;
			var asset_h = h;
			var asset_keys = Object.keys(h);
			var asset_length = asset_keys.length;
			var asset_current = 0;
			while(asset_current < asset_length) {
				var asset = asset_h[asset_keys[asset_current++]];
				list.push(asset);
			}
		}
		return new haxe_iterators_ArrayIterator(list);
	}
	,set_hotReload: function(hotReload) {
		if(this.hotReload == hotReload) {
			return hotReload;
		}
		this.hotReload = hotReload;
		var _g = 0;
		var _g1 = this.addedAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			asset.set_hotReload(hotReload);
		}
		return hotReload;
	}
	,watchDirectory: function(path,hotReload) {
		if(hotReload == null) {
			hotReload = true;
		}
		var _gthis = this;
		if(this.runtimeAssets != null) {
			throw haxe_Exception.thrown("There is already an instance of RuntimeAssets assigned. Cannot watch a directory, which also need its own instance");
		}
		if(path == null) {
			throw haxe_Exception.thrown("Cannot watch directory when using web target! (unless using electron runner and `ceramic_use_electron` define)");
		}
		if(hotReload) {
			this.set_hotReload(hotReload);
		}
		this.runtimeAssets = ceramic_RuntimeAssets.fromPath(path);
		var watch = new ceramic_WatchDirectory();
		watch.watchDirectory(path);
		watch.onDirectoryChange(this,function(_,newFiles,previousFiles) {
			if(_gthis.runtimeAssets == null) {
				ceramic_App.app.logger.warning("Missing instance of RuntimeAssets when watched directory changed (path: " + path + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Assets.hx", lineNumber : 831, className : "ceramic.Assets", methodName : "watchDirectory"});
			} else {
				_gthis.runtimeAssets.reset(ceramic_Files.getFlatDirectory(path),path);
			}
			if(ceramic_Assets.lastModifiedByRealAssetPath == null) {
				ceramic_Assets.lastModifiedByRealAssetPath = new haxe_ds_StringMap();
				var h = previousFiles.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					var _g1_key = key;
					var _g1_value = _g_h[key];
					var key1 = _g1_key;
					var value = _g1_value;
					var realPathKey = ceramic_Assets.realAssetPath(key1,_gthis.runtimeAssets);
					ceramic_Assets.lastModifiedByRealAssetPath.h[realPathKey] = value;
				}
			}
			var newLastModifiedByRealAssetPath = new haxe_ds_StringMap();
			var h = newFiles.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g1_key = key;
				var _g1_value = _g_h[key];
				var key1 = _g1_key;
				var value = _g1_value;
				var realPathKey = ceramic_Assets.realAssetPath(key1,_gthis.runtimeAssets);
				newLastModifiedByRealAssetPath.h[realPathKey] = value;
				if(Object.prototype.hasOwnProperty.call(ceramic_Assets.lastModifiedByRealAssetPath.h,realPathKey)) {
					if(value > ceramic_Assets.lastModifiedByRealAssetPath.h[realPathKey]) {
						ceramic_Assets.incrementReloadCount(realPathKey);
					}
				}
			}
			ceramic_Assets.lastModifiedByRealAssetPath = newLastModifiedByRealAssetPath;
			_gthis.emitAssetFilesChange(newFiles,previousFiles);
		});
		this.onDestroy(watch,function(_) {
			watch.destroy();
		});
		return watch;
	}
	,inheritRuntimeAssetsFromAssets: function(assets) {
		this.runtimeAssets = assets.runtimeAssets;
		this.defaultImageOptions = assets.defaultImageOptions;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offComplete();
		this.offUpdate();
		this.offProgress();
		this.offAssetFilesChange();
	}
	,__class__: ceramic_Assets
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_hotReload:"set_hotReload"})
});
var assets_AllAssets = function() { };
$hxClasses["assets.AllAssets"] = assets_AllAssets;
assets_AllAssets.__name__ = "assets.AllAssets";
assets_AllAssets.bind = function() {
	ceramic_Assets.all = assets_AllAssets.all;
	ceramic_Assets.allDirs = assets_AllAssets.allDirs;
	ceramic_Assets.allDirsByName = assets_AllAssets.allDirsByName;
	ceramic_Assets.allByName = assets_AllAssets.allByName;
};
var assets_Images = function() { };
$hxClasses["assets.Images"] = assets_Images;
assets_Images.__name__ = "assets.Images";
var spec_Audio = function() { };
$hxClasses["spec.Audio"] = spec_Audio;
spec_Audio.__name__ = "spec.Audio";
spec_Audio.__isInterface__ = true;
spec_Audio.prototype = {
	__class__: spec_Audio
};
var backend_Audio = function() {
	this.loadedAudioRetainCount = new haxe_ds_StringMap();
	this.loadedAudioResources = new haxe_ds_StringMap();
	this.loadingAudioCallbacks = new haxe_ds_StringMap();
	this.loopHandles = new haxe_ds_IntMap();
	this.loopingStreams = new haxe_ds_IntMap();
};
$hxClasses["backend.Audio"] = backend_Audio;
backend_Audio.__name__ = "backend.Audio";
backend_Audio.__interfaces__ = [spec_Audio];
backend_Audio.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var done = function(resource) {
			ceramic_App.app.onceImmediate(function() {
				_done(resource);
				_done = null;
			});
		};
		var isStream = options != null && options.stream == true;
		if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadedAudioResources.h,path)) {
			this.loadedAudioRetainCount.h[path] += 1;
			var existing = this.loadedAudioResources.h[path];
			done(existing);
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingAudioCallbacks.h,path)) {
			this.loadingAudioCallbacks.h[path].push(function(resource) {
				if(resource != null) {
					var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedAudioRetainCount.h,path) ? _gthis.loadedAudioRetainCount.h[path] : 0;
					_gthis.loadedAudioRetainCount.h[path] = retain + 1;
				}
				done(resource);
			});
			return;
		}
		var cleanedPath = path;
		var questionMarkIndex = cleanedPath.indexOf("?");
		if(questionMarkIndex != -1) {
			cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
		}
		this.loadingAudioCallbacks.h[path] = [function(resource) {
			if(resource != null) {
				var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedAudioRetainCount.h,path) ? _gthis.loadedAudioRetainCount.h[path] : 0;
				_gthis.loadedAudioRetainCount.h[path] = retain + 1;
			}
			done(resource);
		}];
		var fullPath = clay_Clay.app.assets.fullPath(cleanedPath);
		var doFail = function() {
			var callbacks = _gthis.loadingAudioCallbacks.h[path];
			var _this = _gthis.loadingAudioCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(null);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app.onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		};
		clay_Clay.app.audio.loadData(fullPath,isStream,null,function(audioData) {
			if(audioData == null) {
				doFail();
				return;
			}
			var resource = new clay_audio_AudioSource(clay_Clay.app,audioData);
			_gthis.loadedAudioResources.h[path] = resource;
			var callbacks = _gthis.loadingAudioCallbacks.h[path];
			var _this = _gthis.loadingAudioCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				callback(resource);
			}
		});
		ceramic_App.app.onceImmediate(function() {
			clay_Immediate.flush();
		});
	}
	,getDuration: function(resource) {
		return resource.getDuration();
	}
	,resumeAudioContext: function(done) {
		var webAudio = clay_Clay.app.audio;
		if(webAudio != null) {
			try {
				var context = webAudio.context;
				context.resume().then(function() {
					done(true);
				},function() {
					done(false);
				});
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				ceramic_App.app.logger.error("Failed to resume audio context: " + Std.string(e),{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/Audio.hx", lineNumber : 143, className : "backend.Audio", methodName : "resumeAudioContext"});
			}
		}
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,destroy: function(audio) {
		var id = null;
		var h = this.loadedAudioResources.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var key1 = _g1_key;
			var val = _g1_value;
			if(val == audio) {
				id = key1;
			}
		}
		if(id == null) {
			ceramic_App.app.logger.error("Failed to destroy audio resource: " + Std.string(audio) + " because id could not be resolved",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/Audio.hx", lineNumber : 169, className : "backend.Audio", methodName : "destroy"});
		} else if(this.loadedAudioRetainCount.h[id] > 1) {
			this.loadedAudioRetainCount.h[id] -= 1;
		} else {
			var _this = this.loadedAudioResources;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			var _this = this.loadedAudioRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			audio.destroy();
		}
	}
	,mute: function(audio) {
		return -1;
	}
	,play: function(audio,volume,pan,pitch,position,loop) {
		if(loop == null) {
			loop = false;
		}
		if(position == null) {
			position = 0;
		}
		if(pitch == null) {
			pitch = 1;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 0.5;
		}
		if(!clay_Clay.app.audio.active) {
			return -1;
		}
		var audioResource = audio;
		var isStream = audioResource.data.isStream;
		if(isStream) {
			position = 0;
			pitch = 1;
			pan = 0;
		}
		var handle = null;
		if(loop) {
			handle = clay_Clay.app.audio.loop(audioResource,volume,false);
		} else {
			handle = clay_Clay.app.audio.play(audioResource,volume,false);
		}
		if(pan != 0) {
			clay_Clay.app.audio.pan(handle,pan);
		}
		if(pitch != 1) {
			clay_Clay.app.audio.pitch(handle,pitch);
		}
		if(position != 0) {
			clay_Clay.app.audio.position(handle,position);
		}
		return handle;
	}
	,pause: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return;
			}
		}
		if(this.loopingStreams.h.hasOwnProperty(handle)) {
			this.loopingStreams.h[handle] = false;
		}
		clay_Clay.app.audio.pause(handle);
	}
	,resume: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return;
			}
		}
		if(this.loopingStreams.h.hasOwnProperty(handle)) {
			this.loopingStreams.h[handle] = true;
		}
		clay_Clay.app.audio.unPause(handle);
	}
	,stop: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			var prevHandle = handle;
			handle = this.loopHandles.h[handle];
			this.loopHandles.remove(prevHandle);
		}
		this.loopingStreams.remove(handle);
		if(handle == null || handle == -1) {
			return;
		}
		clay_Clay.app.audio.stop(handle);
	}
	,getVolume: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return 0;
			}
		}
		return clay_Clay.app.audio.volumeOf(handle);
	}
	,setVolume: function(handle,volume) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
		}
		clay_Clay.app.audio.volume(handle,volume);
	}
	,getPan: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
		}
		return clay_Clay.app.audio.panOf(handle);
	}
	,setPan: function(handle,pan) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
		}
		clay_Clay.app.audio.pan(handle,pan);
	}
	,getPitch: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 1;
		}
		if(handle == null || handle == -1) {
			return 1;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return 1;
			}
		}
		return clay_Clay.app.audio.pitchOf(handle);
	}
	,setPitch: function(handle,pitch) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return;
			}
		}
		clay_Clay.app.audio.pitch(handle,pitch);
	}
	,getPosition: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return 0;
			}
		}
		return clay_Clay.app.audio.positionOf(handle);
	}
	,setPosition: function(handle,position) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(this.loopHandles.h.hasOwnProperty(handle)) {
			handle = this.loopHandles.h[handle];
			if(handle == null || handle == -1) {
				return;
			}
		}
		clay_Clay.app.audio.position(handle,position);
	}
	,__class__: backend_Audio
};
var backend_AudioHandle = {};
backend_AudioHandle.toString = function(this1) {
	return "AudioHandle(" + this1 + ")";
};
var spec_Backend = function() { };
$hxClasses["spec.Backend"] = spec_Backend;
spec_Backend.__name__ = "spec.Backend";
spec_Backend.__isInterface__ = true;
spec_Backend.prototype = {
	__class__: spec_Backend
};
var backend_Backend = function() {
	this.mobileInBackground = false;
	this.clipboard = new backend_Clipboard();
	this.textInput = new backend_TextInput();
	this.input = new backend_Input();
	this.http = new backend_Http();
	this.screen = new backend_Screen();
	this.shaders = new backend_Shaders();
	this.textures = new backend_Textures();
	this.binaries = new backend_Binaries();
	this.texts = new backend_Texts();
	this.draw = new backend_Draw();
	this.audio = new backend_Audio();
	this.info = new backend_Info();
	this.io = new backend_IO();
};
$hxClasses["backend.Backend"] = backend_Backend;
backend_Backend.__name__ = "backend.Backend";
backend_Backend.__interfaces__ = [spec_Backend,tracker_Events];
backend_Backend.prototype = {
	init: function(app) {
	}
	,emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReady[ii];
					++i;
				}
			}
			if(this.__cbOnceReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReady[ii];
					var unbind = this.__cbOnceOwnerUnbindReady[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReady = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleDelta);
	}
	,onceUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleDelta);
	}
	,offUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willEmitUpdate: function(delta) {
	}
	,didEmitUpdate: function(delta) {
	}
	,unbindEvents: function() {
		this.offReady();
		this.offUpdate();
	}
	,__class__: backend_Backend
};
var spec_Binaries = function() { };
$hxClasses["spec.Binaries"] = spec_Binaries;
spec_Binaries.__name__ = "spec.Binaries";
spec_Binaries.__isInterface__ = true;
spec_Binaries.prototype = {
	__class__: spec_Binaries
};
var backend_Binaries = function() {
	this.loadingBinaryCallbacks = new haxe_ds_StringMap();
};
$hxClasses["backend.Binaries"] = backend_Binaries;
backend_Binaries.__name__ = "backend.Binaries";
backend_Binaries.__interfaces__ = [spec_Binaries];
backend_Binaries.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var done = function(binary) {
			ceramic_App.app.onceImmediate(function() {
				_done(binary);
				_done = null;
			});
		};
		if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingBinaryCallbacks.h,path)) {
			this.loadingBinaryCallbacks.h[path].push(function(binary) {
				done(binary);
			});
			return;
		} else {
			this.loadingBinaryCallbacks.h[path] = [];
		}
		var cleanedPath = path;
		var questionMarkIndex = cleanedPath.indexOf("?");
		if(questionMarkIndex != -1) {
			cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
		}
		var fullPath = clay_Clay.app.assets.fullPath(cleanedPath);
		clay_Clay.app.io.loadData(fullPath,true,function(res) {
			if(res == null) {
				var callbacks = _gthis.loadingBinaryCallbacks.h[path];
				if(callbacks != null) {
					var _this = _gthis.loadingBinaryCallbacks;
					if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
						delete(_this.h[path]);
					}
					done(null);
					var _g = 0;
					while(_g < callbacks.length) {
						var callback = callbacks[_g];
						++_g;
						callback(null);
					}
				} else {
					done(null);
				}
				return;
			}
			var binary = new haxe_io_Bytes(new Uint8Array(res.buffer));
			var callbacks = _gthis.loadingBinaryCallbacks.h[path];
			if(callbacks != null) {
				var _this = _gthis.loadingBinaryCallbacks;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				done(binary);
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					callback(binary);
				}
			} else {
				done(binary);
			}
		});
		ceramic_App.app.onceImmediate(function() {
			clay_Immediate.flush();
		});
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,__class__: backend_Binaries
};
var clay_Events = function() { };
$hxClasses["clay.Events"] = clay_Events;
clay_Events.__name__ = "clay.Events";
clay_Events.prototype = {
	ready: function() {
	}
	,tick: function(delta) {
	}
	,freeze: function() {
	}
	,unfreeze: function() {
	}
	,keyDown: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,keyUp: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,text: function(text,start,length,type,timestamp,windowId) {
	}
	,mouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
	}
	,mouseDown: function(x,y,button,timestamp,windowId) {
	}
	,mouseUp: function(x,y,button,timestamp,windowId) {
	}
	,mouseWheel: function(x,y,timestamp,windowId) {
	}
	,touchDown: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchUp: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchMove: function(x,y,dx,dy,touchId,timestamp) {
	}
	,gamepadAxis: function(gamepad,axis,value,timestamp) {
	}
	,gamepadDown: function(gamepad,button,value,timestamp) {
	}
	,gamepadUp: function(gamepad,button,value,timestamp) {
	}
	,gamepadDevice: function(gamepad,name,type,timestamp) {
	}
	,windowEvent: function(type,timestamp,windowId,x,y) {
	}
	,appEvent: function(type) {
	}
	,audioEvent: function(event,handle) {
	}
	,__class__: clay_Events
};
var backend_ClayEvents = function(handleReady) {
	this.muteResizeEvent = false;
	this.gamepadAxisValues = new ceramic_IntMap();
	this.gamepadPressedValues = new haxe_ds_IntMap();
	this.gamepadButtonMapping = new haxe_ds_IntMap();
	this.gamepadAxisToButton = new haxe_ds_IntMap();
	this.removedGamepads = new haxe_ds_IntMap();
	this.activeGamepads = new haxe_ds_IntMap();
	this.mouseY = 0;
	this.mouseX = 0;
	this.mouseDownButtons = new haxe_ds_IntMap();
	this.touchIndexes = new haxe_ds_IntMap();
	this.touches = new haxe_ds_IntMap();
	this.lastHeight = -1;
	this.lastWidth = -1;
	this.lastDensity = -1;
	this.handleReady = handleReady;
	this.configureGamepadMapping();
};
$hxClasses["backend.ClayEvents"] = backend_ClayEvents;
backend_ClayEvents.__name__ = "backend.ClayEvents";
backend_ClayEvents.__super__ = clay_Events;
backend_ClayEvents.prototype = $extend(clay_Events.prototype,{
	configureGamepadMapping: function() {
	}
	,ready: function() {
		this.backend = ceramic_App.app.backend;
		this.lastDensity = clay_Clay.app.screenDensity;
		this.lastWidth = clay_Clay.app.screenWidth;
		this.lastHeight = clay_Clay.app.screenHeight;
		this.handleReady();
		this.backend.emitReady();
	}
	,tick: function(delta) {
		this.triggerResizeIfNeeded();
		this.backend.emitUpdate(delta);
	}
	,triggerResizeIfNeeded: function() {
		if(this.muteResizeEvent) {
			return;
		}
		var density = clay_Clay.app.screenDensity;
		var width = clay_Clay.app.screenWidth;
		var height = clay_Clay.app.screenHeight;
		if(this.lastDensity != density || this.lastWidth != width || this.lastHeight != height) {
			this.lastDensity = density;
			this.lastWidth = width;
			this.lastHeight = height;
			this.backend.screen.emitResize();
		}
	}
	,appEvent: function(type) {
		switch(type) {
		case 0:
			break;
		case 11:
			ceramic_App.app.emitTerminate();
			break;
		case 12:
			ceramic_App.app.emitLowMemory();
			break;
		case 13:
			ceramic_App.app.emitBeginEnterBackground();
			break;
		case 14:
			ceramic_App.app.emitFinishEnterBackground();
			break;
		case 15:
			ceramic_App.app.emitBeginEnterForeground();
			break;
		case 16:
			ceramic_App.app.emitFinishEnterForeground();
			break;
		}
	}
	,mouseDown: function(x,y,button,timestamp,windowId) {
		if(this.mouseDownButtons.h.hasOwnProperty(button | 0)) {
			this.mouseUp(x,y,button,timestamp,windowId);
		}
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.mouseDownButtons.h[button | 0] = true;
		this.backend.screen.emitMouseDown(button,this.mouseX,this.mouseY);
	}
	,mouseUp: function(x,y,button,timestamp,windowId) {
		if(!this.mouseDownButtons.h.hasOwnProperty(button | 0)) {
			return;
		}
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.mouseDownButtons.remove(button | 0);
		this.backend.screen.emitMouseUp(button,this.mouseX,this.mouseY);
	}
	,mouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.backend.screen.emitMouseMove(this.mouseX,this.mouseY);
	}
	,mouseWheel: function(x,y,timestamp,windowId) {
		this.backend.screen.emitMouseWheel(x,y);
	}
	,touchDown: function(x,y,dx,dy,touchId,timestamp) {
		var index = 0;
		while(this.touchIndexes.h.hasOwnProperty(index | 0)) ++index;
		this.touches.h[touchId | 0] = index;
		this.touchIndexes.h[index | 0] = touchId;
		this.backend.screen.emitTouchDown(index,x * this.lastWidth,y * this.lastHeight);
	}
	,touchUp: function(x,y,dx,dy,touchId,timestamp) {
		if(!this.touches.h.hasOwnProperty(touchId | 0)) {
			this.touchDown(x,y,dx,dy,touchId,timestamp);
		}
		var value = this.touches.h[touchId | 0];
		var index = value != null ? value : 0;
		this.backend.screen.emitTouchUp(index,x * this.lastWidth,y * this.lastHeight);
		var tmp = this.touches.remove(touchId | 0);
		var tmp = this.touchIndexes.remove(index | 0);
	}
	,touchMove: function(x,y,dx,dy,touchId,timestamp) {
		if(!this.touches.h.hasOwnProperty(touchId | 0)) {
			this.touchDown(x,y,dx,dy,touchId,timestamp);
		}
		var value = this.touches.h[touchId | 0];
		var index = value != null ? value : 0;
		this.backend.screen.emitTouchMove(index,x * this.lastWidth,y * this.lastHeight);
	}
	,keyDown: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.backend.input.emitKeyDown(new ceramic_Key(keyCode,scanCode));
		if(this.backend.textInput.inputActive) {
			this.backend.textInput.handleKeyDown(keyCode,scanCode);
		}
	}
	,keyUp: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.backend.input.emitKeyUp(new ceramic_Key(keyCode,scanCode));
		if(this.backend.textInput.inputActive) {
			this.backend.textInput.handleKeyUp(keyCode,scanCode);
		}
	}
	,gamepadAxis: function(id,axisId,value,timestamp) {
		if(!this.activeGamepads.h.hasOwnProperty(id | 0) && !this.removedGamepads.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.h[id | 0] = true;
			var name = null;
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadAxisToButton.h.hasOwnProperty(axisId | 0)) {
			var value1 = this.gamepadAxisToButton.h[axisId | 0];
			var buttonId = value1 != null ? value1 : 0;
			var pressed = value >= 0.5;
			if(pressed) {
				var value1 = this.gamepadPressedValues.h[id * 32 + buttonId | 0];
				if((value1 != null ? value1 : 0) != 1) {
					this.gamepadPressedValues.h[id * 32 + buttonId | 0] = 1;
					this.backend.input.emitGamepadDown(id,buttonId);
				}
			} else {
				var value1 = this.gamepadPressedValues.h[id * 32 + buttonId | 0];
				if((value1 != null ? value1 : 0) == 1) {
					this.gamepadPressedValues.h[id * 32 + buttonId | 0] = 0;
					this.backend.input.emitGamepadUp(id,buttonId);
				}
			}
		} else {
			var prevValue = this.gamepadAxisValues.get(id * 32 + axisId);
			var newValue = Math.round(value * 100.0) / 100.0;
			if(Math.abs(prevValue - newValue) > 0.01) {
				this.gamepadAxisValues.set(id * 32 + axisId,newValue);
				this.backend.input.emitGamepadAxis(id,axisId,newValue);
			}
		}
	}
	,gamepadDown: function(id,buttonId,value,timestamp) {
		if(!this.activeGamepads.h.hasOwnProperty(id | 0) && !this.removedGamepads.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.h[id | 0] = true;
			var _g = 0;
			while(_g < 32) {
				var i = _g++;
				this.gamepadPressedValues.h[id * 32 + i | 0] = 0;
			}
			var name = null;
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadButtonMapping.h.hasOwnProperty(buttonId | 0)) {
			var value = this.gamepadButtonMapping.h[buttonId | 0];
			buttonId = value != null ? value : 0;
		}
		var value = this.gamepadPressedValues.h[id * 32 + buttonId | 0];
		if((value != null ? value : 0) != 1) {
			this.gamepadPressedValues.h[id * 32 + buttonId | 0] = 1;
			this.backend.input.emitGamepadDown(id,buttonId);
		}
	}
	,gamepadUp: function(id,buttonId,value,timestamp) {
		if(!this.activeGamepads.h.hasOwnProperty(id | 0) && !this.removedGamepads.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.h[id | 0] = true;
			var _g = 0;
			while(_g < 32) {
				var i = _g++;
				this.gamepadPressedValues.h[id * 32 + i | 0] = 0;
			}
			var name = null;
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadButtonMapping.h.hasOwnProperty(buttonId | 0)) {
			var value = this.gamepadButtonMapping.h[buttonId | 0];
			buttonId = value != null ? value : 0;
		}
		var value = this.gamepadPressedValues.h[id * 32 + buttonId | 0];
		if((value != null ? value : 0) == 1) {
			this.gamepadPressedValues.h[id * 32 + buttonId | 0] = 0;
			this.backend.input.emitGamepadUp(id,buttonId);
		}
	}
	,gamepadDevice: function(id,name,type,timestamp) {
		var _gthis = this;
		if(type == 2) {
			if(this.activeGamepads.h.hasOwnProperty(id | 0)) {
				var _g = 0;
				while(_g < 32) {
					var i = _g++;
					var value = this.gamepadPressedValues.h[id * 32 + i | 0];
					if((value != null ? value : 0) == 1) {
						this.backend.input.emitGamepadUp(id,i);
						this.gamepadPressedValues.h[id * 32 + i | 0] = 0;
					}
				}
				this.backend.input.emitGamepadDisable(id);
				this.activeGamepads.remove(id | 0);
				this.removedGamepads.h[id | 0] = true;
				ceramic_App.app.onceUpdate(null,function(_) {
					_gthis.removedGamepads.remove(id | 0);
				});
			}
		} else if(type == 1) {
			if(!this.activeGamepads.h.hasOwnProperty(id | 0)) {
				this.activeGamepads.h[id | 0] = true;
				var _g = 0;
				while(_g < 32) {
					var i = _g++;
					this.gamepadPressedValues.h[id * 32 + i | 0] = 0;
				}
				this.removedGamepads.remove(id | 0);
				var name = null;
				this.backend.input.emitGamepadEnable(id,name);
			}
		}
	}
	,text: function(text,start,length,type,timestamp,windowId) {
		if(this.backend.textInput.inputActive) {
			this.backend.textInput.handleTextInput(text);
		}
	}
	,windowEvent: function(type,timestamp,windowId,x,y) {
		switch(type) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		case 13:
			break;
		case 14:
			break;
		case 15:
			ceramic_App.app.settings.set_fullscreen(true);
			break;
		case 16:
			ceramic_App.app.settings.set_fullscreen(false);
			break;
		}
	}
	,__class__: backend_ClayEvents
});
var spec_Clipboard = function() { };
$hxClasses["spec.Clipboard"] = spec_Clipboard;
spec_Clipboard.__name__ = "spec.Clipboard";
spec_Clipboard.__isInterface__ = true;
spec_Clipboard.prototype = {
	__class__: spec_Clipboard
};
var backend_Clipboard = function() {
	this.clipboardText = null;
};
$hxClasses["backend.Clipboard"] = backend_Clipboard;
backend_Clipboard.__name__ = "backend.Clipboard";
backend_Clipboard.__interfaces__ = [spec_Clipboard];
backend_Clipboard.prototype = {
	getText: function() {
		return this.clipboardText;
	}
	,setText: function(text) {
		this.clipboardText = text;
	}
	,__class__: backend_Clipboard
};
var spec_Draw = function() { };
$hxClasses["spec.Draw"] = spec_Draw;
spec_Draw.__name__ = "spec.Draw";
spec_Draw.__isInterface__ = true;
spec_Draw.prototype = {
	__class__: spec_Draw
};
var backend_Draw = function() {
	this.renderer = new ceramic_Renderer();
	this.renderer = new ceramic_Renderer();
};
$hxClasses["backend.Draw"] = backend_Draw;
backend_Draw.__name__ = "backend.Draw";
backend_Draw.__interfaces__ = [spec_Draw];
backend_Draw.prototype = {
	begin: function() {
	}
	,end: function() {
	}
	,draw: function(visuals) {
		this.renderer.render(true,visuals);
	}
	,swap: function() {
	}
	,initBuffers: function() {
		backend_Draw._activeTextureSlot = 0;
		backend_Draw._buffersIndex = -1;
		this.prepareNextBuffers();
	}
	,prepareNextBuffers: function() {
		backend_Draw._buffersIndex++;
		if(backend_Draw._buffersIndex > 64) {
			backend_Draw._buffersIndex = 0;
		}
		if(backend_Draw._posListArray.length <= backend_Draw._buffersIndex) {
			var this1 = new Float32Array(65536);
			backend_Draw._posListArray[backend_Draw._buffersIndex] = this1;
			var this1 = new Float32Array(43691);
			backend_Draw._uvListArray[backend_Draw._buffersIndex] = this1;
			var this1 = new Float32Array(65536);
			backend_Draw._colorListArray[backend_Draw._buffersIndex] = this1;
			var this1 = new Uint16Array(32768);
			backend_Draw._indiceListArray[backend_Draw._buffersIndex] = this1;
		}
		backend_Draw._posList = backend_Draw._posListArray[backend_Draw._buffersIndex];
		backend_Draw._uvList = backend_Draw._uvListArray[backend_Draw._buffersIndex];
		backend_Draw._colorList = backend_Draw._colorListArray[backend_Draw._buffersIndex];
		backend_Draw._indiceList = backend_Draw._indiceListArray[backend_Draw._buffersIndex];
	}
	,beginRender: function() {
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
	}
	,clear: function() {
		clay_opengl_web_GL.gl.clearColor((backend_Draw._whiteTransparentColor >> 16 & 255) / 255,(backend_Draw._whiteTransparentColor >> 8 & 255) / 255,(backend_Draw._whiteTransparentColor & 255) / 255,backend_Draw._whiteTransparentColor >> 24 & 255);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
	}
	,clearAndApplyBackground: function() {
		var background = ceramic_App.app.settings.get_background();
		clay_opengl_web_GL.gl.clearColor((background >> 16 & 255) / 255,(background >> 8 & 255) / 255,(background & 255) / 255,1);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
	}
	,enableBlending: function() {
		clay_opengl_web_GL.gl.enable(3042);
	}
	,disableBlending: function() {
		clay_opengl_web_GL.gl.disable(3042);
	}
	,setActiveTexture: function(slot) {
		backend_Draw._activeTextureSlot = slot;
		if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
			clay_opengl_GLGraphics._activeTextureSlot = slot;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
			clay_opengl_web_GL.gl.activeTexture(33984 + slot);
		}
	}
	,setRenderWireframe: function(value) {
	}
	,getActiveTexture: function() {
		return backend_Draw._activeTextureSlot;
	}
	,setRenderTarget: function(renderTarget,force) {
		if(force == null) {
			force = false;
		}
		if(backend_Draw._currentRenderTarget != renderTarget || force) {
			backend_Draw._currentRenderTarget = renderTarget;
			if(renderTarget != null) {
				var renderTexture = renderTarget.backendItem;
				var renderTarget1 = renderTexture.renderTarget;
				if(renderTarget1 != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = renderTarget.width;
				var bottom = renderTarget.height;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var _this = backend_Draw._renderTargetTransform;
				_this.a = 1;
				_this.b = 0;
				_this.c = 0;
				_this.d = 1;
				_this.tx = 0;
				_this.ty = 0;
				_this.changedDirty = true;
				var _this = backend_Draw._renderTargetTransform;
				var x = renderTarget.density;
				var y = renderTarget.density;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
				var density = renderTarget.density;
				var width = renderTarget.width;
				var height = renderTarget.height;
				var transform = backend_Draw._renderTargetTransform;
				var flipY = -1;
				if(flipY == null) {
					flipY = 1;
				}
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				if(flipY == -1) {
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -width * 0.5;
					_this.ty += -height * 0.5;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= 1;
					_this.b *= -1;
					_this.c *= 1;
					_this.d *= -1;
					_this.tx *= 1;
					_this.ty *= -1;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += width * 0.5;
					_this.ty += height * 0.5;
					_this.changedDirty = true;
				}
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
				if(renderTarget.clearOnRender) {
					clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
				}
			} else {
				var renderTarget = null;
				if(renderTarget != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = clay_Clay.app.screenWidth;
				var bottom = clay_Clay.app.screenHeight;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var density = clay_Clay.app.screenDensity;
				var width = clay_Clay.app.screenWidth;
				var height = clay_Clay.app.screenHeight;
				var transform = ceramic_App.app.screen.matrix;
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
			}
		}
	}
	,useShader: function(shader) {
		backend_Draw._activeShader = shader;
		shader.uniforms.setMatrix4("projectionMatrix",backend_Draw._projectionMatrix);
		shader.uniforms.setMatrix4("modelViewMatrix",backend_Draw._modelViewMatrix);
		var shadersBackend = ceramic_App.app.backend.shaders;
		var customFloatAttributesSize = 0;
		var allAttrs = backend_Draw._activeShader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		backend_Draw._floatAttributesSize = customFloatAttributesSize;
		backend_Draw._batchMultiTexture = shadersBackend.canBatchWithMultipleTextures(backend_Draw._activeShader);
		backend_Draw._vertexSize = 3 + backend_Draw._floatAttributesSize + (backend_Draw._batchMultiTexture ? 1 : 0);
		backend_Draw._posSize = backend_Draw._vertexSize;
		if(backend_Draw._vertexSize < 4) {
			backend_Draw._vertexSize = 4;
		}
		backend_Draw._maxVerts = Math.floor(65536 / backend_Draw._vertexSize) | 0;
		shader.activate();
		if(backend_Draw._numPos == 0) {
			backend_Draw._numIndices = 0;
			backend_Draw._numPos = 0;
			backend_Draw._numUVs = 0;
			backend_Draw._numColors = 0;
			backend_Draw._posIndex = 0;
			backend_Draw._uvIndex = 0;
			backend_Draw._colorIndex = 0;
		}
	}
	,resetIndexes: function() {
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
	}
	,setBlendFuncSeparate: function(srcRgb,dstRgb,srcAlpha,dstAlpha) {
		clay_opengl_web_GL.gl.blendFuncSeparate(srcRgb,dstRgb,srcAlpha,dstAlpha);
	}
	,beginDrawQuad: function(quad) {
	}
	,endDrawQuad: function() {
	}
	,beginDrawMesh: function(mesh) {
	}
	,endDrawMesh: function() {
	}
	,drawWithStencilTest: function() {
		clay_opengl_web_GL.gl.stencilFunc(514,1,255);
		clay_opengl_web_GL.gl.stencilMask(0);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.enable(2960);
	}
	,drawWithoutStencilTest: function() {
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.disable(2960);
	}
	,beginDrawingInStencilBuffer: function() {
		backend_Draw._drawingInStencilBuffer = true;
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.clearStencil(255);
		clay_opengl_web_GL.gl.clear(1024);
		clay_opengl_web_GL.gl.enable(2960);
		clay_opengl_web_GL.gl.stencilOp(7680,7680,7681);
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(false,false,false,false);
	}
	,endDrawingInStencilBuffer: function() {
		backend_Draw._drawingInStencilBuffer = false;
	}
	,bindTexture: function(backendItem) {
		var textureId = backendItem.textureId;
		if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
			clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
			clay_opengl_web_GL.gl.bindTexture(3553,textureId);
		}
	}
	,bindNoTexture: function() {
		var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
		var textureId = backendItem.textureId;
		if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
			clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
			clay_opengl_web_GL.gl.bindTexture(3553,textureId);
		}
	}
	,textureBackendItemMatchesId: function(backendItem,textureId) {
		return backendItem.textureId == textureId;
	}
	,getTextureId: function(backendItem) {
		return backendItem.textureId;
	}
	,getTextureWidth: function(backendItem) {
		return backendItem.width;
	}
	,getTextureHeight: function(backendItem) {
		return backendItem.height;
	}
	,getTextureWidthActual: function(backendItem) {
		return backendItem.widthActual;
	}
	,getTextureHeightActual: function(backendItem) {
		return backendItem.heightActual;
	}
	,updateProjectionMatrix: function(width,height) {
		var left = 0.0;
		var top = 0.0;
		var right = width;
		var bottom = height;
		var near = 1000.0;
		var far = -1000.0;
		var w = right - left;
		var h = top - bottom;
		var p = far - near;
		var tx = (right + left) / w;
		var ty = (top + bottom) / h;
		var tz = (far + near) / p;
		var m = backend_Draw._projectionMatrix;
		m[0] = 2 / w;
		m[4] = 0;
		m[8] = 0;
		m[12] = -tx;
		m[1] = 0;
		m[5] = 2 / h;
		m[9] = 0;
		m[13] = -ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = -2 / p;
		m[14] = -tz;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,updateViewMatrix: function(density,width,height,transform,flipY) {
		if(flipY == null) {
			flipY = 1;
		}
		if(transform != null) {
			var _this = backend_Draw._modelViewTransform;
			_this.a = transform.a;
			_this.b = transform.b;
			_this.c = transform.c;
			_this.d = transform.d;
			_this.tx = transform.tx;
			_this.ty = transform.ty;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
		} else {
			var _this = backend_Draw._modelViewTransform;
			_this.a = 1;
			_this.b = 0;
			_this.c = 0;
			_this.d = 1;
			_this.tx = 0;
			_this.ty = 0;
			_this.changedDirty = true;
		}
		var tx = backend_Draw._modelViewTransform.tx;
		var ty = backend_Draw._modelViewTransform.ty;
		var _this = backend_Draw._modelViewTransform;
		_this.tx += -tx;
		_this.ty += -ty;
		_this.changedDirty = true;
		var _this = backend_Draw._modelViewTransform;
		_this.a *= density;
		_this.b *= density;
		_this.c *= density;
		_this.d *= density;
		_this.tx *= density;
		_this.ty *= density;
		_this.changedDirty = true;
		var _this = backend_Draw._modelViewTransform;
		_this.tx += tx;
		_this.ty += ty;
		_this.changedDirty = true;
		if(flipY == -1) {
			var _this = backend_Draw._modelViewTransform;
			_this.tx += -width * 0.5;
			_this.ty += -height * 0.5;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			_this.a *= 1;
			_this.b *= -1;
			_this.c *= 1;
			_this.d *= -1;
			_this.tx *= 1;
			_this.ty *= -1;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			_this.tx += width * 0.5;
			_this.ty += height * 0.5;
			_this.changedDirty = true;
		}
		var _this = backend_Draw._modelViewTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		var m = backend_Draw._modelViewMatrix;
		var transform = backend_Draw._modelViewTransform;
		m[0] = transform.a;
		m[4] = transform.c;
		m[8] = 0;
		m[12] = transform.tx;
		m[1] = transform.b;
		m[5] = transform.d;
		m[9] = 0;
		m[13] = transform.ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,matrixIdentity: function(m) {
		m[0] = 1;
		m[4] = 0;
		m[8] = 0;
		m[12] = 0;
		m[1] = 0;
		m[5] = 1;
		m[9] = 0;
		m[13] = 0;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,setMatrixToTransform: function(m,transform) {
		m[0] = transform.a;
		m[4] = transform.c;
		m[8] = 0;
		m[12] = transform.tx;
		m[1] = transform.b;
		m[5] = transform.d;
		m[9] = 0;
		m[13] = transform.ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,getNumPos: function() {
		return backend_Draw._numPos;
	}
	,putPos: function(x,y,z) {
		backend_Draw._posList[backend_Draw._posIndex] = x;
		backend_Draw._posList[backend_Draw._posIndex + 1] = y;
		backend_Draw._posList[backend_Draw._posIndex + 2] = z;
		backend_Draw._posIndex += 3;
		backend_Draw._numPos++;
	}
	,putPosAndTextureSlot: function(x,y,z,textureSlot) {
		backend_Draw._posList[backend_Draw._posIndex] = x;
		backend_Draw._posList[backend_Draw._posIndex + 1] = y;
		backend_Draw._posList[backend_Draw._posIndex + 2] = z;
		backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
		backend_Draw._posIndex += 4;
		backend_Draw._numPos++;
	}
	,beginFloatAttributes: function() {
	}
	,putFloatAttribute: function(index,value) {
		backend_Draw._posList[backend_Draw._posIndex + index] = value;
	}
	,endFloatAttributes: function() {
		backend_Draw._posIndex += backend_Draw._floatAttributesSize;
	}
	,putIndice: function(i) {
		backend_Draw._indiceList[backend_Draw._numIndices] = i;
		backend_Draw._numIndices++;
	}
	,putUVs: function(uvX,uvY) {
		backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
		backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
		backend_Draw._uvIndex += 2;
		backend_Draw._numUVs++;
	}
	,putColor: function(r,g,b,a) {
		backend_Draw._colorList[backend_Draw._colorIndex] = r;
		backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
		backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
		backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
		backend_Draw._colorIndex += 4;
		backend_Draw._numColors++;
	}
	,hasAnythingToFlush: function() {
		return backend_Draw._numPos > 0;
	}
	,shouldFlush: function(numVerticesAfter,numIndicesAfter,customFloatAttributesSize) {
		if(backend_Draw._numPos + numVerticesAfter <= backend_Draw._maxVerts) {
			return backend_Draw._numIndices + numIndicesAfter > 16384;
		} else {
			return true;
		}
	}
	,remainingVertices: function() {
		return backend_Draw._maxVerts - backend_Draw._numPos;
	}
	,remainingIndices: function() {
		return 16384 - backend_Draw._numIndices;
	}
	,flush: function() {
		var batchMultiTexture = backend_Draw._batchMultiTexture;
		var pos = new Float32Array(backend_Draw._posList.buffer,0,backend_Draw._posIndex * 4 / 4 | 0);
		var uvs = new Float32Array(backend_Draw._uvList.buffer,0,backend_Draw._uvIndex * 4 / 4 | 0);
		var colors = new Float32Array(backend_Draw._colorList.buffer,0,backend_Draw._colorIndex * 4 / 4 | 0);
		var indices = new Uint16Array(backend_Draw._indiceList.buffer,0,backend_Draw._numIndices * 2 / 2 | 0);
		var pb = clay_opengl_web_GL.gl.createBuffer();
		var cb = clay_opengl_web_GL.gl.createBuffer();
		var tb = clay_opengl_web_GL.gl.createBuffer();
		var ib = clay_opengl_web_GL.gl.createBuffer();
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		clay_opengl_web_GL.gl.bindBuffer(34962,pb);
		clay_opengl_web_GL.gl.vertexAttribPointer(0,3,5126,false,backend_Draw._posSize * 4,0);
		clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,tb);
		clay_opengl_web_GL.gl.vertexAttribPointer(1,2,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,uvs,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,cb);
		clay_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,colors,35040);
		var offset = 3;
		var n = 3;
		var customGLBuffersLen = 0;
		if(batchMultiTexture) {
			var b = clay_opengl_web_GL.gl.createBuffer();
			backend_Draw._customGLBuffers[customGLBuffersLen++] = b;
			clay_opengl_web_GL.gl.enableVertexAttribArray(n);
			clay_opengl_web_GL.gl.bindBuffer(34962,b);
			clay_opengl_web_GL.gl.vertexAttribPointer(n,1,5126,false,backend_Draw._posSize * 4,offset * 4);
			clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
			++n;
			++offset;
		}
		if(backend_Draw._activeShader != null && backend_Draw._activeShader.customAttributes != null) {
			var allAttrs = backend_Draw._activeShader.customAttributes;
			var start = customGLBuffersLen;
			var end = start + allAttrs.length;
			customGLBuffersLen += allAttrs.length;
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var ii = _g++;
				var attrIndex = ii - start;
				var attr = allAttrs[attrIndex];
				var b = clay_opengl_web_GL.gl.createBuffer();
				backend_Draw._customGLBuffers[ii] = b;
				clay_opengl_web_GL.gl.enableVertexAttribArray(n);
				clay_opengl_web_GL.gl.bindBuffer(34962,b);
				clay_opengl_web_GL.gl.vertexAttribPointer(n,attr.size,5126,false,backend_Draw._posSize * 4,offset * 4);
				clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
				++n;
				offset += attr.size;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,ib);
		clay_opengl_web_GL.gl.bufferData(34963,indices,35040);
		clay_opengl_web_GL.gl.drawElements(4,backend_Draw._numIndices,5123,0);
		clay_opengl_web_GL.gl.deleteBuffer(pb);
		clay_opengl_web_GL.gl.deleteBuffer(cb);
		clay_opengl_web_GL.gl.deleteBuffer(tb);
		if(customGLBuffersLen > 0) {
			var n = 3;
			var _g = 0;
			var _g1 = customGLBuffersLen;
			while(_g < _g1) {
				var ii = _g++;
				var b = backend_Draw._customGLBuffers[ii];
				clay_opengl_web_GL.gl.deleteBuffer(b);
				clay_opengl_web_GL.gl.disableVertexAttribArray(n);
				++n;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,null);
		clay_opengl_web_GL.gl.deleteBuffer(ib);
		pos = null;
		uvs = null;
		colors = null;
		indices = null;
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
		this.prepareNextBuffers();
	}
	,__class__: backend_Draw
};
var backend_ElectronRunner = function() { };
$hxClasses["backend.ElectronRunner"] = backend_ElectronRunner;
backend_ElectronRunner.__name__ = "backend.ElectronRunner";
var spec_Http = function() { };
$hxClasses["spec.Http"] = spec_Http;
spec_Http.__name__ = "spec.Http";
spec_Http.__isInterface__ = true;
spec_Http.prototype = {
	__class__: spec_Http
};
var backend_Http = function() {
};
$hxClasses["backend.Http"] = backend_Http;
backend_Http.__name__ = "backend.Http";
backend_Http.__interfaces__ = [spec_Http];
backend_Http.prototype = {
	request: function(options,requestDone) {
		var done = null;
		done = function(response) {
			ceramic_App.app.onceUpdate(null,function(_) {
				requestDone(response);
				requestDone = null;
				done = null;
			});
		};
		var contentType = "application/x-www-form-urlencoded";
		var httpHeaders;
		if(options.headers != null) {
			httpHeaders = new haxe_ds_StringMap();
			var h = options.headers.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(key.toLowerCase() == "content-type") {
					contentType = options.headers.h[key];
				} else {
					httpHeaders.h[key] = options.headers.h[key];
				}
			}
		} else {
			httpHeaders = null;
		}
		var content = null;
		if(options.content != null) {
			content = options.content;
		}
		var xhr = new XMLHttpRequest();
		if(options.timeout != null && options.timeout > 0) {
			xhr.timeout = options.timeout * 1000;
			ceramic_Timer.schedule(null,options.timeout + 1.0,function() {
				if(done == null) {
					return;
				}
				xhr.abort();
			},-1);
		}
		xhr.open(options.method != null ? options.method : "GET",options.url,true);
		if(httpHeaders != null) {
			var h = httpHeaders.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				xhr.setRequestHeader(key,httpHeaders.h[key]);
			}
		}
		if(content != null) {
			xhr.setRequestHeader("Content-Type",contentType);
		}
		var handleTimeout = function() {
			if(done == null) {
				return;
			}
			var headers = new haxe_ds_StringMap();
			var response = new backend_HttpResponse(408,null,null,null,headers);
			var _done = done;
			done = null;
			_done(response);
		};
		xhr.onabort = handleTimeout;
		xhr.ontimeout = handleTimeout;
		xhr.onload = function() {
			if(done == null) {
				return;
			}
			var rawHeaders = xhr.getAllResponseHeaders();
			var headers = new haxe_ds_StringMap();
			if(rawHeaders != null) {
				var _g = 0;
				var _g1 = rawHeaders.split("\n");
				while(_g < _g1.length) {
					var rawHeader = _g1[_g];
					++_g;
					if(StringTools.trim(rawHeader) == "") {
						continue;
					}
					var colonIndex = rawHeader.indexOf(":");
					if(colonIndex != -1) {
						var key = StringTools.trim(rawHeader.substring(0,colonIndex));
						var value = StringTools.trim(rawHeader.substring(colonIndex + 1));
						headers.h[key] = value;
					} else {
						ceramic_App.app.logger.warning("Failed to parse header: " + rawHeader,{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/http/runtime/src/backend/Http.hx", lineNumber : 290, className : "backend.Http", methodName : "request"});
					}
				}
			}
			var response = new backend_HttpResponse(xhr.status,xhr.responseText,null,null,headers);
			var _done = done;
			done = null;
			_done(response);
		};
		xhr.onerror = function() {
			if(done == null) {
				return;
			}
			var rawHeaders = xhr.getAllResponseHeaders();
			var headers = new haxe_ds_StringMap();
			if(rawHeaders != null) {
				var _g = 0;
				var _g1 = rawHeaders.split("\n");
				while(_g < _g1.length) {
					var rawHeader = _g1[_g];
					++_g;
					if(StringTools.trim(rawHeader) == "") {
						continue;
					}
					var colonIndex = rawHeader.indexOf(":");
					if(colonIndex != -1) {
						var key = StringTools.trim(rawHeader.substring(0,colonIndex));
						var value = StringTools.trim(rawHeader.substring(colonIndex + 1));
						headers.h[key] = value;
					} else {
						ceramic_App.app.logger.warning("Failed to parse header: " + rawHeader,{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/http/runtime/src/backend/Http.hx", lineNumber : 323, className : "backend.Http", methodName : "request"});
					}
				}
			}
			var response = new backend_HttpResponse(xhr.status,null,null,xhr.statusText,headers);
			var _done = done;
			done = null;
			_done(response);
		};
		xhr.send(content);
	}
	,download: function(url,targetPath,done) {
		if(!ceramic_Path.isAbsolute(targetPath)) {
			var basePath = null;
			if(basePath == null) {
				ceramic_App.app.logger.warning("Cannot download " + url + " at path " + targetPath + " because there is no storage directory",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/http/runtime/src/backend/Http.hx", lineNumber : 545, className : "backend.Http", methodName : "download"});
				done(null);
				return;
			}
			targetPath = ceramic_Path.join([basePath,targetPath]);
		}
		var tmpTargetPath = targetPath + ".tmpdl";
		ceramic_App.app.logger.error("Cannot download " + url + " at path " + targetPath + " because download is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/http/runtime/src/backend/Http.hx", lineNumber : 650, className : "backend.Http", methodName : "download"});
		done(null);
	}
	,__class__: backend_Http
};
var backend_HttpResponse = function(status,content,binaryContent,error,headers) {
	this.error = null;
	this.binaryContent = null;
	this.status = status;
	this.content = content;
	if(binaryContent != null) {
		this.binaryContent = binaryContent;
	}
	if(error != null) {
		this.error = error;
	}
	this.headers = headers;
};
$hxClasses["backend.HttpResponse"] = backend_HttpResponse;
backend_HttpResponse.__name__ = "backend.HttpResponse";
backend_HttpResponse.prototype = {
	toString: function() {
		return "" + Std.string({ status : this.status, content : this.content, binaryContent : this.binaryContent != null ? this.binaryContent.length : null, headers : this.headers, error : this.error});
	}
	,__class__: backend_HttpResponse
};
var spec_IO = function() { };
$hxClasses["spec.IO"] = spec_IO;
spec_IO.__name__ = "spec.IO";
spec_IO.__isInterface__ = true;
spec_IO.prototype = {
	__class__: spec_IO
};
var backend_IO = function() {
};
$hxClasses["backend.IO"] = backend_IO;
backend_IO.__name__ = "backend.IO";
backend_IO.__interfaces__ = [spec_IO];
backend_IO.prototype = {
	saveString: function(key,str) {
		var storage = window.localStorage;
		if(storage == null) {
			ceramic_App.app.logger.error("Cannot save string: localStorage not supported on this browser",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 190, className : "backend.IO", methodName : "saveString"});
			return false;
		}
		try {
			storage.setItem(key,ceramic_HashedString.encode(str));
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to save string (key=" + key + "): " + Std.string(e),{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 198, className : "backend.IO", methodName : "saveString"});
			return false;
		}
		return true;
	}
	,appendString: function(key,str) {
		var storage = window.localStorage;
		if(storage == null) {
			ceramic_App.app.logger.error("Cannot append string: localStorage not supported on this browser",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 210, className : "backend.IO", methodName : "appendString"});
			return false;
		}
		try {
			var existing = storage.getItem(key);
			if(existing == null) {
				storage.setItem(key,ceramic_HashedString.encode(str));
			} else {
				storage.setItem(key,existing + ceramic_HashedString.encode(str));
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to append string (key=" + key + "): " + Std.string(e),{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 224, className : "backend.IO", methodName : "appendString"});
			return false;
		}
		return true;
	}
	,readString: function(key) {
		var storage = window.localStorage;
		if(storage == null) {
			ceramic_App.app.logger.error("Cannot read string: localStorage not supported on this browser",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 236, className : "backend.IO", methodName : "readString"});
			return null;
		}
		try {
			var str = storage.getItem(key);
			if(str != null) {
				return ceramic_HashedString.decode(str);
			} else {
				return null;
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to read string (key=" + key + "): " + Std.string(e),{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/IO.hx", lineNumber : 245, className : "backend.IO", methodName : "readString"});
			return null;
		}
	}
	,__class__: backend_IO
};
var spec_Info = function() { };
$hxClasses["spec.Info"] = spec_Info;
spec_Info.__name__ = "spec.Info";
spec_Info.__isInterface__ = true;
spec_Info.prototype = {
	__class__: spec_Info
};
var backend_Info = function() {
};
$hxClasses["backend.Info"] = backend_Info;
backend_Info.__name__ = "backend.Info";
backend_Info.__interfaces__ = [spec_Info];
backend_Info.prototype = {
	storageDirectory: function() {
		return null;
	}
	,imageExtensions: function() {
		return ["png","jpg","jpeg"];
	}
	,textExtensions: function() {
		return ["txt","json","fnt"];
	}
	,soundExtensions: function() {
		return ["ogg","wav"];
	}
	,shaderExtensions: function() {
		return ["frag","vert"];
	}
	,__class__: backend_Info
};
var spec_Input = function() { };
$hxClasses["spec.Input"] = spec_Input;
spec_Input.__name__ = "spec.Input";
spec_Input.__isInterface__ = true;
var backend_Input = function() {
};
$hxClasses["backend.Input"] = backend_Input;
backend_Input.__name__ = "backend.Input";
backend_Input.__interfaces__ = [spec_Input,tracker_Events];
backend_Input.prototype = {
	emitKeyDown: function(key) {
		var len = 0;
		if(this.__cbOnKeyDown != null) {
			len += this.__cbOnKeyDown.length;
		}
		if(this.__cbOnceKeyDown != null) {
			len += this.__cbOnceKeyDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnKeyDown[ii];
					++i;
				}
			}
			if(this.__cbOnceKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceKeyDown[ii];
					var unbind = this.__cbOnceOwnerUnbindKeyDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceKeyDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnKeyDown == null) {
			this.__cbOnKeyDown = [];
		}
		this.__cbOnKeyDown.push(handleKey);
	}
	,onceKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnceKeyDown == null) {
			this.__cbOnceKeyDown = [];
		}
		this.__cbOnceKeyDown.push(handleKey);
	}
	,offKeyDown: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyDown != null) {
				index = this.__cbOnKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyDown.splice(index,1);
				}
			}
			if(this.__cbOnceKeyDown != null) {
				index = this.__cbOnceKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyDown = null;
			}
			if(this.__cbOnceOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = null;
			}
			this.__cbOnKeyDown = null;
			this.__cbOnceKeyDown = null;
		}
	}
	,listensKeyDown: function() {
		if(!(this.__cbOnKeyDown != null && this.__cbOnKeyDown.length > 0)) {
			if(this.__cbOnceKeyDown != null) {
				return this.__cbOnceKeyDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitKeyUp: function(key) {
		var len = 0;
		if(this.__cbOnKeyUp != null) {
			len += this.__cbOnKeyUp.length;
		}
		if(this.__cbOnceKeyUp != null) {
			len += this.__cbOnceKeyUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnKeyUp[ii];
					++i;
				}
			}
			if(this.__cbOnceKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceKeyUp[ii];
					var unbind = this.__cbOnceOwnerUnbindKeyUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceKeyUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnKeyUp == null) {
			this.__cbOnKeyUp = [];
		}
		this.__cbOnKeyUp.push(handleKey);
	}
	,onceKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnceKeyUp == null) {
			this.__cbOnceKeyUp = [];
		}
		this.__cbOnceKeyUp.push(handleKey);
	}
	,offKeyUp: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyUp != null) {
				index = this.__cbOnKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyUp.splice(index,1);
				}
			}
			if(this.__cbOnceKeyUp != null) {
				index = this.__cbOnceKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyUp = null;
			}
			if(this.__cbOnceOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = null;
			}
			this.__cbOnKeyUp = null;
			this.__cbOnceKeyUp = null;
		}
	}
	,listensKeyUp: function() {
		if(!(this.__cbOnKeyUp != null && this.__cbOnKeyUp.length > 0)) {
			if(this.__cbOnceKeyUp != null) {
				return this.__cbOnceKeyUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadAxis: function(gamepadId,axisId,value) {
		var len = 0;
		if(this.__cbOnGamepadAxis != null) {
			len += this.__cbOnGamepadAxis.length;
		}
		if(this.__cbOnceGamepadAxis != null) {
			len += this.__cbOnceGamepadAxis.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadAxis[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadAxis[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadAxis = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,axisId,value);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadAxis: function(owner,handleGamepadIdAxisIdValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisIdValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisIdValue);
					handleGamepadIdAxisIdValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisIdValue = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnGamepadAxis == null) {
			this.__cbOnGamepadAxis = [];
		}
		this.__cbOnGamepadAxis.push(handleGamepadIdAxisIdValue);
	}
	,onceGamepadAxis: function(owner,handleGamepadIdAxisIdValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisIdValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisIdValue);
					handleGamepadIdAxisIdValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisIdValue = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnceGamepadAxis == null) {
			this.__cbOnceGamepadAxis = [];
		}
		this.__cbOnceGamepadAxis.push(handleGamepadIdAxisIdValue);
	}
	,offGamepadAxis: function(handleGamepadIdAxisIdValue) {
		if(handleGamepadIdAxisIdValue != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadAxis != null) {
				index = this.__cbOnGamepadAxis.indexOf(handleGamepadIdAxisIdValue);
				if(index != -1) {
					this.__cbOnGamepadAxis.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				index = this.__cbOnceGamepadAxis.indexOf(handleGamepadIdAxisIdValue);
				if(index != -1) {
					this.__cbOnceGamepadAxis.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadAxis = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = null;
			}
			this.__cbOnGamepadAxis = null;
			this.__cbOnceGamepadAxis = null;
		}
	}
	,listensGamepadAxis: function() {
		if(!(this.__cbOnGamepadAxis != null && this.__cbOnGamepadAxis.length > 0)) {
			if(this.__cbOnceGamepadAxis != null) {
				return this.__cbOnceGamepadAxis.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadDown: function(gamepadId,buttonId) {
		var len = 0;
		if(this.__cbOnGamepadDown != null) {
			len += this.__cbOnGamepadDown.length;
		}
		if(this.__cbOnceGamepadDown != null) {
			len += this.__cbOnceGamepadDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadDown[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadDown[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,buttonId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDown: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadDown(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnGamepadDown == null) {
			this.__cbOnGamepadDown = [];
		}
		this.__cbOnGamepadDown.push(handleGamepadIdButtonId);
	}
	,onceGamepadDown: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadDown(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnceGamepadDown == null) {
			this.__cbOnceGamepadDown = [];
		}
		this.__cbOnceGamepadDown.push(handleGamepadIdButtonId);
	}
	,offGamepadDown: function(handleGamepadIdButtonId) {
		if(handleGamepadIdButtonId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDown != null) {
				index = this.__cbOnGamepadDown.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnGamepadDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDown.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				index = this.__cbOnceGamepadDown.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnceGamepadDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDown = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = null;
			}
			this.__cbOnGamepadDown = null;
			this.__cbOnceGamepadDown = null;
		}
	}
	,listensGamepadDown: function() {
		if(!(this.__cbOnGamepadDown != null && this.__cbOnGamepadDown.length > 0)) {
			if(this.__cbOnceGamepadDown != null) {
				return this.__cbOnceGamepadDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadUp: function(gamepadId,buttonId) {
		var len = 0;
		if(this.__cbOnGamepadUp != null) {
			len += this.__cbOnGamepadUp.length;
		}
		if(this.__cbOnceGamepadUp != null) {
			len += this.__cbOnceGamepadUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadUp[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadUp[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,buttonId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadUp: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadUp(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnGamepadUp == null) {
			this.__cbOnGamepadUp = [];
		}
		this.__cbOnGamepadUp.push(handleGamepadIdButtonId);
	}
	,onceGamepadUp: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadUp(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnceGamepadUp == null) {
			this.__cbOnceGamepadUp = [];
		}
		this.__cbOnceGamepadUp.push(handleGamepadIdButtonId);
	}
	,offGamepadUp: function(handleGamepadIdButtonId) {
		if(handleGamepadIdButtonId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadUp != null) {
				index = this.__cbOnGamepadUp.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnGamepadUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadUp.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				index = this.__cbOnceGamepadUp.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnceGamepadUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadUp = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = null;
			}
			this.__cbOnGamepadUp = null;
			this.__cbOnceGamepadUp = null;
		}
	}
	,listensGamepadUp: function() {
		if(!(this.__cbOnGamepadUp != null && this.__cbOnGamepadUp.length > 0)) {
			if(this.__cbOnceGamepadUp != null) {
				return this.__cbOnceGamepadUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadEnable: function(gamepadId,name) {
		var len = 0;
		if(this.__cbOnGamepadEnable != null) {
			len += this.__cbOnGamepadEnable.length;
		}
		if(this.__cbOnceGamepadEnable != null) {
			len += this.__cbOnceGamepadEnable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadEnable[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadEnable[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadEnable = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnGamepadEnable == null) {
			this.__cbOnGamepadEnable = [];
		}
		this.__cbOnGamepadEnable.push(handleGamepadIdName);
	}
	,onceGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnceGamepadEnable == null) {
			this.__cbOnceGamepadEnable = [];
		}
		this.__cbOnceGamepadEnable.push(handleGamepadIdName);
	}
	,offGamepadEnable: function(handleGamepadIdName) {
		if(handleGamepadIdName != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadEnable != null) {
				index = this.__cbOnGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnGamepadEnable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				index = this.__cbOnceGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnceGamepadEnable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadEnable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = null;
			}
			this.__cbOnGamepadEnable = null;
			this.__cbOnceGamepadEnable = null;
		}
	}
	,listensGamepadEnable: function() {
		if(!(this.__cbOnGamepadEnable != null && this.__cbOnGamepadEnable.length > 0)) {
			if(this.__cbOnceGamepadEnable != null) {
				return this.__cbOnceGamepadEnable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadDisable: function(gamepadId) {
		var len = 0;
		if(this.__cbOnGamepadDisable != null) {
			len += this.__cbOnGamepadDisable.length;
		}
		if(this.__cbOnceGamepadDisable != null) {
			len += this.__cbOnceGamepadDisable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadDisable[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadDisable[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadDisable = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnGamepadDisable == null) {
			this.__cbOnGamepadDisable = [];
		}
		this.__cbOnGamepadDisable.push(handleGamepadId);
	}
	,onceGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnceGamepadDisable == null) {
			this.__cbOnceGamepadDisable = [];
		}
		this.__cbOnceGamepadDisable.push(handleGamepadId);
	}
	,offGamepadDisable: function(handleGamepadId) {
		if(handleGamepadId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDisable != null) {
				index = this.__cbOnGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnGamepadDisable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				index = this.__cbOnceGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnceGamepadDisable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDisable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = null;
			}
			this.__cbOnGamepadDisable = null;
			this.__cbOnceGamepadDisable = null;
		}
	}
	,listensGamepadDisable: function() {
		if(!(this.__cbOnGamepadDisable != null && this.__cbOnGamepadDisable.length > 0)) {
			if(this.__cbOnceGamepadDisable != null) {
				return this.__cbOnceGamepadDisable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,unbindEvents: function() {
		this.offKeyDown();
		this.offKeyUp();
		this.offGamepadAxis();
		this.offGamepadDown();
		this.offGamepadUp();
		this.offGamepadEnable();
		this.offGamepadDisable();
	}
	,__class__: backend_Input
};
var spec_Screen = function() { };
$hxClasses["spec.Screen"] = spec_Screen;
spec_Screen.__name__ = "spec.Screen";
spec_Screen.__isInterface__ = true;
spec_Screen.prototype = {
	__class__: spec_Screen
};
var backend_Screen = function() {
};
$hxClasses["backend.Screen"] = backend_Screen;
backend_Screen.__name__ = "backend.Screen";
backend_Screen.__interfaces__ = [spec_Screen,tracker_Events];
backend_Screen.prototype = {
	emitResize: function() {
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnResize[ii];
					++i;
				}
			}
			if(this.__cbOnceResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceResize[ii];
					var unbind = this.__cbOnceOwnerUnbindResize[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceResize = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handle);
	}
	,onceResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handle);
	}
	,offResize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseDown: function(buttonId,x,y) {
		var len = 0;
		if(this.__cbOnMouseDown != null) {
			len += this.__cbOnMouseDown.length;
		}
		if(this.__cbOnceMouseDown != null) {
			len += this.__cbOnceMouseDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseDown[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseDown[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnMouseDown == null) {
			this.__cbOnMouseDown = [];
		}
		this.__cbOnMouseDown.push(handleButtonIdXY);
	}
	,onceMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnceMouseDown == null) {
			this.__cbOnceMouseDown = [];
		}
		this.__cbOnceMouseDown.push(handleButtonIdXY);
	}
	,offMouseDown: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseDown != null) {
				index = this.__cbOnMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseDown.splice(index,1);
				}
			}
			if(this.__cbOnceMouseDown != null) {
				index = this.__cbOnceMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseDown = null;
			}
			if(this.__cbOnceOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = null;
			}
			this.__cbOnMouseDown = null;
			this.__cbOnceMouseDown = null;
		}
	}
	,listensMouseDown: function() {
		if(!(this.__cbOnMouseDown != null && this.__cbOnMouseDown.length > 0)) {
			if(this.__cbOnceMouseDown != null) {
				return this.__cbOnceMouseDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseUp: function(buttonId,x,y) {
		var len = 0;
		if(this.__cbOnMouseUp != null) {
			len += this.__cbOnMouseUp.length;
		}
		if(this.__cbOnceMouseUp != null) {
			len += this.__cbOnceMouseUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseUp[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseUp[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnMouseUp == null) {
			this.__cbOnMouseUp = [];
		}
		this.__cbOnMouseUp.push(handleButtonIdXY);
	}
	,onceMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnceMouseUp == null) {
			this.__cbOnceMouseUp = [];
		}
		this.__cbOnceMouseUp.push(handleButtonIdXY);
	}
	,offMouseUp: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseUp != null) {
				index = this.__cbOnMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseUp.splice(index,1);
				}
			}
			if(this.__cbOnceMouseUp != null) {
				index = this.__cbOnceMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseUp = null;
			}
			if(this.__cbOnceOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = null;
			}
			this.__cbOnMouseUp = null;
			this.__cbOnceMouseUp = null;
		}
	}
	,listensMouseUp: function() {
		if(!(this.__cbOnMouseUp != null && this.__cbOnMouseUp.length > 0)) {
			if(this.__cbOnceMouseUp != null) {
				return this.__cbOnceMouseUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseWheel: function(x,y) {
		var len = 0;
		if(this.__cbOnMouseWheel != null) {
			len += this.__cbOnMouseWheel.length;
		}
		if(this.__cbOnceMouseWheel != null) {
			len += this.__cbOnceMouseWheel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseWheel[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseWheel[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseWheel = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnMouseWheel == null) {
			this.__cbOnMouseWheel = [];
		}
		this.__cbOnMouseWheel.push(handleXY);
	}
	,onceMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnceMouseWheel == null) {
			this.__cbOnceMouseWheel = [];
		}
		this.__cbOnceMouseWheel.push(handleXY);
	}
	,offMouseWheel: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseWheel != null) {
				index = this.__cbOnMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseWheel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseWheel.splice(index,1);
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				index = this.__cbOnceMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseWheel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseWheel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseWheel = null;
			}
			if(this.__cbOnceOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = null;
			}
			this.__cbOnMouseWheel = null;
			this.__cbOnceMouseWheel = null;
		}
	}
	,listensMouseWheel: function() {
		if(!(this.__cbOnMouseWheel != null && this.__cbOnMouseWheel.length > 0)) {
			if(this.__cbOnceMouseWheel != null) {
				return this.__cbOnceMouseWheel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseMove: function(x,y) {
		var len = 0;
		if(this.__cbOnMouseMove != null) {
			len += this.__cbOnMouseMove.length;
		}
		if(this.__cbOnceMouseMove != null) {
			len += this.__cbOnceMouseMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseMove[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseMove[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnMouseMove == null) {
			this.__cbOnMouseMove = [];
		}
		this.__cbOnMouseMove.push(handleXY);
	}
	,onceMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnceMouseMove == null) {
			this.__cbOnceMouseMove = [];
		}
		this.__cbOnceMouseMove.push(handleXY);
	}
	,offMouseMove: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseMove != null) {
				index = this.__cbOnMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseMove.splice(index,1);
				}
			}
			if(this.__cbOnceMouseMove != null) {
				index = this.__cbOnceMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseMove = null;
			}
			if(this.__cbOnceOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = null;
			}
			this.__cbOnMouseMove = null;
			this.__cbOnceMouseMove = null;
		}
	}
	,listensMouseMove: function() {
		if(!(this.__cbOnMouseMove != null && this.__cbOnMouseMove.length > 0)) {
			if(this.__cbOnceMouseMove != null) {
				return this.__cbOnceMouseMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchDown: function(touchIndex,x,y) {
		var len = 0;
		if(this.__cbOnTouchDown != null) {
			len += this.__cbOnTouchDown.length;
		}
		if(this.__cbOnceTouchDown != null) {
			len += this.__cbOnceTouchDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchDown[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchDown[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnTouchDown == null) {
			this.__cbOnTouchDown = [];
		}
		this.__cbOnTouchDown.push(handleTouchIndexXY);
	}
	,onceTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnceTouchDown == null) {
			this.__cbOnceTouchDown = [];
		}
		this.__cbOnceTouchDown.push(handleTouchIndexXY);
	}
	,offTouchDown: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchDown != null) {
				index = this.__cbOnTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchDown.splice(index,1);
				}
			}
			if(this.__cbOnceTouchDown != null) {
				index = this.__cbOnceTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchDown = null;
			}
			if(this.__cbOnceOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = null;
			}
			this.__cbOnTouchDown = null;
			this.__cbOnceTouchDown = null;
		}
	}
	,listensTouchDown: function() {
		if(!(this.__cbOnTouchDown != null && this.__cbOnTouchDown.length > 0)) {
			if(this.__cbOnceTouchDown != null) {
				return this.__cbOnceTouchDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchUp: function(touchIndex,x,y) {
		var len = 0;
		if(this.__cbOnTouchUp != null) {
			len += this.__cbOnTouchUp.length;
		}
		if(this.__cbOnceTouchUp != null) {
			len += this.__cbOnceTouchUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchUp[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchUp[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnTouchUp == null) {
			this.__cbOnTouchUp = [];
		}
		this.__cbOnTouchUp.push(handleTouchIndexXY);
	}
	,onceTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnceTouchUp == null) {
			this.__cbOnceTouchUp = [];
		}
		this.__cbOnceTouchUp.push(handleTouchIndexXY);
	}
	,offTouchUp: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchUp != null) {
				index = this.__cbOnTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchUp.splice(index,1);
				}
			}
			if(this.__cbOnceTouchUp != null) {
				index = this.__cbOnceTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchUp = null;
			}
			if(this.__cbOnceOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = null;
			}
			this.__cbOnTouchUp = null;
			this.__cbOnceTouchUp = null;
		}
	}
	,listensTouchUp: function() {
		if(!(this.__cbOnTouchUp != null && this.__cbOnTouchUp.length > 0)) {
			if(this.__cbOnceTouchUp != null) {
				return this.__cbOnceTouchUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchMove: function(touchIndex,x,y) {
		var len = 0;
		if(this.__cbOnTouchMove != null) {
			len += this.__cbOnTouchMove.length;
		}
		if(this.__cbOnceTouchMove != null) {
			len += this.__cbOnceTouchMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchMove[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchMove[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnTouchMove == null) {
			this.__cbOnTouchMove = [];
		}
		this.__cbOnTouchMove.push(handleTouchIndexXY);
	}
	,onceTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnceTouchMove == null) {
			this.__cbOnceTouchMove = [];
		}
		this.__cbOnceTouchMove.push(handleTouchIndexXY);
	}
	,offTouchMove: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchMove != null) {
				index = this.__cbOnTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchMove.splice(index,1);
				}
			}
			if(this.__cbOnceTouchMove != null) {
				index = this.__cbOnceTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchMove = null;
			}
			if(this.__cbOnceOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = null;
			}
			this.__cbOnTouchMove = null;
			this.__cbOnceTouchMove = null;
		}
	}
	,listensTouchMove: function() {
		if(!(this.__cbOnTouchMove != null && this.__cbOnTouchMove.length > 0)) {
			if(this.__cbOnceTouchMove != null) {
				return this.__cbOnceTouchMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getWidth: function() {
		return clay_Clay.app.screenWidth;
	}
	,getHeight: function() {
		return clay_Clay.app.screenHeight;
	}
	,getDensity: function() {
		return clay_Clay.app.screenDensity;
	}
	,setBackground: function(background) {
	}
	,setWindowTitle: function(title) {
		clay_Clay.app.runtime.setWindowTitle(title);
	}
	,setWindowFullscreen: function(fullscreen) {
		if(backend_ElectronRunner.electronRunner != null && backend_ElectronRunner.electronRunner.setFullscreen != null) {
			backend_ElectronRunner.electronRunner.setFullscreen(fullscreen);
			return;
		}
		if(!clay_Clay.app.runtime.setWindowFullscreen(fullscreen)) {
			ceramic_App.app.settings.set_fullscreen(!fullscreen);
		}
	}
	,unbindEvents: function() {
		this.offResize();
		this.offMouseDown();
		this.offMouseUp();
		this.offMouseWheel();
		this.offMouseMove();
		this.offTouchDown();
		this.offTouchUp();
		this.offTouchMove();
	}
	,__class__: backend_Screen
};
var clay_Resource = function() {
	this.id = null;
};
$hxClasses["clay.Resource"] = clay_Resource;
clay_Resource.__name__ = "clay.Resource";
clay_Resource.prototype = {
	__class__: clay_Resource
};
var clay_graphics_Shader = function() {
	this.gpuShader = null;
	this.uniforms = null;
	this.textures = null;
	this.attributes = null;
	this.fragSource = null;
	this.vertSource = null;
	clay_Resource.call(this);
};
$hxClasses["clay.graphics.Shader"] = clay_graphics_Shader;
clay_graphics_Shader.__name__ = "clay.graphics.Shader";
clay_graphics_Shader.__super__ = clay_Resource;
clay_graphics_Shader.prototype = $extend(clay_Resource.prototype,{
	init: function() {
		this.gpuShader = clay_opengl_GLGraphics.createShader(this.vertSource,this.fragSource,this.attributes,this.textures);
		if(this.gpuShader == null) {
			throw haxe_Exception.thrown("Failed to create shader (id=" + this.id + ")");
		}
		this.uniforms = new clay_graphics_Uniforms(this.gpuShader);
	}
	,activate: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		if(this.uniforms != null) {
			this.uniforms.apply();
		}
	}
	,destroy: function() {
		clay_opengl_GLGraphics.deleteShader(this.gpuShader);
	}
	,__class__: clay_graphics_Shader
});
var backend_ShaderImpl = function() {
	this.isBatchingMultiTexture = false;
	this.customAttributes = null;
	clay_graphics_Shader.call(this);
};
$hxClasses["backend.ShaderImpl"] = backend_ShaderImpl;
backend_ShaderImpl.__name__ = "backend.ShaderImpl";
backend_ShaderImpl.__super__ = clay_graphics_Shader;
backend_ShaderImpl.prototype = $extend(clay_graphics_Shader.prototype,{
	clone: function() {
		var shader = new backend_ShaderImpl();
		shader.vertSource = this.vertSource;
		shader.fragSource = this.fragSource;
		shader.customAttributes = this.customAttributes;
		shader.isBatchingMultiTexture = this.isBatchingMultiTexture;
		shader.attributes = this.attributes;
		shader.textures = this.textures;
		shader.init();
		return shader;
	}
	,__class__: backend_ShaderImpl
});
var spec_Shaders = function() { };
$hxClasses["spec.Shaders"] = spec_Shaders;
spec_Shaders.__name__ = "spec.Shaders";
spec_Shaders.__isInterface__ = true;
spec_Shaders.prototype = {
	__class__: spec_Shaders
};
var backend_Shaders = function() {
};
$hxClasses["backend.Shaders"] = backend_Shaders;
backend_Shaders.__name__ = "backend.Shaders";
backend_Shaders.__interfaces__ = [spec_Shaders];
backend_Shaders.processMultiTextureVertTemplate = function(vertSource,maxTextures,maxIfs) {
	var lines = vertSource.split("\n");
	var newLines = [];
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var line = lines[i];
		var cleanedLine = StringTools.replace(StringTools.trim(line)," ","").toLowerCase();
		if(cleanedLine == "//ceramic:multitexture/vertextextureid") {
			newLines.push("attribute float vertexTextureId;");
		} else if(cleanedLine == "//ceramic:multitexture/textureid") {
			newLines.push("varying float textureId;");
		} else if(cleanedLine == "//ceramic:multitexture/assigntextureid") {
			newLines.push("textureId = vertexTextureId;");
		} else {
			newLines.push(line);
		}
	}
	return newLines.join("\n");
};
backend_Shaders.processMultiTextureFragTemplate = function(fragSource,maxTextures,maxIfs) {
	var maxConditions = Math.min(maxTextures,maxIfs) | 0;
	var lines = fragSource.split("\n");
	var newLines = [];
	var nextLineIsTextureUniform = false;
	var inConditionBody = false;
	var conditionLines = [];
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var line = lines[i];
		var cleanedLine = StringTools.replace(StringTools.trim(line)," ","").toLowerCase();
		if(nextLineIsTextureUniform) {
			nextLineIsTextureUniform = false;
			var _g2 = 0;
			var _g3 = maxConditions;
			while(_g2 < _g3) {
				var n = _g2++;
				if(n == 0) {
					newLines.push(line);
				} else {
					newLines.push(StringTools.replace(line,"tex0","tex" + n));
				}
			}
		} else if(inConditionBody) {
			if(cleanedLine == "//ceramic:multitexture/endif") {
				inConditionBody = false;
				if(conditionLines.length > 0) {
					var _g4 = 0;
					var _g5 = maxConditions;
					while(_g4 < _g5) {
						var n1 = _g4++;
						if(n1 == 0) {
							newLines.push("if (textureId == 0.0) {");
						} else {
							newLines.push("else if (textureId == " + n1 + ".0) {");
						}
						var _g6 = 0;
						var _g7 = conditionLines.length;
						while(_g6 < _g7) {
							var l = _g6++;
							if(n1 == 0) {
								newLines.push(conditionLines[l]);
							} else {
								newLines.push(StringTools.replace(conditionLines[l],"tex0","tex" + n1));
							}
						}
						newLines.push("}");
					}
				}
			} else {
				conditionLines.push(line);
			}
		} else if(StringTools.startsWith(cleanedLine,"//ceramic:multitexture")) {
			if(cleanedLine == "//ceramic:multitexture/texture") {
				nextLineIsTextureUniform = true;
			} else if(cleanedLine == "//ceramic:multitexture/textureid") {
				newLines.push("varying float textureId;");
			} else if(cleanedLine == "//ceramic:multitexture/if") {
				inConditionBody = true;
			}
		} else {
			newLines.push(line);
		}
	}
	return newLines.join("\n");
};
backend_Shaders.computeMaxIfStatementsByFragmentShaderIfNeeded = function(maxIfs) {
	if(maxIfs == null) {
		maxIfs = 32;
	}
	if(backend_Shaders._maxIfStatementsByFragmentShader == -1) {
		var fragTpl = StringTools.trim("\n#ifdef GL_ES\nprecision mediump float;\n#else\n#define mediump\n#endif\nvarying float test;\nvoid main() {\n    {{CONDITIONS}}\n    gl_FragColor = vec4(0.0);\n}\n");
		var shader = clay_opengl_web_GL.gl.createShader(35632);
		while(maxIfs > 0) {
			var frag = StringTools.replace(fragTpl,"{{CONDITIONS}}",backend_Shaders.generateIfStatements(maxIfs));
			clay_opengl_web_GL.gl.shaderSource(shader,frag);
			clay_opengl_web_GL.gl.compileShader(shader);
			if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
				maxIfs = maxIfs / 2 | 0;
			} else {
				backend_Shaders._maxIfStatementsByFragmentShader = maxIfs;
				break;
			}
		}
		clay_opengl_web_GL.gl.deleteShader(shader);
	}
};
backend_Shaders.generateIfStatements = function(maxIfs) {
	var result_b = "";
	var _g = 0;
	var _g1 = maxIfs;
	while(_g < _g1) {
		var i = _g++;
		if(i > 0) {
			result_b += "\nelse ";
		}
		if(i < maxIfs - 1) {
			result_b += Std.string("if (test == " + i + ".0) {}");
		}
	}
	return result_b;
};
backend_Shaders.prototype = {
	fromSource: function(vertSource,fragSource,customAttributes) {
		var isMultiTextureTemplate = false;
		var _g = 0;
		var _g1 = fragSource.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
				isMultiTextureTemplate = true;
				break;
			}
		}
		var textures = ["tex0"];
		if(isMultiTextureTemplate) {
			var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
			var maxIfs = this.maxIfStatementsByFragmentShader();
			var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
			if(maxTexturesAndIfs > 1) {
				var i = 1;
				while(i <= maxTexturesAndIfs) {
					textures.push("tex" + i);
					++i;
				}
			}
			fragSource = backend_Shaders.processMultiTextureFragTemplate(fragSource,maxTextures,maxIfs);
			vertSource = backend_Shaders.processMultiTextureVertTemplate(vertSource,maxTextures,maxIfs);
		}
		var shader = new backend_ShaderImpl();
		shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
		shader.textures = textures;
		shader.vertSource = vertSource;
		shader.fragSource = fragSource;
		shader.isBatchingMultiTexture = isMultiTextureTemplate;
		shader.customAttributes = customAttributes;
		shader.init();
		return shader;
	}
	,destroy: function(shader) {
		shader.destroy();
	}
	,clone: function(shader) {
		return shader.clone();
	}
	,setInt: function(shader,name,value) {
		shader.uniforms.setInt(name,value);
	}
	,setFloat: function(shader,name,value) {
		shader.uniforms.setFloat(name,value);
	}
	,setColor: function(shader,name,r,g,b,a) {
		shader.uniforms.setColor(name,r,g,b,a);
	}
	,setVec2: function(shader,name,x,y) {
		shader.uniforms.setVector2(name,x,y);
	}
	,setVec3: function(shader,name,x,y,z) {
		shader.uniforms.setVector3(name,x,y,z);
	}
	,setVec4: function(shader,name,x,y,z,w) {
		shader.uniforms.setVector4(name,x,y,z,w);
	}
	,setFloatArray: function(shader,name,array) {
		shader.uniforms.setFloatArray(name,new Float32Array(array));
	}
	,setTexture: function(shader,name,slot,texture) {
		shader.uniforms.setTexture(name,slot,texture);
	}
	,setMat4FromTransform: function(shader,name,transform) {
		shader.uniforms.setMatrix4(name,new Float32Array([transform.a,transform.b,0,0,transform.c,transform.d,0,0,0,0,1,0,transform.tx,transform.ty,0,1]));
	}
	,customFloatAttributesSize: function(shader) {
		var customFloatAttributesSize = 0;
		var allAttrs = shader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		return customFloatAttributesSize;
	}
	,maxIfStatementsByFragmentShader: function() {
		var maxIfs = 32;
		if(backend_Shaders._maxIfStatementsByFragmentShader == -1) {
			var fragTpl = StringTools.trim("\n#ifdef GL_ES\nprecision mediump float;\n#else\n#define mediump\n#endif\nvarying float test;\nvoid main() {\n    {{CONDITIONS}}\n    gl_FragColor = vec4(0.0);\n}\n");
			var shader = clay_opengl_web_GL.gl.createShader(35632);
			while(maxIfs > 0) {
				var frag = StringTools.replace(fragTpl,"{{CONDITIONS}}",backend_Shaders.generateIfStatements(maxIfs));
				clay_opengl_web_GL.gl.shaderSource(shader,frag);
				clay_opengl_web_GL.gl.compileShader(shader);
				if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
					maxIfs = maxIfs / 2 | 0;
				} else {
					backend_Shaders._maxIfStatementsByFragmentShader = maxIfs;
					break;
				}
			}
			clay_opengl_web_GL.gl.deleteShader(shader);
		}
		return backend_Shaders._maxIfStatementsByFragmentShader;
	}
	,canBatchWithMultipleTextures: function(shader) {
		return shader.isBatchingMultiTexture;
	}
	,__class__: backend_Shaders
};
var spec_TextInput = function() { };
$hxClasses["spec.TextInput"] = spec_TextInput;
spec_TextInput.__name__ = "spec.TextInput";
spec_TextInput.__isInterface__ = true;
spec_TextInput.prototype = {
	__class__: spec_TextInput
};
var backend_TextInput = function() {
	this.inputRectH = 0;
	this.inputRectW = 0;
	this.inputRectY = 0;
	this.inputRectX = 0;
	this.inputActive = false;
};
$hxClasses["backend.TextInput"] = backend_TextInput;
backend_TextInput.__name__ = "backend.TextInput";
backend_TextInput.__interfaces__ = [spec_TextInput];
backend_TextInput.prototype = {
	start: function(initialText,x,y,w,h) {
		if(this.inputActive) {
			return;
		}
		this.inputRectX = x | 0;
		this.inputRectY = y | 0;
		this.inputRectW = Math.max(1,w) | 0;
		this.inputRectH = Math.max(1,h) | 0;
		this.inputActive = true;
	}
	,stop: function() {
		if(!this.inputActive) {
			return;
		}
		this.inputRectX = 0;
		this.inputRectY = 0;
		this.inputRectW = 0;
		this.inputRectH = 0;
		this.inputActive = false;
	}
	,handleTextInput: function(text) {
		if(text == " ") {
			return;
		}
		ceramic_App.app.textInput.appendText(text);
	}
	,handleKeyDown: function(keyCode,scanCode) {
		if(scanCode == 42) {
			ceramic_App.app.textInput.backspace();
		} else if(scanCode == 44) {
			ceramic_App.app.textInput.space();
		} else if(scanCode == 40) {
			ceramic_App.app.textInput.enter();
		} else if(scanCode == 41) {
			ceramic_App.app.textInput.escape();
		} else if(scanCode == 80) {
			ceramic_App.app.textInput.moveLeft();
		} else if(scanCode == 79) {
			ceramic_App.app.textInput.moveRight();
		} else if(scanCode == 82) {
			ceramic_App.app.textInput.moveUp();
		} else if(scanCode == 81) {
			ceramic_App.app.textInput.moveDown();
		} else if(scanCode == 225) {
			ceramic_App.app.textInput.lshiftDown();
		} else if(scanCode == 229) {
			ceramic_App.app.textInput.rshiftDown();
		}
	}
	,handleKeyUp: function(keyCode,scanCode) {
		if(scanCode == 225) {
			ceramic_App.app.textInput.lshiftUp();
		} else if(scanCode == 229) {
			ceramic_App.app.textInput.rshiftUp();
		}
	}
	,__class__: backend_TextInput
};
var spec_Texts = function() { };
$hxClasses["spec.Texts"] = spec_Texts;
spec_Texts.__name__ = "spec.Texts";
spec_Texts.__isInterface__ = true;
spec_Texts.prototype = {
	__class__: spec_Texts
};
var backend_Texts = function() {
	this.loadingTextCallbacks = new haxe_ds_StringMap();
};
$hxClasses["backend.Texts"] = backend_Texts;
backend_Texts.__name__ = "backend.Texts";
backend_Texts.__interfaces__ = [spec_Texts];
backend_Texts.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var done = function(text) {
			ceramic_App.app.onceImmediate(function() {
				_done(text);
				_done = null;
			});
		};
		if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingTextCallbacks.h,path)) {
			this.loadingTextCallbacks.h[path].push(function(text) {
				done(text);
			});
			return;
		} else {
			this.loadingTextCallbacks.h[path] = [];
		}
		var cleanedPath = path;
		var questionMarkIndex = cleanedPath.indexOf("?");
		if(questionMarkIndex != -1) {
			cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
		}
		var fullPath = clay_Clay.app.assets.fullPath(cleanedPath);
		clay_Clay.app.io.loadData(fullPath,true,function(res) {
			if(res == null) {
				var callbacks = _gthis.loadingTextCallbacks.h[path];
				if(callbacks != null) {
					var _this = _gthis.loadingTextCallbacks;
					if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
						delete(_this.h[path]);
					}
					done(null);
					var _g = 0;
					while(_g < callbacks.length) {
						var callback = callbacks[_g];
						++_g;
						callback(null);
					}
				} else {
					done(null);
				}
				return;
			}
			var text = new haxe_io_Bytes(new Uint8Array(res.buffer)).toString();
			var callbacks = _gthis.loadingTextCallbacks.h[path];
			if(callbacks != null) {
				var _this = _gthis.loadingTextCallbacks;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				done(text);
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					callback(text);
				}
			} else {
				done(text);
			}
		});
		ceramic_App.app.onceImmediate(function() {
			clay_Immediate.flush();
		});
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,__class__: backend_Texts
};
var backend_TextureId = {};
var spec_Textures = function() { };
$hxClasses["spec.Textures"] = spec_Textures;
spec_Textures.__name__ = "spec.Textures";
spec_Textures.__isInterface__ = true;
spec_Textures.prototype = {
	__class__: spec_Textures
};
var backend_Textures = function() {
	this.loadedTexturesRetainCount = new haxe_ds_StringMap();
	this.loadedTextures = new haxe_ds_StringMap();
	this.loadingTextureCallbacks = new haxe_ds_StringMap();
	this.nextPixelsIndex = 0;
	this.nextRenderIndex = 0;
};
$hxClasses["backend.Textures"] = backend_Textures;
backend_Textures.__name__ = "backend.Textures";
backend_Textures.__interfaces__ = [spec_Textures];
backend_Textures.computeMaxTexturesByBatchIfNeeded = function() {
	if(backend_Textures._maxTexturesByBatch == -1) {
		backend_Textures._maxTexturesByBatch = Math.min(32,clay_opengl_web_GL.gl.getParameter(34930)) | 0;
	}
};
backend_Textures.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var done = function(texture) {
			ceramic_App.app.onceImmediate(function() {
				_done(texture);
				_done = null;
			});
		};
		if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadedTextures.h,path)) {
			this.loadedTexturesRetainCount.h[path] += 1;
			var existing = this.loadedTextures.h[path];
			done(existing);
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingTextureCallbacks.h,path)) {
			this.loadingTextureCallbacks.h[path].push(function(texture) {
				if(texture != null) {
					var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedTexturesRetainCount.h,path) ? _gthis.loadedTexturesRetainCount.h[path] : 0;
					_gthis.loadedTexturesRetainCount.h[path] = retain + 1;
				}
				done(texture);
			});
			return;
		}
		var cleanedPath = path;
		var questionMarkIndex = cleanedPath.indexOf("?");
		if(questionMarkIndex != -1) {
			cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
		}
		this.loadingTextureCallbacks.h[path] = [function(texture) {
			if(texture != null) {
				var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedTexturesRetainCount.h,path) ? _gthis.loadedTexturesRetainCount.h[path] : 0;
				_gthis.loadedTexturesRetainCount.h[path] = retain + 1;
			}
			done(texture);
		}];
		var fullPath = clay_Clay.app.assets.fullPath(cleanedPath);
		var premultiplyAlpha = true;
		if(options != null && options.premultiplyAlpha != null) {
			premultiplyAlpha = options.premultiplyAlpha;
		}
		var doFail = function() {
			var callbacks = _gthis.loadingTextureCallbacks.h[path];
			var _this = _gthis.loadingTextureCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(null);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app.onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		};
		clay_Clay.app.assets.loadImage(fullPath,null,function(image) {
			if(image == null) {
				doFail();
				return;
			}
			var texture = null;
			texture = clay_graphics_Texture.fromImage(image,premultiplyAlpha);
			if(texture == null) {
				doFail();
				return;
			}
			texture.id = path;
			texture.init();
			_gthis.loadedTextures.h[path] = texture;
			var callbacks = _gthis.loadingTextureCallbacks.h[path];
			var _this = _gthis.loadingTextureCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(texture);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app.onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		});
		ceramic_App.app.onceImmediate(function() {
			clay_Immediate.flush();
		});
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,createTexture: function(width,height,pixels) {
		var id = "pixels:" + this.nextPixelsIndex++;
		var texture = new clay_graphics_Texture();
		texture.id = id;
		texture.width = width;
		texture.height = height;
		texture.pixels = pixels;
		texture.init();
		this.loadedTexturesRetainCount.h[id] = 1;
		return texture;
	}
	,createRenderTarget: function(width,height) {
		var id = "render:" + this.nextRenderIndex++;
		var renderTexture = new clay_graphics_RenderTexture();
		renderTexture.id = id;
		renderTexture.width = width;
		renderTexture.height = height;
		renderTexture.stencil = true;
		renderTexture.init();
		this.loadedTexturesRetainCount.h[id] = 1;
		return renderTexture;
	}
	,fetchTexturePixels: function(texture,result) {
		var w = texture.width;
		var h = texture.height;
		if(result == null) {
			var this1 = new Uint8Array(w * h * 4);
			result = this1;
		}
		texture.fetch(result);
		return result;
	}
	,submitTexturePixels: function(texture,pixels) {
		texture.submit(pixels);
	}
	,destroyTexture: function(texture) {
		var id = texture.id;
		if(this.loadedTexturesRetainCount.h[id] > 1) {
			this.loadedTexturesRetainCount.h[id] -= 1;
		} else {
			var _this = this.loadedTextures;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			var _this = this.loadedTexturesRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			texture.destroy();
		}
	}
	,getTextureId: function(texture) {
		return texture.textureId;
	}
	,getTextureWidth: function(texture) {
		return texture.width;
	}
	,getTextureHeight: function(texture) {
		return texture.height;
	}
	,getTextureWidthActual: function(texture) {
		return texture.widthActual;
	}
	,getTextureHeightActual: function(texture) {
		return texture.heightActual;
	}
	,getTextureIndex: function(texture) {
		return texture.index;
	}
	,setTextureFilter: function(texture,filter) {
		switch(filter._hx_index) {
		case 0:
			texture.set_filterMin(9729);
			texture.set_filterMag(9729);
			break;
		case 1:
			texture.set_filterMin(9728);
			texture.set_filterMag(9728);
			break;
		}
	}
	,maxTextureWidth: function() {
		return 2048;
	}
	,maxTextureHeight: function() {
		return 2048;
	}
	,maxTexturesByBatch: function() {
		if(backend_Textures._maxTexturesByBatch == -1) {
			backend_Textures._maxTexturesByBatch = Math.min(32,clay_opengl_web_GL.gl.getParameter(34930)) | 0;
		}
		return backend_Textures._maxTexturesByBatch;
	}
	,__class__: backend_Textures
};
var backend_VisualItem = $hxEnums["backend.VisualItem"] = { __ename__:"backend.VisualItem",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"backend.VisualItem",toString:$estr}
	,QUAD: {_hx_name:"QUAD",_hx_index:1,__enum__:"backend.VisualItem",toString:$estr}
	,MESH: {_hx_name:"MESH",_hx_index:2,__enum__:"backend.VisualItem",toString:$estr}
};
backend_VisualItem.__constructs__ = [backend_VisualItem.NONE,backend_VisualItem.QUAD,backend_VisualItem.MESH];
var ceramic_AlphaColor = {};
ceramic_AlphaColor.__properties__ = {set_rgb:"set_rgb",get_rgb:"get_rgb",set_color:"set_color",get_color:"get_color",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red"};
ceramic_AlphaColor._new = function(color,alpha) {
	if(alpha == null) {
		alpha = 255;
	}
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	var this1 = value;
	return this1;
};
ceramic_AlphaColor.get_color = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.set_color = function(this1,color) {
	var Value = color >> 16 & 255;
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = color >> 8 & 255;
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = color & 255;
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return color;
};
ceramic_AlphaColor.get_rgb = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.set_rgb = function(this1,color) {
	var Value = color >> 16 & 255;
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = color >> 8 & 255;
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = color & 255;
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return color;
};
ceramic_AlphaColor.get_red = function(this1) {
	return this1 >> 16 & 255;
};
ceramic_AlphaColor.get_green = function(this1) {
	return this1 >> 8 & 255;
};
ceramic_AlphaColor.get_blue = function(this1) {
	return this1 & 255;
};
ceramic_AlphaColor.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
ceramic_AlphaColor.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
ceramic_AlphaColor.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
ceramic_AlphaColor.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
ceramic_AlphaColor.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
ceramic_AlphaColor.set_red = function(this1,Value) {
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	return Value;
};
ceramic_AlphaColor.set_green = function(this1,Value) {
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	return Value;
};
ceramic_AlphaColor.set_blue = function(this1,Value) {
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return Value;
};
ceramic_AlphaColor.set_alpha = function(this1,Value) {
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return Value;
};
ceramic_AlphaColor.set_redFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	return Value;
};
ceramic_AlphaColor.set_greenFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	return Value;
};
ceramic_AlphaColor.set_blueFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return Value;
};
ceramic_AlphaColor.set_alphaFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
ceramic_AlphaColor.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
ceramic_AlphaColor.toHexString = function(this1,prefix) {
	if(prefix == null) {
		prefix = true;
	}
	return (prefix ? "0x" : "") + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
ceramic_AlphaColor.toString = function(this1) {
	return "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
var ceramic_App = function() {
	this.info = { editable : { item11 : "ceramic.Particles", item3 : "ceramic.Fragment", item10 : "ceramic.Line", item5 : "ceramic.Text", item7 : "ceramic.Shape", item2 : "ceramic.Layer", item6 : "ceramic.Mesh", item9 : "ceramic.Arc", item1 : "ceramic.Visual", item4 : "ceramic.Quad", item8 : "ceramic.Ngon", item0 : "ceramic.Entity"}, name : "myproject", collections : { }, version : "1.0", author : "My Company", displayName : "myproject"};
	this.disposedEntities = [];
	this.beginUpdateCallbacks = [];
	this.visualsContentDirty = false;
	this.hierarchyDirty = false;
	this.timelines = new ceramic_Timelines();
	this.converters = new haxe_ds_StringMap();
	this.textInput = null;
	this.persistent = null;
	this.projectDir = null;
	this.defaultFont = null;
	this.defaultWhiteTexture = null;
	this.defaultTexturedShader = null;
	this.assets = new ceramic_Assets();
	this.renderTextures = [];
	this.groups = [];
	this.destroyedVisuals = [];
	this.pendingVisuals = [];
	this.visuals = [];
	this.logger = new ceramic_Logger();
	this._computeFps = new ceramic_ComputeFps();
	this.shouldUpdateAndDrawAgain = false;
	this.inUpdate = false;
	this.loaders = [];
	this.postFlushImmediateCallbacksLen = 0;
	this.postFlushImmediateCallbacksCapacity = 0;
	this.postFlushImmediateCallbacks = [];
	this.immediateCallbacksLen = 0;
	this.immediateCallbacksCapacity = 0;
	this.immediateCallbacks = [];
	ceramic_Entity.call(this);
	ceramic_Runner.init();
	tracker_Tracker.backend = new ceramic_TrackerBackend();
	this.settings = new ceramic_Settings();
	this.screen = new ceramic_Screen();
	this.audio = new ceramic_Audio();
	this.input = new ceramic_Input();
	this.systems = new ceramic_Systems();
	this.backend = new backend_Backend();
	this.backend.onceReady(this,$bind(this,this.backendReady));
	this.backend.init(this);
};
$hxClasses["ceramic.App"] = ceramic_App;
ceramic_App.__name__ = "ceramic.App";
ceramic_App.__properties__ = {get_app:"get_app"};
ceramic_App.get_app = function() {
	return ceramic_App.app;
};
ceramic_App.oncePreInit = function(handle) {
	if(ceramic_App.preInitCallbacks == null) {
		ceramic_App.preInitCallbacks = [];
	}
	ceramic_App.preInitCallbacks.push(handle);
};
ceramic_App.init = function() {
	assets_AllAssets.bind();
	ceramic_App.app = new ceramic_App();
	var initSettings = new ceramic_InitSettings(ceramic_App.app.settings);
	return initSettings;
};
ceramic_App.__super__ = ceramic_Entity;
ceramic_App.prototype = $extend(ceramic_Entity.prototype,{
	emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReady[ii];
					++i;
				}
			}
			if(this.__cbOnceReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReady[ii];
					var unbind = this.__cbOnceOwnerUnbindReady[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReady = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleDelta);
	}
	,onceUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleDelta);
	}
	,offUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPreUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnPreUpdate != null) {
			len += this.__cbOnPreUpdate.length;
		}
		if(this.__cbOncePreUpdate != null) {
			len += this.__cbOncePreUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnPreUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPreUpdate[ii];
					++i;
				}
			}
			if(this.__cbOncePreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOncePreUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePreUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindPreUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePreUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPreUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPreUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPreUpdate == null) {
				this.__cbOnOwnerUnbindPreUpdate = [];
			}
			this.__cbOnOwnerUnbindPreUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPreUpdate == null) {
				this.__cbOnOwnerUnbindPreUpdate = [];
			}
			this.__cbOnOwnerUnbindPreUpdate.push(null);
		}
		if(this.__cbOnPreUpdate == null) {
			this.__cbOnPreUpdate = [];
		}
		this.__cbOnPreUpdate.push(handleDelta);
	}
	,oncePreUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPreUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPreUpdate == null) {
				this.__cbOnceOwnerUnbindPreUpdate = [];
			}
			this.__cbOnceOwnerUnbindPreUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPreUpdate == null) {
				this.__cbOnceOwnerUnbindPreUpdate = [];
			}
			this.__cbOnceOwnerUnbindPreUpdate.push(null);
		}
		if(this.__cbOncePreUpdate == null) {
			this.__cbOncePreUpdate = [];
		}
		this.__cbOncePreUpdate.push(handleDelta);
	}
	,offPreUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnPreUpdate != null) {
				index = this.__cbOnPreUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnPreUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPreUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPreUpdate.splice(index,1);
				}
			}
			if(this.__cbOncePreUpdate != null) {
				index = this.__cbOncePreUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOncePreUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPreUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPreUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPreUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPreUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPreUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPreUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPreUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPreUpdate = null;
			}
			this.__cbOnPreUpdate = null;
			this.__cbOncePreUpdate = null;
		}
	}
	,listensPreUpdate: function() {
		if(!(this.__cbOnPreUpdate != null && this.__cbOnPreUpdate.length > 0)) {
			if(this.__cbOncePreUpdate != null) {
				return this.__cbOncePreUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPostUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnPostUpdate != null) {
			len += this.__cbOnPostUpdate.length;
		}
		if(this.__cbOncePostUpdate != null) {
			len += this.__cbOncePostUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnPostUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPostUpdate[ii];
					++i;
				}
			}
			if(this.__cbOncePostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOncePostUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePostUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindPostUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePostUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPostUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "postUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPostUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPostUpdate == null) {
				this.__cbOnOwnerUnbindPostUpdate = [];
			}
			this.__cbOnOwnerUnbindPostUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPostUpdate == null) {
				this.__cbOnOwnerUnbindPostUpdate = [];
			}
			this.__cbOnOwnerUnbindPostUpdate.push(null);
		}
		if(this.__cbOnPostUpdate == null) {
			this.__cbOnPostUpdate = [];
		}
		this.__cbOnPostUpdate.push(handleDelta);
	}
	,oncePostUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "postUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPostUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPostUpdate == null) {
				this.__cbOnceOwnerUnbindPostUpdate = [];
			}
			this.__cbOnceOwnerUnbindPostUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPostUpdate == null) {
				this.__cbOnceOwnerUnbindPostUpdate = [];
			}
			this.__cbOnceOwnerUnbindPostUpdate.push(null);
		}
		if(this.__cbOncePostUpdate == null) {
			this.__cbOncePostUpdate = [];
		}
		this.__cbOncePostUpdate.push(handleDelta);
	}
	,offPostUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnPostUpdate != null) {
				index = this.__cbOnPostUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnPostUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPostUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPostUpdate.splice(index,1);
				}
			}
			if(this.__cbOncePostUpdate != null) {
				index = this.__cbOncePostUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOncePostUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPostUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPostUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPostUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPostUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPostUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPostUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPostUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPostUpdate = null;
			}
			this.__cbOnPostUpdate = null;
			this.__cbOncePostUpdate = null;
		}
	}
	,listensPostUpdate: function() {
		if(!(this.__cbOnPostUpdate != null && this.__cbOnPostUpdate.length > 0)) {
			if(this.__cbOncePostUpdate != null) {
				return this.__cbOncePostUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitDefaultAssetsLoad: function(assets) {
		var len = 0;
		if(this.__cbOnDefaultAssetsLoad != null) {
			len += this.__cbOnDefaultAssetsLoad.length;
		}
		if(this.__cbOnceDefaultAssetsLoad != null) {
			len += this.__cbOnceDefaultAssetsLoad.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnDefaultAssetsLoad.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDefaultAssetsLoad[ii];
					++i;
				}
			}
			if(this.__cbOnceDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDefaultAssetsLoad.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDefaultAssetsLoad[ii];
					var unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDefaultAssetsLoad = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(assets);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDefaultAssetsLoad: function(owner,handleAssets) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "defaultAssetsLoad" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAssets != null) {
					_gthis.offDefaultAssetsLoad(handleAssets);
					handleAssets = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnOwnerUnbindDefaultAssetsLoad.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAssets = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnOwnerUnbindDefaultAssetsLoad.push(null);
		}
		if(this.__cbOnDefaultAssetsLoad == null) {
			this.__cbOnDefaultAssetsLoad = [];
		}
		this.__cbOnDefaultAssetsLoad.push(handleAssets);
	}
	,onceDefaultAssetsLoad: function(owner,handleAssets) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "defaultAssetsLoad" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAssets != null) {
					_gthis.offDefaultAssetsLoad(handleAssets);
					handleAssets = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnceOwnerUnbindDefaultAssetsLoad.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAssets = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnceOwnerUnbindDefaultAssetsLoad.push(null);
		}
		if(this.__cbOnceDefaultAssetsLoad == null) {
			this.__cbOnceDefaultAssetsLoad = [];
		}
		this.__cbOnceDefaultAssetsLoad.push(handleAssets);
	}
	,offDefaultAssetsLoad: function(handleAssets) {
		if(handleAssets != null) {
			var index;
			var unbind;
			if(this.__cbOnDefaultAssetsLoad != null) {
				index = this.__cbOnDefaultAssetsLoad.indexOf(handleAssets);
				if(index != -1) {
					this.__cbOnDefaultAssetsLoad.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDefaultAssetsLoad[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDefaultAssetsLoad.splice(index,1);
				}
			}
			if(this.__cbOnceDefaultAssetsLoad != null) {
				index = this.__cbOnceDefaultAssetsLoad.indexOf(handleAssets);
				if(index != -1) {
					this.__cbOnceDefaultAssetsLoad.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDefaultAssetsLoad.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDefaultAssetsLoad.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDefaultAssetsLoad[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDefaultAssetsLoad = null;
			}
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDefaultAssetsLoad.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = null;
			}
			this.__cbOnDefaultAssetsLoad = null;
			this.__cbOnceDefaultAssetsLoad = null;
		}
	}
	,listensDefaultAssetsLoad: function() {
		if(!(this.__cbOnDefaultAssetsLoad != null && this.__cbOnDefaultAssetsLoad.length > 0)) {
			if(this.__cbOnceDefaultAssetsLoad != null) {
				return this.__cbOnceDefaultAssetsLoad.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitCriticalError: function(error,stack) {
		var len = 0;
		if(this.__cbOnCriticalError != null) {
			len += this.__cbOnCriticalError.length;
		}
		if(this.__cbOnceCriticalError != null) {
			len += this.__cbOnceCriticalError.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnCriticalError.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnCriticalError[ii];
					++i;
				}
			}
			if(this.__cbOnceCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceCriticalError.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceCriticalError[ii];
					var unbind = this.__cbOnceOwnerUnbindCriticalError[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceCriticalError = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(error,stack);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCriticalError: function(owner,handleErrorStack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "criticalError" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleErrorStack != null) {
					_gthis.offCriticalError(handleErrorStack);
					handleErrorStack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCriticalError == null) {
				this.__cbOnOwnerUnbindCriticalError = [];
			}
			this.__cbOnOwnerUnbindCriticalError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleErrorStack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCriticalError == null) {
				this.__cbOnOwnerUnbindCriticalError = [];
			}
			this.__cbOnOwnerUnbindCriticalError.push(null);
		}
		if(this.__cbOnCriticalError == null) {
			this.__cbOnCriticalError = [];
		}
		this.__cbOnCriticalError.push(handleErrorStack);
	}
	,onceCriticalError: function(owner,handleErrorStack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "criticalError" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleErrorStack != null) {
					_gthis.offCriticalError(handleErrorStack);
					handleErrorStack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCriticalError == null) {
				this.__cbOnceOwnerUnbindCriticalError = [];
			}
			this.__cbOnceOwnerUnbindCriticalError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleErrorStack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCriticalError == null) {
				this.__cbOnceOwnerUnbindCriticalError = [];
			}
			this.__cbOnceOwnerUnbindCriticalError.push(null);
		}
		if(this.__cbOnceCriticalError == null) {
			this.__cbOnceCriticalError = [];
		}
		this.__cbOnceCriticalError.push(handleErrorStack);
	}
	,offCriticalError: function(handleErrorStack) {
		if(handleErrorStack != null) {
			var index;
			var unbind;
			if(this.__cbOnCriticalError != null) {
				index = this.__cbOnCriticalError.indexOf(handleErrorStack);
				if(index != -1) {
					this.__cbOnCriticalError.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCriticalError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCriticalError.splice(index,1);
				}
			}
			if(this.__cbOnceCriticalError != null) {
				index = this.__cbOnceCriticalError.indexOf(handleErrorStack);
				if(index != -1) {
					this.__cbOnceCriticalError.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCriticalError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCriticalError.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCriticalError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCriticalError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCriticalError = null;
			}
			if(this.__cbOnceOwnerUnbindCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCriticalError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCriticalError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCriticalError = null;
			}
			this.__cbOnCriticalError = null;
			this.__cbOnceCriticalError = null;
		}
	}
	,listensCriticalError: function() {
		if(!(this.__cbOnCriticalError != null && this.__cbOnCriticalError.length > 0)) {
			if(this.__cbOnceCriticalError != null) {
				return this.__cbOnceCriticalError.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBeginEnterBackground: function() {
		var len = 0;
		if(this.__cbOnBeginEnterBackground != null) {
			len += this.__cbOnBeginEnterBackground.length;
		}
		if(this.__cbOnceBeginEnterBackground != null) {
			len += this.__cbOnceBeginEnterBackground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginEnterBackground[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginEnterBackground[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginEnterBackground = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterBackground.push(null);
		}
		if(this.__cbOnBeginEnterBackground == null) {
			this.__cbOnBeginEnterBackground = [];
		}
		this.__cbOnBeginEnterBackground.push(handle);
	}
	,onceBeginEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnceOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnceOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterBackground.push(null);
		}
		if(this.__cbOnceBeginEnterBackground == null) {
			this.__cbOnceBeginEnterBackground = [];
		}
		this.__cbOnceBeginEnterBackground.push(handle);
	}
	,offBeginEnterBackground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEnterBackground != null) {
				index = this.__cbOnBeginEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginEnterBackground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEnterBackground.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEnterBackground != null) {
				index = this.__cbOnceBeginEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginEnterBackground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEnterBackground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEnterBackground = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterBackground = null;
			}
			this.__cbOnBeginEnterBackground = null;
			this.__cbOnceBeginEnterBackground = null;
		}
	}
	,listensBeginEnterBackground: function() {
		if(!(this.__cbOnBeginEnterBackground != null && this.__cbOnBeginEnterBackground.length > 0)) {
			if(this.__cbOnceBeginEnterBackground != null) {
				return this.__cbOnceBeginEnterBackground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFinishEnterBackground: function() {
		var len = 0;
		if(this.__cbOnFinishEnterBackground != null) {
			len += this.__cbOnFinishEnterBackground.length;
		}
		if(this.__cbOnceFinishEnterBackground != null) {
			len += this.__cbOnceFinishEnterBackground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFinishEnterBackground[ii];
					++i;
				}
			}
			if(this.__cbOnceFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFinishEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFinishEnterBackground[ii];
					var unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFinishEnterBackground = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterBackground.push(null);
		}
		if(this.__cbOnFinishEnterBackground == null) {
			this.__cbOnFinishEnterBackground = [];
		}
		this.__cbOnFinishEnterBackground.push(handle);
	}
	,onceFinishEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnceOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnceOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterBackground.push(null);
		}
		if(this.__cbOnceFinishEnterBackground == null) {
			this.__cbOnceFinishEnterBackground = [];
		}
		this.__cbOnceFinishEnterBackground.push(handle);
	}
	,offFinishEnterBackground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishEnterBackground != null) {
				index = this.__cbOnFinishEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishEnterBackground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishEnterBackground.splice(index,1);
				}
			}
			if(this.__cbOnceFinishEnterBackground != null) {
				index = this.__cbOnceFinishEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishEnterBackground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishEnterBackground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishEnterBackground = null;
			}
			if(this.__cbOnceOwnerUnbindFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterBackground = null;
			}
			this.__cbOnFinishEnterBackground = null;
			this.__cbOnceFinishEnterBackground = null;
		}
	}
	,listensFinishEnterBackground: function() {
		if(!(this.__cbOnFinishEnterBackground != null && this.__cbOnFinishEnterBackground.length > 0)) {
			if(this.__cbOnceFinishEnterBackground != null) {
				return this.__cbOnceFinishEnterBackground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBeginEnterForeground: function() {
		var len = 0;
		if(this.__cbOnBeginEnterForeground != null) {
			len += this.__cbOnBeginEnterForeground.length;
		}
		if(this.__cbOnceBeginEnterForeground != null) {
			len += this.__cbOnceBeginEnterForeground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginEnterForeground[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginEnterForeground[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginEnterForeground = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterForeground.push(null);
		}
		if(this.__cbOnBeginEnterForeground == null) {
			this.__cbOnBeginEnterForeground = [];
		}
		this.__cbOnBeginEnterForeground.push(handle);
	}
	,onceBeginEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnceOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnceOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterForeground.push(null);
		}
		if(this.__cbOnceBeginEnterForeground == null) {
			this.__cbOnceBeginEnterForeground = [];
		}
		this.__cbOnceBeginEnterForeground.push(handle);
	}
	,offBeginEnterForeground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEnterForeground != null) {
				index = this.__cbOnBeginEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginEnterForeground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEnterForeground.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEnterForeground != null) {
				index = this.__cbOnceBeginEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginEnterForeground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEnterForeground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEnterForeground = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterForeground = null;
			}
			this.__cbOnBeginEnterForeground = null;
			this.__cbOnceBeginEnterForeground = null;
		}
	}
	,listensBeginEnterForeground: function() {
		if(!(this.__cbOnBeginEnterForeground != null && this.__cbOnBeginEnterForeground.length > 0)) {
			if(this.__cbOnceBeginEnterForeground != null) {
				return this.__cbOnceBeginEnterForeground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFinishEnterForeground: function() {
		var len = 0;
		if(this.__cbOnFinishEnterForeground != null) {
			len += this.__cbOnFinishEnterForeground.length;
		}
		if(this.__cbOnceFinishEnterForeground != null) {
			len += this.__cbOnceFinishEnterForeground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFinishEnterForeground[ii];
					++i;
				}
			}
			if(this.__cbOnceFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFinishEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFinishEnterForeground[ii];
					var unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFinishEnterForeground = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterForeground.push(null);
		}
		if(this.__cbOnFinishEnterForeground == null) {
			this.__cbOnFinishEnterForeground = [];
		}
		this.__cbOnFinishEnterForeground.push(handle);
	}
	,onceFinishEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnceOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnceOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterForeground.push(null);
		}
		if(this.__cbOnceFinishEnterForeground == null) {
			this.__cbOnceFinishEnterForeground = [];
		}
		this.__cbOnceFinishEnterForeground.push(handle);
	}
	,offFinishEnterForeground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishEnterForeground != null) {
				index = this.__cbOnFinishEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishEnterForeground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishEnterForeground.splice(index,1);
				}
			}
			if(this.__cbOnceFinishEnterForeground != null) {
				index = this.__cbOnceFinishEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishEnterForeground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishEnterForeground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishEnterForeground = null;
			}
			if(this.__cbOnceOwnerUnbindFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterForeground = null;
			}
			this.__cbOnFinishEnterForeground = null;
			this.__cbOnceFinishEnterForeground = null;
		}
	}
	,listensFinishEnterForeground: function() {
		if(!(this.__cbOnFinishEnterForeground != null && this.__cbOnFinishEnterForeground.length > 0)) {
			if(this.__cbOnceFinishEnterForeground != null) {
				return this.__cbOnceFinishEnterForeground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBeginSortVisuals: function() {
		var len = 0;
		if(this.__cbOnBeginSortVisuals != null) {
			len += this.__cbOnBeginSortVisuals.length;
		}
		if(this.__cbOnceBeginSortVisuals != null) {
			len += this.__cbOnceBeginSortVisuals.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginSortVisuals[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginSortVisuals[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginSortVisuals = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnOwnerUnbindBeginSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnOwnerUnbindBeginSortVisuals.push(null);
		}
		if(this.__cbOnBeginSortVisuals == null) {
			this.__cbOnBeginSortVisuals = [];
		}
		this.__cbOnBeginSortVisuals.push(handle);
	}
	,onceBeginSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnceOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindBeginSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnceOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindBeginSortVisuals.push(null);
		}
		if(this.__cbOnceBeginSortVisuals == null) {
			this.__cbOnceBeginSortVisuals = [];
		}
		this.__cbOnceBeginSortVisuals.push(handle);
	}
	,offBeginSortVisuals: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginSortVisuals != null) {
				index = this.__cbOnBeginSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginSortVisuals.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginSortVisuals.splice(index,1);
				}
			}
			if(this.__cbOnceBeginSortVisuals != null) {
				index = this.__cbOnceBeginSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginSortVisuals.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginSortVisuals.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginSortVisuals = null;
			}
			if(this.__cbOnceOwnerUnbindBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginSortVisuals = null;
			}
			this.__cbOnBeginSortVisuals = null;
			this.__cbOnceBeginSortVisuals = null;
		}
	}
	,listensBeginSortVisuals: function() {
		if(!(this.__cbOnBeginSortVisuals != null && this.__cbOnBeginSortVisuals.length > 0)) {
			if(this.__cbOnceBeginSortVisuals != null) {
				return this.__cbOnceBeginSortVisuals.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFinishSortVisuals: function() {
		var len = 0;
		if(this.__cbOnFinishSortVisuals != null) {
			len += this.__cbOnFinishSortVisuals.length;
		}
		if(this.__cbOnceFinishSortVisuals != null) {
			len += this.__cbOnceFinishSortVisuals.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFinishSortVisuals[ii];
					++i;
				}
			}
			if(this.__cbOnceFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFinishSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFinishSortVisuals[ii];
					var unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFinishSortVisuals = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnOwnerUnbindFinishSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnOwnerUnbindFinishSortVisuals.push(null);
		}
		if(this.__cbOnFinishSortVisuals == null) {
			this.__cbOnFinishSortVisuals = [];
		}
		this.__cbOnFinishSortVisuals.push(handle);
	}
	,onceFinishSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnceOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindFinishSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnceOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindFinishSortVisuals.push(null);
		}
		if(this.__cbOnceFinishSortVisuals == null) {
			this.__cbOnceFinishSortVisuals = [];
		}
		this.__cbOnceFinishSortVisuals.push(handle);
	}
	,offFinishSortVisuals: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishSortVisuals != null) {
				index = this.__cbOnFinishSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishSortVisuals.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishSortVisuals.splice(index,1);
				}
			}
			if(this.__cbOnceFinishSortVisuals != null) {
				index = this.__cbOnceFinishSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishSortVisuals.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishSortVisuals.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishSortVisuals = null;
			}
			if(this.__cbOnceOwnerUnbindFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishSortVisuals = null;
			}
			this.__cbOnFinishSortVisuals = null;
			this.__cbOnceFinishSortVisuals = null;
		}
	}
	,listensFinishSortVisuals: function() {
		if(!(this.__cbOnFinishSortVisuals != null && this.__cbOnFinishSortVisuals.length > 0)) {
			if(this.__cbOnceFinishSortVisuals != null) {
				return this.__cbOnceFinishSortVisuals.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBeginDraw: function() {
		var len = 0;
		if(this.__cbOnBeginDraw != null) {
			len += this.__cbOnBeginDraw.length;
		}
		if(this.__cbOnceBeginDraw != null) {
			len += this.__cbOnceBeginDraw.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginDraw[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginDraw[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginDraw[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginDraw = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginDraw == null) {
				this.__cbOnOwnerUnbindBeginDraw = [];
			}
			this.__cbOnOwnerUnbindBeginDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginDraw == null) {
				this.__cbOnOwnerUnbindBeginDraw = [];
			}
			this.__cbOnOwnerUnbindBeginDraw.push(null);
		}
		if(this.__cbOnBeginDraw == null) {
			this.__cbOnBeginDraw = [];
		}
		this.__cbOnBeginDraw.push(handle);
	}
	,onceBeginDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginDraw == null) {
				this.__cbOnceOwnerUnbindBeginDraw = [];
			}
			this.__cbOnceOwnerUnbindBeginDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginDraw == null) {
				this.__cbOnceOwnerUnbindBeginDraw = [];
			}
			this.__cbOnceOwnerUnbindBeginDraw.push(null);
		}
		if(this.__cbOnceBeginDraw == null) {
			this.__cbOnceBeginDraw = [];
		}
		this.__cbOnceBeginDraw.push(handle);
	}
	,offBeginDraw: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginDraw != null) {
				index = this.__cbOnBeginDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginDraw.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginDraw.splice(index,1);
				}
			}
			if(this.__cbOnceBeginDraw != null) {
				index = this.__cbOnceBeginDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginDraw.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginDraw.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginDraw = null;
			}
			if(this.__cbOnceOwnerUnbindBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginDraw = null;
			}
			this.__cbOnBeginDraw = null;
			this.__cbOnceBeginDraw = null;
		}
	}
	,listensBeginDraw: function() {
		if(!(this.__cbOnBeginDraw != null && this.__cbOnBeginDraw.length > 0)) {
			if(this.__cbOnceBeginDraw != null) {
				return this.__cbOnceBeginDraw.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFinishDraw: function() {
		var len = 0;
		if(this.__cbOnFinishDraw != null) {
			len += this.__cbOnFinishDraw.length;
		}
		if(this.__cbOnceFinishDraw != null) {
			len += this.__cbOnceFinishDraw.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFinishDraw[ii];
					++i;
				}
			}
			if(this.__cbOnceFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFinishDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFinishDraw[ii];
					var unbind = this.__cbOnceOwnerUnbindFinishDraw[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFinishDraw = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishDraw == null) {
				this.__cbOnOwnerUnbindFinishDraw = [];
			}
			this.__cbOnOwnerUnbindFinishDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishDraw == null) {
				this.__cbOnOwnerUnbindFinishDraw = [];
			}
			this.__cbOnOwnerUnbindFinishDraw.push(null);
		}
		if(this.__cbOnFinishDraw == null) {
			this.__cbOnFinishDraw = [];
		}
		this.__cbOnFinishDraw.push(handle);
	}
	,onceFinishDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishDraw == null) {
				this.__cbOnceOwnerUnbindFinishDraw = [];
			}
			this.__cbOnceOwnerUnbindFinishDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishDraw == null) {
				this.__cbOnceOwnerUnbindFinishDraw = [];
			}
			this.__cbOnceOwnerUnbindFinishDraw.push(null);
		}
		if(this.__cbOnceFinishDraw == null) {
			this.__cbOnceFinishDraw = [];
		}
		this.__cbOnceFinishDraw.push(handle);
	}
	,offFinishDraw: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishDraw != null) {
				index = this.__cbOnFinishDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishDraw.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishDraw.splice(index,1);
				}
			}
			if(this.__cbOnceFinishDraw != null) {
				index = this.__cbOnceFinishDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishDraw.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishDraw.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishDraw = null;
			}
			if(this.__cbOnceOwnerUnbindFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishDraw = null;
			}
			this.__cbOnFinishDraw = null;
			this.__cbOnceFinishDraw = null;
		}
	}
	,listensFinishDraw: function() {
		if(!(this.__cbOnFinishDraw != null && this.__cbOnFinishDraw.length > 0)) {
			if(this.__cbOnceFinishDraw != null) {
				return this.__cbOnceFinishDraw.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitLowMemory: function() {
		var len = 0;
		if(this.__cbOnLowMemory != null) {
			len += this.__cbOnLowMemory.length;
		}
		if(this.__cbOnceLowMemory != null) {
			len += this.__cbOnceLowMemory.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnLowMemory.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnLowMemory[ii];
					++i;
				}
			}
			if(this.__cbOnceLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnceLowMemory.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceLowMemory[ii];
					var unbind = this.__cbOnceOwnerUnbindLowMemory[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceLowMemory = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onLowMemory: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "lowMemory" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offLowMemory(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindLowMemory == null) {
				this.__cbOnOwnerUnbindLowMemory = [];
			}
			this.__cbOnOwnerUnbindLowMemory.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindLowMemory == null) {
				this.__cbOnOwnerUnbindLowMemory = [];
			}
			this.__cbOnOwnerUnbindLowMemory.push(null);
		}
		if(this.__cbOnLowMemory == null) {
			this.__cbOnLowMemory = [];
		}
		this.__cbOnLowMemory.push(handle);
	}
	,onceLowMemory: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "lowMemory" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offLowMemory(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindLowMemory == null) {
				this.__cbOnceOwnerUnbindLowMemory = [];
			}
			this.__cbOnceOwnerUnbindLowMemory.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindLowMemory == null) {
				this.__cbOnceOwnerUnbindLowMemory = [];
			}
			this.__cbOnceOwnerUnbindLowMemory.push(null);
		}
		if(this.__cbOnceLowMemory == null) {
			this.__cbOnceLowMemory = [];
		}
		this.__cbOnceLowMemory.push(handle);
	}
	,offLowMemory: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnLowMemory != null) {
				index = this.__cbOnLowMemory.indexOf(handle);
				if(index != -1) {
					this.__cbOnLowMemory.splice(index,1);
					unbind = this.__cbOnOwnerUnbindLowMemory[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindLowMemory.splice(index,1);
				}
			}
			if(this.__cbOnceLowMemory != null) {
				index = this.__cbOnceLowMemory.indexOf(handle);
				if(index != -1) {
					this.__cbOnceLowMemory.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindLowMemory[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindLowMemory.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindLowMemory.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindLowMemory[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindLowMemory = null;
			}
			if(this.__cbOnceOwnerUnbindLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindLowMemory.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindLowMemory[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindLowMemory = null;
			}
			this.__cbOnLowMemory = null;
			this.__cbOnceLowMemory = null;
		}
	}
	,listensLowMemory: function() {
		if(!(this.__cbOnLowMemory != null && this.__cbOnLowMemory.length > 0)) {
			if(this.__cbOnceLowMemory != null) {
				return this.__cbOnceLowMemory.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTerminate: function() {
		var len = 0;
		if(this.__cbOnTerminate != null) {
			len += this.__cbOnTerminate.length;
		}
		if(this.__cbOnceTerminate != null) {
			len += this.__cbOnceTerminate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnTerminate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTerminate[ii];
					++i;
				}
			}
			if(this.__cbOnceTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTerminate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTerminate[ii];
					var unbind = this.__cbOnceOwnerUnbindTerminate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTerminate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTerminate: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "terminate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTerminate(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTerminate == null) {
				this.__cbOnOwnerUnbindTerminate = [];
			}
			this.__cbOnOwnerUnbindTerminate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTerminate == null) {
				this.__cbOnOwnerUnbindTerminate = [];
			}
			this.__cbOnOwnerUnbindTerminate.push(null);
		}
		if(this.__cbOnTerminate == null) {
			this.__cbOnTerminate = [];
		}
		this.__cbOnTerminate.push(handle);
	}
	,onceTerminate: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "terminate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTerminate(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTerminate == null) {
				this.__cbOnceOwnerUnbindTerminate = [];
			}
			this.__cbOnceOwnerUnbindTerminate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTerminate == null) {
				this.__cbOnceOwnerUnbindTerminate = [];
			}
			this.__cbOnceOwnerUnbindTerminate.push(null);
		}
		if(this.__cbOnceTerminate == null) {
			this.__cbOnceTerminate = [];
		}
		this.__cbOnceTerminate.push(handle);
	}
	,offTerminate: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnTerminate != null) {
				index = this.__cbOnTerminate.indexOf(handle);
				if(index != -1) {
					this.__cbOnTerminate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTerminate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTerminate.splice(index,1);
				}
			}
			if(this.__cbOnceTerminate != null) {
				index = this.__cbOnceTerminate.indexOf(handle);
				if(index != -1) {
					this.__cbOnceTerminate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTerminate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTerminate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTerminate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTerminate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTerminate = null;
			}
			if(this.__cbOnceOwnerUnbindTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTerminate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTerminate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTerminate = null;
			}
			this.__cbOnTerminate = null;
			this.__cbOnceTerminate = null;
		}
	}
	,listensTerminate: function() {
		if(!(this.__cbOnTerminate != null && this.__cbOnTerminate.length > 0)) {
			if(this.__cbOnceTerminate != null) {
				return this.__cbOnceTerminate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,onceImmediate: function(handleImmediate) {
		if(handleImmediate == null) {
			throw haxe_Exception.thrown("Immediate callback should not be null!");
		}
		if(this.immediateCallbacksLen < this.immediateCallbacksCapacity) {
			this.immediateCallbacks[this.immediateCallbacksLen] = handleImmediate;
			this.immediateCallbacksLen++;
		} else {
			this.immediateCallbacks[this.immediateCallbacksLen++] = handleImmediate;
			this.immediateCallbacksCapacity++;
		}
	}
	,oncePostFlushImmediate: function(handlePostFlushImmediate,defer) {
		if(defer == null) {
			defer = true;
		}
		var _gthis = this;
		if(!defer) {
			if(this.immediateCallbacksLen == 0) {
				handlePostFlushImmediate();
			} else if(this.postFlushImmediateCallbacksLen < this.postFlushImmediateCallbacksCapacity) {
				this.postFlushImmediateCallbacks[this.postFlushImmediateCallbacksLen] = handlePostFlushImmediate;
				this.postFlushImmediateCallbacksLen++;
			} else {
				this.postFlushImmediateCallbacks[this.postFlushImmediateCallbacksLen++] = handlePostFlushImmediate;
				this.postFlushImmediateCallbacksCapacity++;
			}
		} else {
			ceramic_App.app.onceImmediate(function() {
				_gthis.oncePostFlushImmediate(handlePostFlushImmediate,false);
			});
		}
	}
	,flushImmediate: function() {
		var didFlush = false;
		while(this.immediateCallbacksLen > 0) {
			didFlush = true;
			var pool = ceramic_ArrayPool.pool(this.immediateCallbacksLen);
			var callbacks = pool.get();
			var len = this.immediateCallbacksLen;
			this.immediateCallbacksLen = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				callbacks.vector[i] = this.immediateCallbacks[i];
				this.immediateCallbacks[i] = null;
			}
			var _g2 = 0;
			var _g3 = len;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var cb = callbacks.vector[i1];
				cb();
			}
			pool.release(callbacks);
		}
		if(this.postFlushImmediateCallbacksLen > 0) {
			var pool = ceramic_ArrayPool.pool(this.postFlushImmediateCallbacksLen);
			var callbacks = pool.get();
			var len = this.postFlushImmediateCallbacksLen;
			this.postFlushImmediateCallbacksLen = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				callbacks.vector[i] = this.postFlushImmediateCallbacks[i];
				this.postFlushImmediateCallbacks[i] = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
		}
		return didFlush;
	}
	,requestFullUpdateAndDrawInFrame: function() {
		if(this.inUpdate) {
			this.shouldUpdateAndDrawAgain = true;
		}
	}
	,get_computedFps: function() {
		return this._computeFps.fps;
	}
	,backendReady: function() {
		var _gthis = this;
		this.backend.onUpdate(this,$bind(this,this.updatePreReady));
		this.persistent = new ceramic_PersistentData("app");
		this.textInput = new ceramic_TextInput();
		this.screen.backendReady();
		if(ceramic_App.preInitCallbacks != null) {
			var _g = 0;
			var _g1 = [].concat(ceramic_App.preInitCallbacks);
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			ceramic_App.preInitCallbacks = null;
		}
		this.initFieldConverters();
		if(this.settings.collections != null) {
			this.initCollections(this.settings.collections(),this.settings.appInfo);
		}
		this.assets.add(this.settings.defaultShader);
		this.assets.add("shader:msdf");
		this.assets.add("shader:pixelArt");
		this.assets.onceComplete(this,function(success) {
			_gthis.assets.add(_gthis.settings.defaultFont);
			_gthis.assets.add("image:white");
			_gthis.assets.onceComplete(_gthis,function(success) {
				if(success) {
					_gthis.defaultFont = _gthis.assets.font(_gthis.settings.defaultFont);
					_gthis.defaultWhiteTexture = _gthis.assets.texture("image:white");
					_gthis.defaultTexturedShader = _gthis.assets.shader(_gthis.settings.defaultShader);
					_gthis.logger.success("Default assets loaded.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/App.hx", lineNumber : 518, className : "ceramic.App", methodName : "backendReady"});
					_gthis.assetsLoaded();
				} else {
					ceramic_App.app.logger.error("Failed to load default assets.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/App.hx", lineNumber : 521, className : "ceramic.App", methodName : "backendReady"});
				}
			});
			_gthis.emitDefaultAssetsLoad(_gthis.assets);
			_gthis.assets.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/App.hx", lineNumber : 529, className : "ceramic.App", methodName : "backendReady"});
			_gthis.flushImmediate();
		});
		this.assets.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/App.hx", lineNumber : 534, className : "ceramic.App", methodName : "backendReady"});
		this.flushImmediate();
	}
	,initFieldConverters: function() {
		var this1 = this.converters;
		var value = new ceramic_ConvertTexture();
		this1.h["ceramic.Texture"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertFont();
		this1.h["ceramic.BitmapFont"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertFragmentData();
		this1.h["ceramic.FragmentData"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["Map<String,String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["Map<String,Bool>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["ceramic.ReadOnlyMap<String,String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["ceramic.ReadOnlyMap<String,Bool>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<Float>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<Int>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<Float>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<Int>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertComponentMap();
		this1.h["Map<String,ceramic.Component>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertComponentMap();
		this1.h["ceramic.ReadOnlyMap<String,ceramic.Component>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertIntBoolMap();
		this1.h["ceramic.IntBoolMap"] = value;
	}
	,initCollections: function(collections,info) {
		var _gthis = this;
		if(info == null) {
			info = this.info;
		}
		var addedAssets_h = Object.create(null);
		var numAdded = 0;
		var _g = 0;
		var _g1 = Reflect.fields(info.collections);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(Reflect.field(info.collections,key));
			while(_g2 < _g3.length) {
				var collectionName = _g3[_g2];
				++_g2;
				var collectionInfo = Reflect.field(Reflect.field(info.collections,key),collectionName);
				if(typeof(collectionInfo) != "string") {
					var dataName = collectionInfo.data;
					if(dataName != null) {
						if(!Object.prototype.hasOwnProperty.call(addedAssets_h,dataName)) {
							addedAssets_h[dataName] = true;
							this.assets.addDatabase(dataName);
							++numAdded;
						}
					}
				}
			}
		}
		if(numAdded > 0) {
			this.assets.onceComplete(this,function(success) {
				var _g = 0;
				var _g1 = Reflect.fields(info.collections);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					var _g2 = 0;
					var _g3 = Reflect.fields(Reflect.field(info.collections,key));
					while(_g2 < _g3.length) {
						var collectionName = _g3[_g2];
						++_g2;
						var collectionInfo = Reflect.field(Reflect.field(info.collections,key),collectionName);
						if(typeof(collectionInfo) != "string") {
							var dataName = collectionInfo.data;
							if(dataName != null) {
								var data = _gthis.assets.database(dataName);
								var collection = Reflect.field(collections,collectionName);
								var name = collectionInfo.type;
								var entryClass = $hxClasses[name];
								var _g4 = 0;
								while(_g4 < data.length) {
									var item = data[_g4];
									++_g4;
									var instance = Type.createInstance(entryClass,[null,null]);
									instance.setRawData(item);
									collection.push(instance);
								}
								collection.synchronize();
							}
						}
					}
				}
			});
		}
	}
	,assetsLoaded: function() {
		this.runNextLoader();
	}
	,runNextLoader: function() {
		if(this.loaders.length > 0) {
			var loader = this.loaders.shift();
			loader($bind(this,this.runNextLoader));
		} else {
			this.loaders = null;
			this.runReady();
		}
	}
	,runReady: function() {
		var _gthis = this;
		ceramic_PlatformSpecific.postAppInit();
		this.emitReady();
		this.screen.resize();
		this.backend.offUpdate($bind(this,this.updatePreReady));
		this.backend.onUpdate(this,$bind(this,this.update));
		this.backend.input.onKeyDown(this,function(key) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitKeyDown(key);
			});
		});
		this.backend.input.onKeyUp(this,function(key) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitKeyUp(key);
			});
		});
		this.backend.input.onGamepadEnable(this,function(gamepadId,name) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadEnable(gamepadId,name);
			});
		});
		this.backend.input.onGamepadDisable(this,function(gamepadId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadDisable(gamepadId);
			});
		});
		this.backend.input.onGamepadDown(this,function(gamepadId,buttonId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadDown(gamepadId,buttonId);
			});
		});
		this.backend.input.onGamepadUp(this,function(gamepadId,buttonId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadUp(gamepadId,buttonId);
			});
		});
		this.backend.input.onGamepadAxis(this,function(gamepadId,axisId,value) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadAxis(gamepadId,axisId,value);
			});
		});
	}
	,updatePreReady: function(delta) {
		this.flushImmediate();
	}
	,update: function(realDelta) {
		var delta = realDelta;
		if(delta > this.settings.get_maxDelta()) {
			delta = this.settings.get_maxDelta();
		}
		this._computeFps.addFrame(delta);
		this.delta = delta;
		this.realDelta = realDelta;
		ceramic_Timer.update(delta,realDelta);
		ceramic_Runner.tick();
		this.screen.updatePointerOverState(delta);
		this.inUpdate = true;
		this.shouldUpdateAndDrawAgain = true;
		var isFirstUpdateInFrame = true;
		while(this.shouldUpdateAndDrawAgain) {
			this.shouldUpdateAndDrawAgain = false;
			var _delta = isFirstUpdateInFrame ? delta : 0;
			this.screen.resetDeltas();
			if(this.beginUpdateCallbacks.length > 0) {
				var callbacks = this.beginUpdateCallbacks;
				this.beginUpdateCallbacks = [];
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					callback();
				}
			}
			this.emitPreUpdate(_delta);
			this.systems.earlyUpdate(delta);
			this.flushImmediate();
			if(_delta > 0) {
				ceramic_Tween.tick(delta);
				this.flushImmediate();
			}
			this.emitUpdate(_delta);
			this.flushImmediate();
			this.systems.lateUpdate(delta);
			this.emitPostUpdate(_delta);
			this.flushImmediate();
			while(this.disposedEntities.length > 0) {
				var toDestroy = this.disposedEntities.shift();
				toDestroy.destroy();
			}
			this.syncPendingVisuals();
			var visuals = this.visuals;
			var numIterations = 0;
			var didFlush = false;
			while(true) {
				this.visualsContentDirty = false;
				var _this = this.screen.matrix;
				if(_this.changedDirty) {
					_this.changed = _this.tx != _this._txPrev || _this.ty != _this._tyPrev || _this.a != _this._aPrev || _this.b != _this._bPrev || _this.c != _this._cPrev || _this.d != _this._dPrev;
					_this.changedDirty = false;
				}
				if(this.screen.matrix.changed) {
					this.screen.matrix.emitChange();
				}
				var _g1 = 0;
				var _g2 = visuals.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var visual = visuals[i];
					if(visual._lifecycleState >= 0) {
						if(visual.touchableDirty) {
							visual.computeTouchable();
						}
						if(visual.contentDirty) {
							if(visual.visibilityDirty) {
								visual.computeVisibility();
							}
							if(visual.computedVisible) {
								visual.computeContent();
							}
						}
					}
				}
				var _g3 = 0;
				var _g4 = visuals.length;
				while(_g3 < _g4) {
					var i1 = _g3++;
					var visual1 = visuals[i1];
					if(visual1._lifecycleState >= 0 && visual1.transform != null) {
						var _this1 = visual1.transform;
						if(_this1.changedDirty) {
							_this1.changed = _this1.tx != _this1._txPrev || _this1.ty != _this1._tyPrev || _this1.a != _this1._aPrev || _this1.b != _this1._bPrev || _this1.c != _this1._cPrev || _this1.d != _this1._dPrev;
							_this1.changedDirty = false;
						}
						if(visual1.transform.changed) {
							visual1.transform.emitChange();
						}
					}
				}
				if(numIterations++ > 9999) {
					if(didFlush && this.visualsContentDirty) {
						throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously and visuals content stays dirty.");
					} else if(didFlush) {
						throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously.");
					} else {
						var _g5 = 0;
						var _g6 = visuals.length;
						while(_g5 < _g6) {
							var i2 = _g5++;
							var visual2 = visuals[i2];
							if(visual2._lifecycleState >= 0 && visual2.contentDirty) {
								throw haxe_Exception.thrown("Failed to update visuals because visuals content stays dirty. (" + Std.string(visual2) + ")");
							}
						}
					}
				}
				didFlush = this.flushImmediate();
				if(!(didFlush || this.visualsContentDirty)) {
					break;
				}
			}
			var _g7 = 0;
			var _g8 = this.renderTextures.length;
			while(_g7 < _g8) {
				var i3 = _g7++;
				var renderTexture = this.renderTextures[i3];
				if(renderTexture.dependingTextures != null) {
					renderTexture.dependingTextures.h = { };
				}
			}
			var _g9 = 0;
			var _g10 = visuals.length;
			while(_g9 < _g10) {
				var i4 = _g9++;
				var visual3 = visuals[i4];
				if(visual3._lifecycleState >= 0) {
					if(visual3.renderTargetDirty) {
						visual3.computeRenderTarget();
					}
					if(visual3.matrixDirty) {
						visual3.computeMatrix();
					}
					if(visual3.visibilityDirty) {
						visual3.computeVisibility();
					}
					if(visual3.computedVisible) {
						if(visual3.clipDirty) {
							visual3.computeClip();
						}
					}
					if(visual3.computedRenderTarget != null) {
						if(visual3.asQuad != null) {
							if(visual3.asQuad.texture != null) {
								var _this2 = visual3.computedRenderTarget;
								var texture = visual3.asQuad.texture;
								if(_this2.dependingTextures == null) {
									var this1 = new haxe_ds_IntMap();
									_this2.dependingTextures = this1;
								}
								var value = _this2.dependingTextures.h[texture.index | 0];
								var prevValue = value != null ? value : 0;
								var value1 = prevValue + 1;
								_this2.dependingTextures.h[texture.index | 0] = value1;
							}
						} else if(visual3.asMesh != null) {
							if(visual3.asMesh.texture != null) {
								var _this3 = visual3.computedRenderTarget;
								var texture1 = visual3.asMesh.texture;
								if(_this3.dependingTextures == null) {
									var this2 = new haxe_ds_IntMap();
									_this3.dependingTextures = this2;
								}
								var value2 = _this3.dependingTextures.h[texture1.index | 0];
								var prevValue1 = value2 != null ? value2 : 0;
								var value3 = prevValue1 + 1;
								_this3.dependingTextures.h[texture1.index | 0] = value3;
							}
						}
					}
				}
			}
			if(this.hierarchyDirty) {
				var _g11 = 0;
				var _g12 = this.visuals.length;
				while(_g11 < _g12) {
					var i5 = _g11++;
					var visual4 = this.visuals[i5];
					if(visual4._lifecycleState >= 0) {
						if(visual4.parent == null) {
							visual4.computedDepth = visual4.depth * 2000000;
							if(visual4.children != null) {
								visual4.computeChildrenDepth();
							}
						}
					}
				}
				this.hierarchyDirty = false;
			}
			var renderTextures = this.renderTextures;
			if(renderTextures.length != 0) {
				ceramic_SortRenderTextures.rec(renderTextures,0,renderTextures.length);
				var len = renderTextures.length;
				var _g13 = 0;
				var _g14 = len;
				while(_g13 < _g14) {
					var i6 = _g13++;
					var renderTexture1 = renderTextures[i6];
					renderTexture1.priority = i6 + 1;
				}
			}
			if(this.destroyedVisuals.length > 0) {
				var i7 = 0;
				var gap = 0;
				var len1 = this.visuals.length;
				while(i7 < len1) {
					while(true) {
						var visual5 = this.visuals[i7];
						if(visual5._lifecycleState < 0) {
							++i7;
							++gap;
						} else {
							break;
						}
						if(!(i7 < len1)) {
							break;
						}
					}
					if(gap != 0 && i7 < len1) {
						var key = i7 - gap;
						this.visuals[key] = this.visuals[i7];
					}
					++i7;
				}
				var array = this.destroyedVisuals;
				if(array.length != 0) {
					if(array.length > 0) {
						array.splice(0,array.length);
					} else {
						var dArray = array;
						dArray[-1] = null;
					}
				}
				var array1 = this.visuals;
				var length = len1 - gap;
				if(array1.length != length) {
					if(array1.length > length) {
						array1.splice(length,array1.length - length);
					} else {
						var dArray1 = array1;
						dArray1[length - 1] = null;
					}
				}
				this.hierarchyDirty = true;
			}
			var visuals1 = this.visuals;
			this.emitBeginSortVisuals();
			ceramic_SortVisuals.rec(visuals1,0,visuals1.length);
			this.emitFinishSortVisuals();
			isFirstUpdateInFrame = false;
			this.emitBeginDraw();
			this.backend.draw.draw(this.visuals);
			this.emitFinishDraw();
		}
		this.inUpdate = false;
	}
	,addVisual: function(visual) {
		this.pendingVisuals.push(visual);
	}
	,removeVisual: function(visual) {
		this.destroyedVisuals.push(visual);
	}
	,syncPendingVisuals: function() {
		if(this.pendingVisuals.length > 0) {
			while(this.pendingVisuals.length > 0) this.visuals.push(this.pendingVisuals.pop());
			this.hierarchyDirty = true;
		}
	}
	,syncDestroyedVisuals: function() {
		if(this.destroyedVisuals.length > 0) {
			var i = 0;
			var gap = 0;
			var len = this.visuals.length;
			while(i < len) {
				while(true) {
					var visual = this.visuals[i];
					if(visual._lifecycleState < 0) {
						++i;
						++gap;
					} else {
						break;
					}
					if(!(i < len)) {
						break;
					}
				}
				if(gap != 0 && i < len) {
					var key = i - gap;
					this.visuals[key] = this.visuals[i];
				}
				++i;
			}
			var array = this.destroyedVisuals;
			if(array.length != 0) {
				if(array.length > 0) {
					array.splice(0,array.length);
				} else {
					var dArray = array;
					dArray[-1] = null;
				}
			}
			var array = this.visuals;
			var length = len - gap;
			if(array.length != length) {
				if(array.length > length) {
					array.splice(length,array.length - length);
				} else {
					var dArray = array;
					dArray[length - 1] = null;
				}
			}
			this.hierarchyDirty = true;
		}
	}
	,updateVisuals: function(visuals) {
		var numIterations = 0;
		var didFlush = false;
		while(true) {
			this.visualsContentDirty = false;
			var _this = this.screen.matrix;
			if(_this.changedDirty) {
				_this.changed = _this.tx != _this._txPrev || _this.ty != _this._tyPrev || _this.a != _this._aPrev || _this.b != _this._bPrev || _this.c != _this._cPrev || _this.d != _this._dPrev;
				_this.changedDirty = false;
			}
			if(this.screen.matrix.changed) {
				this.screen.matrix.emitChange();
			}
			var _g = 0;
			var _g1 = visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.touchableDirty) {
						visual.computeTouchable();
					}
					if(visual.contentDirty) {
						if(visual.visibilityDirty) {
							visual.computeVisibility();
						}
						if(visual.computedVisible) {
							visual.computeContent();
						}
					}
				}
			}
			var _g2 = 0;
			var _g3 = visuals.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var visual1 = visuals[i1];
				if(visual1._lifecycleState >= 0 && visual1.transform != null) {
					var _this1 = visual1.transform;
					if(_this1.changedDirty) {
						_this1.changed = _this1.tx != _this1._txPrev || _this1.ty != _this1._tyPrev || _this1.a != _this1._aPrev || _this1.b != _this1._bPrev || _this1.c != _this1._cPrev || _this1.d != _this1._dPrev;
						_this1.changedDirty = false;
					}
					if(visual1.transform.changed) {
						visual1.transform.emitChange();
					}
				}
			}
			if(numIterations++ > 9999) {
				if(didFlush && this.visualsContentDirty) {
					throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously and visuals content stays dirty.");
				} else if(didFlush) {
					throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously.");
				} else {
					var _g4 = 0;
					var _g5 = visuals.length;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var visual2 = visuals[i2];
						if(visual2._lifecycleState >= 0 && visual2.contentDirty) {
							throw haxe_Exception.thrown("Failed to update visuals because visuals content stays dirty. (" + Std.string(visual2) + ")");
						}
					}
				}
			}
			didFlush = this.flushImmediate();
			if(!(didFlush || this.visualsContentDirty)) {
				break;
			}
		}
		var _g = 0;
		var _g1 = this.renderTextures.length;
		while(_g < _g1) {
			var i = _g++;
			var renderTexture = this.renderTextures[i];
			if(renderTexture.dependingTextures != null) {
				renderTexture.dependingTextures.h = { };
			}
		}
		var _g = 0;
		var _g1 = visuals.length;
		while(_g < _g1) {
			var i = _g++;
			var visual = visuals[i];
			if(visual._lifecycleState >= 0) {
				if(visual.renderTargetDirty) {
					visual.computeRenderTarget();
				}
				if(visual.matrixDirty) {
					visual.computeMatrix();
				}
				if(visual.visibilityDirty) {
					visual.computeVisibility();
				}
				if(visual.computedVisible) {
					if(visual.clipDirty) {
						visual.computeClip();
					}
				}
				if(visual.computedRenderTarget != null) {
					if(visual.asQuad != null) {
						if(visual.asQuad.texture != null) {
							var _this = visual.computedRenderTarget;
							var texture = visual.asQuad.texture;
							if(_this.dependingTextures == null) {
								var this1 = new haxe_ds_IntMap();
								_this.dependingTextures = this1;
							}
							var value = _this.dependingTextures.h[texture.index | 0];
							var prevValue = value != null ? value : 0;
							var value1 = prevValue + 1;
							_this.dependingTextures.h[texture.index | 0] = value1;
						}
					} else if(visual.asMesh != null) {
						if(visual.asMesh.texture != null) {
							var _this1 = visual.computedRenderTarget;
							var texture1 = visual.asMesh.texture;
							if(_this1.dependingTextures == null) {
								var this2 = new haxe_ds_IntMap();
								_this1.dependingTextures = this2;
							}
							var value2 = _this1.dependingTextures.h[texture1.index | 0];
							var prevValue1 = value2 != null ? value2 : 0;
							var value3 = prevValue1 + 1;
							_this1.dependingTextures.h[texture1.index | 0] = value3;
						}
					}
				}
			}
		}
	}
	,computeHierarchy: function() {
		if(this.hierarchyDirty) {
			var _g = 0;
			var _g1 = this.visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = this.visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.parent == null) {
						visual.computedDepth = visual.depth * 2000000;
						if(visual.children != null) {
							visual.computeChildrenDepth();
						}
					}
				}
			}
			this.hierarchyDirty = false;
		}
	}
	,computeRenderTexturesPriority: function(renderTextures) {
		if(renderTextures.length == 0) {
			return;
		}
		ceramic_SortRenderTextures.rec(renderTextures,0,renderTextures.length);
		var len = renderTextures.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var renderTexture = renderTextures[i];
			renderTexture.priority = i + 1;
		}
	}
	,sortVisuals: function(visuals) {
		this.emitBeginSortVisuals();
		ceramic_SortVisuals.rec(visuals,0,visuals.length);
		this.emitFinishSortVisuals();
	}
	,group: function(id,createIfNeeded) {
		if(createIfNeeded == null) {
			createIfNeeded = true;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var i = _g++;
			var group = this.groups[i];
			if(group.id == id) {
				return group;
			}
		}
		if(createIfNeeded) {
			return new ceramic_Group(id);
		}
		return null;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offReady();
		this.offUpdate();
		this.offPreUpdate();
		this.offPostUpdate();
		this.offDefaultAssetsLoad();
		this.offCriticalError();
		this.offBeginEnterBackground();
		this.offFinishEnterBackground();
		this.offBeginEnterForeground();
		this.offFinishEnterForeground();
		this.offBeginSortVisuals();
		this.offFinishSortVisuals();
		this.offBeginDraw();
		this.offFinishDraw();
		this.offLowMemory();
		this.offTerminate();
	}
	,__class__: ceramic_App
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_computedFps:"get_computedFps"})
});
var ceramic_ArrayPool = function(arrayLengths) {
	this.nextFree = 0;
	this.arrays = null;
	this.arrayLengths = arrayLengths;
};
$hxClasses["ceramic.ArrayPool"] = ceramic_ArrayPool;
ceramic_ArrayPool.__name__ = "ceramic.ArrayPool";
ceramic_ArrayPool.pool = function(size) {
	if(size <= 10) {
		return ceramic_ArrayPool.dynPool10;
	} else if(size <= 100) {
		return ceramic_ArrayPool.dynPool100;
	} else if(size <= 1000) {
		return ceramic_ArrayPool.dynPool1000;
	} else if(size <= 10000) {
		return ceramic_ArrayPool.dynPool10000;
	} else if(size <= 100000) {
		return ceramic_ArrayPool.dynPool100000;
	} else {
		if(!ceramic_ArrayPool.didNotifyLargePool) {
			ceramic_ArrayPool.didNotifyLargePool = true;
			ceramic_Timer.schedule(null,0.5,function() {
				ceramic_ArrayPool.didNotifyLargePool = false;
			},-1);
			ceramic_App.app.logger.warning("You should avoid asking a pool for arrays with more than 100000 elements (asked: " + size + ") because it needs allocating a temporary one-time pool each time for that.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ArrayPool.hx", lineNumber : 45, className : "ceramic.ArrayPool", methodName : "pool"});
		}
		return new ceramic_ArrayPool(size);
	}
};
ceramic_ArrayPool.prototype = {
	get: function() {
		if(this.arrays == null) {
			this.arrays = new ceramic_ReusableArray(ceramic_ArrayPool.ALLOC_STEP);
		} else if(this.nextFree >= this.arrays.length) {
			var fh = this.arrays;
			fh.set_length(fh.length + ceramic_ArrayPool.ALLOC_STEP);
		}
		var result = this.arrays.vector[this.nextFree];
		if(result == null) {
			result = new ceramic_ReusableArray(this.arrayLengths);
			this.arrays.vector[this.nextFree] = result;
		}
		result._poolIndex = this.nextFree;
		while(true) {
			this.nextFree++;
			if(this.nextFree == this.arrays.length) {
				break;
			}
			var item = this.arrays.vector[this.nextFree];
			if(item == null) {
				break;
			}
			if(item._poolIndex == -1) {
				break;
			}
		}
		return result;
	}
	,release: function(array) {
		var poolIndex = array._poolIndex;
		array._poolIndex = -1;
		if(this.nextFree > poolIndex) {
			this.nextFree = poolIndex;
		}
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			array.vector[i] = null;
		}
	}
	,__class__: ceramic_ArrayPool
};
var ceramic_Assert = function() { };
$hxClasses["ceramic.Assert"] = ceramic_Assert;
ceramic_Assert.__name__ = "ceramic.Assert";
var tracker_Observable = function() { };
$hxClasses["tracker.Observable"] = tracker_Observable;
tracker_Observable.__name__ = "tracker.Observable";
tracker_Observable.__isInterface__ = true;
var ceramic_Asset = function(kind,name,options) {
	this.hotReload = false;
	this.handleTexturesDensityChange = false;
	this.unobservedStatus = ceramic_AssetStatus.NONE;
	this.statusAutoruns = null;
	this.refCount = 0;
	this.assets = null;
	this.density = 1.0;
	this.observedDirty = false;
	ceramic_Entity.call(this);
	this.kind = kind;
	this.options = options != null ? options : { };
	this.set_name(name);
	this.computePath();
};
$hxClasses["ceramic.Asset"] = ceramic_Asset;
ceramic_Asset.__name__ = "ceramic.Asset";
ceramic_Asset.__interfaces__ = [tracker_Observable];
ceramic_Asset.__super__ = ceramic_Entity;
ceramic_Asset.prototype = $extend(ceramic_Entity.prototype,{
	emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnObservedDirty[ii];
					++i;
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceObservedDirty = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitComplete: function(success) {
		if(success && this.owner != null) {
			this.owner.emitUpdate(this);
		}
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnComplete[ii];
					++i;
				}
			}
			if(this.__cbOnceComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceComplete[ii];
					var unbind = this.__cbOnceOwnerUnbindComplete[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceComplete = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handleSuccess);
	}
	,onceComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handleSuccess);
	}
	,offComplete: function(handleSuccess) {
		if(handleSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_status: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.statusAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.statusAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedStatus;
	}
	,set_status: function(status) {
		var prevValue = this.unobservedStatus;
		this.unobservedStatus = status;
		if(prevValue == status) {
			return status;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitStatusChange(status,prevValue);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return status;
	}
	,invalidateStatus: function() {
		var value = this.unobservedStatus;
		this.emitStatusChange(value,value);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitStatusChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnStatusChange != null) {
			len += this.__cbOnStatusChange.length;
		}
		if(this.__cbOnceStatusChange != null) {
			len += this.__cbOnceStatusChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnStatusChange[ii];
					++i;
				}
			}
			if(this.__cbOnceStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceStatusChange[ii];
					var unbind = this.__cbOnceOwnerUnbindStatusChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceStatusChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnStatusChange == null) {
			this.__cbOnStatusChange = [];
		}
		this.__cbOnStatusChange.push(handleCurrentPrevious);
	}
	,onceStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnceStatusChange == null) {
			this.__cbOnceStatusChange = [];
		}
		this.__cbOnceStatusChange.push(handleCurrentPrevious);
	}
	,offStatusChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnStatusChange != null) {
				index = this.__cbOnStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnStatusChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStatusChange.splice(index,1);
				}
			}
			if(this.__cbOnceStatusChange != null) {
				index = this.__cbOnceStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceStatusChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStatusChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStatusChange = null;
			}
			if(this.__cbOnceOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStatusChange = null;
			}
			this.__cbOnStatusChange = null;
			this.__cbOnceStatusChange = null;
		}
	}
	,listensStatusChange: function() {
		if(!(this.__cbOnStatusChange != null && this.__cbOnStatusChange.length > 0)) {
			if(this.__cbOnceStatusChange != null) {
				return this.__cbOnceStatusChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		this.set_status(ceramic_AssetStatus.BROKEN);
		ceramic_App.app.logger.error("This asset as no load implementation.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Asset.hx", lineNumber : 72, className : "ceramic.Asset", methodName : "load"});
		this.emitComplete(false);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.owner != null) {
			this.owner.removeAsset(this);
			this.owner = null;
		}
		if(this.assets != null) {
			this.assets.destroy();
			this.assets = null;
		}
	}
	,computePath: function(extensions,dir,runtimeAssets) {
		if(runtimeAssets == null && this.runtimeAssets != null) {
			runtimeAssets = this.runtimeAssets;
		}
		if(extensions == null) {
			switch(this.kind) {
			case "database":
				extensions = ["csv"];
				break;
			case "font":
				extensions = ["fnt"];
				break;
			case "fragments":
				extensions = ["fragments"];
				break;
			case "image":
				extensions = ["png","jpg","jpeg"];
				break;
			case "shader":
				extensions = ["frag","vert"];
				break;
			case "sound":
				extensions = ["ogg","wav"];
				break;
			case "text":
				extensions = ["txt","json","fnt"];
				break;
			default:
				extensions = null;
			}
		}
		if(extensions == null || dir == null) {
			if(Object.prototype.hasOwnProperty.call(ceramic_Assets.customAssetKinds.h,this.kind)) {
				var kindInfo = ceramic_Assets.customAssetKinds.h[this.kind];
				if(extensions == null) {
					extensions = kindInfo.extensions;
				}
				if(dir == null) {
					dir = kindInfo.dir;
				}
			}
		}
		if(extensions == null) {
			extensions = [];
		}
		if(dir == null) {
			dir = false;
		}
		var targetDensity = ceramic_App.app.screen.get_texturesDensity();
		var path = null;
		var bestPathInfo = null;
		var byName = dir ? runtimeAssets != null ? runtimeAssets.getLists().allDirsByName : ceramic_Assets.allDirsByName : runtimeAssets != null ? runtimeAssets.getLists().allByName : ceramic_Assets.allByName;
		var name = this.name;
		if(path == null && name != null && ceramic_Path.isAbsolute(name)) {
			path = name;
		}
		if(extensions.length > 0) {
			var _g = 0;
			while(_g < extensions.length) {
				var ext = extensions[_g];
				++_g;
				if(StringTools.endsWith(name,"." + ext)) {
					name = HxOverrides.substr(name,0,name.length - ext.length - 1);
					break;
				}
			}
			if(Object.prototype.hasOwnProperty.call(byName.h,name)) {
				var list = byName.h[name];
				var _g = 0;
				while(_g < extensions.length) {
					var ext = extensions[_g];
					++_g;
					var bestDensity = 1.0;
					var bestDensityDiff = 99999999999.0;
					var _g1 = 0;
					while(_g1 < list.length) {
						var item = list[_g1];
						++_g1;
						var pathInfo = ceramic_Assets.decodePath(item);
						if(pathInfo.extension == ext) {
							var diff = Math.abs(targetDensity - pathInfo.density);
							if(diff < bestDensityDiff) {
								bestDensityDiff = diff;
								bestDensity = pathInfo.density;
								path = pathInfo.path;
								bestPathInfo = pathInfo;
							}
						}
					}
					if(path != null) {
						break;
					}
				}
			}
		}
		if(path == null) {
			path = name;
		}
		this.set_path(path);
		if(bestPathInfo != null && bestPathInfo.flags != null) {
			var h = bestPathInfo.flags.h;
			var flag_h = h;
			var flag_keys = Object.keys(h);
			var flag_length = flag_keys.length;
			var flag_current = 0;
			while(flag_current < flag_length) {
				var flag = flag_keys[flag_current++];
				if(!Object.prototype.hasOwnProperty.call(this.options,flag)) {
					this.options[flag] = bestPathInfo.flags.h[flag];
				}
			}
		}
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.set_status(ceramic_AssetStatus.NONE);
		}
		this.path = path;
		if(path == null) {
			this.density = 1.0;
		} else {
			this.density = ceramic_Assets.decodePath(path).density;
		}
		return path;
	}
	,set_name: function(name) {
		if(this.name == name) {
			return name;
		}
		this.name = name;
		this.id = "asset:" + this.kind + ":" + name;
		return name;
	}
	,set_runtimeAssets: function(runtimeAssets) {
		if(this.runtimeAssets == runtimeAssets) {
			return runtimeAssets;
		}
		this.runtimeAssets = runtimeAssets;
		this.computePath();
		return runtimeAssets;
	}
	,set_handleTexturesDensityChange: function(value) {
		if(this.handleTexturesDensityChange == value) {
			return value;
		}
		this.handleTexturesDensityChange = value;
		if(value) {
			ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.texturesDensityDidChange));
		} else {
			ceramic_App.app.screen.offTexturesDensityChange($bind(this,this.texturesDensityDidChange));
		}
		return value;
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
	}
	,set_hotReload: function(value) {
		if(this.hotReload == value) {
			return value;
		}
		this.hotReload = value;
		if(value) {
			this.owner.onAssetFilesChange(this,$bind(this,this.assetFilesDidChange));
		} else {
			this.owner.offAssetFilesChange($bind(this,this.assetFilesDidChange));
		}
		return value;
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
	}
	,toString: function() {
		var className = this.className();
		if(this.path != null && StringTools.trim(this.path) != "") {
			return "" + className + "(" + this.name + " " + this.path + ")";
		} else {
			return "" + className + "(" + this.name + ")";
		}
	}
	,willEmitComplete: function(success) {
		if(success && this.owner != null) {
			this.owner.emitUpdate(this);
		}
	}
	,retain: function() {
		this.refCount++;
	}
	,release: function() {
		if(this.refCount == 0) {
			ceramic_App.app.logger.warning("Called release() on asset " + Std.string(this) + " when its refCount is already 0",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Asset.hx", lineNumber : 324, className : "ceramic.Asset", methodName : "release"});
		} else {
			this.refCount--;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offStatusChange();
		this.offComplete();
	}
	,__class__: ceramic_Asset
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_hotReload:"set_hotReload",set_handleTexturesDensityChange:"set_handleTexturesDensityChange",set_status:"set_status",get_status:"get_status",set_runtimeAssets:"set_runtimeAssets",set_path:"set_path",set_name:"set_name"})
});
var ceramic_AssetId = {};
ceramic_AssetId._new = function(value) {
	var this1 = value;
	return this1;
};
var ceramic_AssetPathInfo = function(path) {
	this.path = path;
	var dotIndex = path.lastIndexOf(".");
	this.extension = HxOverrides.substr(path,dotIndex + 1,null).toLowerCase();
	var truncatedName = HxOverrides.substr(path,0,dotIndex);
	var baseAtIndex = truncatedName.lastIndexOf("@");
	this.density = 1;
	if(baseAtIndex == -1) {
		baseAtIndex = dotIndex;
	} else {
		var afterAtParts = HxOverrides.substr(truncatedName,baseAtIndex + 1,null);
		var _g = 0;
		var _g1 = afterAtParts.split("+");
		while(_g < _g1.length) {
			var afterAt = _g1[_g];
			++_g;
			var isFlag = true;
			if(StringTools.endsWith(afterAt,"x")) {
				var flt = parseFloat(HxOverrides.substr(afterAt,0,afterAt.length - 1));
				if(!isNaN(flt)) {
					this.density = flt;
					isFlag = false;
				}
			}
			if(isFlag) {
				if(this.flags == null) {
					this.flags = new haxe_ds_StringMap();
				}
				var equalIndex = afterAt.indexOf("=");
				if(equalIndex == -1) {
					this.flags.h[afterAt] = true;
				} else {
					var key = HxOverrides.substr(afterAt,0,equalIndex);
					var val = HxOverrides.substr(afterAt,equalIndex + 1,null);
					this.flags.h[key] = val;
				}
			}
		}
	}
	this.name = HxOverrides.substr(path,0,Math.min(baseAtIndex,dotIndex));
};
$hxClasses["ceramic.AssetPathInfo"] = ceramic_AssetPathInfo;
ceramic_AssetPathInfo.__name__ = "ceramic.AssetPathInfo";
ceramic_AssetPathInfo.prototype = {
	toString: function() {
		return "" + Std.string({ extension : this.extension, name : this.name, path : this.path, density : this.density});
	}
	,__class__: ceramic_AssetPathInfo
};
var ceramic_AssetStatus = $hxEnums["ceramic.AssetStatus"] = { __ename__:"ceramic.AssetStatus",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"ceramic.AssetStatus",toString:$estr}
	,LOADING: {_hx_name:"LOADING",_hx_index:1,__enum__:"ceramic.AssetStatus",toString:$estr}
	,READY: {_hx_name:"READY",_hx_index:2,__enum__:"ceramic.AssetStatus",toString:$estr}
	,BROKEN: {_hx_name:"BROKEN",_hx_index:3,__enum__:"ceramic.AssetStatus",toString:$estr}
};
ceramic_AssetStatus.__constructs__ = [ceramic_AssetStatus.NONE,ceramic_AssetStatus.LOADING,ceramic_AssetStatus.READY,ceramic_AssetStatus.BROKEN];
var ceramic_Audio = function() {
	ceramic_Entity.call(this);
	this.mixers = new ceramic_IntMap();
	if(!this.mixers.exists(0)) {
		this.mixers.set(0,new ceramic_AudioMixer(0));
	}
};
$hxClasses["ceramic.Audio"] = ceramic_Audio;
ceramic_Audio.__name__ = "ceramic.Audio";
ceramic_Audio.__super__ = ceramic_Entity;
ceramic_Audio.prototype = $extend(ceramic_Entity.prototype,{
	initMixerIfNeeded: function(index) {
		if(!this.mixers.exists(index)) {
			this.mixers.set(index,new ceramic_AudioMixer(index));
		}
	}
	,mixer: function(index) {
		if(!this.mixers.exists(index)) {
			this.mixers.set(index,new ceramic_AudioMixer(index));
		}
		var _this = this.mixers;
		var value = _this.keys.h[index | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return _this.values[index - 2];
		} else {
			return null;
		}
	}
	,__class__: ceramic_Audio
});
var ceramic_AudioMixer = function(index) {
	this.mute = false;
	this.pitch = 1;
	this.pan = 0;
	this.volume = 0.5;
	ceramic_Entity.call(this);
	this.index = index;
};
$hxClasses["ceramic.AudioMixer"] = ceramic_AudioMixer;
ceramic_AudioMixer.__name__ = "ceramic.AudioMixer";
ceramic_AudioMixer.__super__ = ceramic_Entity;
ceramic_AudioMixer.prototype = $extend(ceramic_Entity.prototype,{
	__class__: ceramic_AudioMixer
});
var ceramic_AutoCollections = function() { };
$hxClasses["ceramic.AutoCollections"] = ceramic_AutoCollections;
ceramic_AutoCollections.__name__ = "ceramic.AutoCollections";
ceramic_AutoCollections.__isInterface__ = true;
var ceramic_BackgroundQueue = function(checkInterval) {
	if(checkInterval == null) {
		checkInterval = 0.1;
	}
	this.pending = [];
	this.stop = false;
	this.runsInBackground = false;
	this.checkInterval = 0.1;
	ceramic_Entity.call(this);
	this.checkInterval = 0.1;
};
$hxClasses["ceramic.BackgroundQueue"] = ceramic_BackgroundQueue;
ceramic_BackgroundQueue.__name__ = "ceramic.BackgroundQueue";
ceramic_BackgroundQueue.__super__ = ceramic_Entity;
ceramic_BackgroundQueue.prototype = $extend(ceramic_Entity.prototype,{
	schedule: function(fn) {
		ceramic_App.app.onceImmediate(fn);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		this.stop = true;
	}
	,__class__: ceramic_BackgroundQueue
});
var ceramic_BezierEasing = function(x1,y1,x2,y2) {
	this.quadratic = false;
	this.cached = false;
	this.linearEasing = false;
	if(this.cached) {
		this.removeFromCache(this.mX1,this.mY1,this.mX2,this.mY2);
	}
	if(x2 == null || y2 == null) {
		this.quadratic = true;
		this.mQuadraticX1 = x1;
		this.mQuadraticX2 = x2;
		this.mX1 = ceramic_BezierEasing.TWO_THIRD * x1;
		this.mY1 = ceramic_BezierEasing.TWO_THIRD * y1;
		this.mX2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0);
		this.mY2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0);
	} else {
		this.quadratic = false;
		this.mX1 = x1;
		this.mY1 = y1;
		this.mX2 = x2;
		this.mY2 = y2;
	}
	if(this.mX1 == this.mY1 && this.mX2 == this.mY2) {
		this.linearEasing = true;
	} else {
		if(this.sampleValues == null) {
			this.sampleValues = [];
		}
		var _g = 0;
		var _g1 = ceramic_BezierEasing.SPLINE_TABLE_SIZE;
		while(_g < _g1) {
			var i = _g++;
			var aT = i * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var aA1 = this.mX1;
			var aA2 = this.mX2;
			this.sampleValues[i] = (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
		}
	}
};
$hxClasses["ceramic.BezierEasing"] = ceramic_BezierEasing;
ceramic_BezierEasing.__name__ = "ceramic.BezierEasing";
ceramic_BezierEasing.quadraticToCubicCP1 = function(p) {
	return ceramic_BezierEasing.TWO_THIRD * p;
};
ceramic_BezierEasing.quadraticToCubicCP2 = function(p) {
	return 1.0 + ceramic_BezierEasing.TWO_THIRD * (p - 1.0);
};
ceramic_BezierEasing.cacheKey = function(x1,y1,x2,y2) {
	var floatKey = x1 * 100 + y1 * 1000 + x2 * 10000 + y2 * 100000;
	return floatKey | 0;
};
ceramic_BezierEasing.clearCache = function() {
	ceramic_BezierEasing.cachedInstances = null;
	ceramic_BezierEasing.numCachedInstances = 0;
};
ceramic_BezierEasing.get = function(x1,y1,x2,y2) {
	var quadratic = x2 == null || y2 == null;
	var _x1 = quadratic ? ceramic_BezierEasing.TWO_THIRD * x1 : x1;
	var _y1 = quadratic ? ceramic_BezierEasing.TWO_THIRD * y1 : y1;
	var _x2 = quadratic ? 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0) : x2;
	var _y2 = quadratic ? 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0) : y2;
	var result = null;
	var floatKey = _x1 * 100 + _y1 * 1000 + _x2 * 10000 + _y2 * 100000;
	var key = floatKey | 0;
	if(ceramic_BezierEasing.cachedInstances == null) {
		ceramic_BezierEasing.cachedInstances = new ceramic_IntMap();
	}
	var _this = ceramic_BezierEasing.cachedInstances;
	var value = _this.keys.h[key | 0];
	var index = value != null ? value : 0;
	var list = index >= 2 ? _this.values[index - 2] : null;
	if(list == null) {
		if(ceramic_BezierEasing.numCachedInstances >= ceramic_BezierEasing.CACHE_SIZE) {
			ceramic_BezierEasing.clearCache();
		}
		result = new ceramic_BezierEasing(_x1,_y1,_x2,_y2);
		ceramic_BezierEasing.cachedInstances.set(key,[result]);
		ceramic_BezierEasing.numCachedInstances++;
	} else {
		var i = list.length - 1;
		while(i >= 0) {
			var instance = list[i];
			if(instance.mX1 == _x1 && instance.mY1 == _y1 && instance.mX2 == _x2 && instance.mY2 == _y2) {
				result = instance;
				break;
			}
			--i;
		}
		if(result == null) {
			result = new ceramic_BezierEasing(x1,y1,x2,y2);
			result.cached = true;
			list.push(result);
		}
	}
	return result;
};
ceramic_BezierEasing.prototype = {
	configure: function(x1,y1,x2,y2) {
		if(this.cached) {
			this.removeFromCache(this.mX1,this.mY1,this.mX2,this.mY2);
		}
		if(x2 == null || y2 == null) {
			this.quadratic = true;
			this.mQuadraticX1 = x1;
			this.mQuadraticX2 = x2;
			this.mX1 = ceramic_BezierEasing.TWO_THIRD * x1;
			this.mY1 = ceramic_BezierEasing.TWO_THIRD * y1;
			this.mX2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0);
			this.mY2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0);
		} else {
			this.quadratic = false;
			this.mX1 = x1;
			this.mY1 = y1;
			this.mX2 = x2;
			this.mY2 = y2;
		}
		if(this.mX1 == this.mY1 && this.mX2 == this.mY2) {
			this.linearEasing = true;
		} else {
			if(this.sampleValues == null) {
				this.sampleValues = [];
			}
			var _g = 0;
			var _g1 = ceramic_BezierEasing.SPLINE_TABLE_SIZE;
			while(_g < _g1) {
				var i = _g++;
				var aT = i * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
				var aA1 = this.mX1;
				var aA2 = this.mX2;
				this.sampleValues[i] = (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
			}
		}
	}
	,ease: function(x) {
		if(x == 0) {
			return 0;
		}
		if(x == 1) {
			return 1;
		}
		var intervalStart = 0.0;
		var currentSample = 1;
		var lastSample = ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1;
		while(currentSample != lastSample && this.sampleValues[currentSample] <= x) {
			intervalStart += ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			++currentSample;
		}
		--currentSample;
		var dist = (x - this.sampleValues[currentSample]) / (this.sampleValues[currentSample + 1] - this.sampleValues[currentSample]);
		var guessForT = intervalStart + dist * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
		var aA1 = this.mX1;
		var aA2 = this.mX2;
		var initialSlope = 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * guessForT * guessForT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * guessForT + 3.0 * aA1;
		var aT;
		if(initialSlope >= ceramic_BezierEasing.NEWTON_MIN_SLOPE) {
			aT = this.newtonRaphsonIterate(x,guessForT,this.mX1,this.mX2);
		} else if(initialSlope == 0.0) {
			aT = guessForT;
		} else {
			var aA = intervalStart;
			var aB = intervalStart + ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var mX1 = this.mX1;
			var mX2 = this.mX2;
			var currentX;
			var currentT;
			var i = 0;
			while(true) {
				currentT = aA + (aB - aA) / 2.0;
				currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - x;
				if(currentX > 0.0) {
					aB = currentT;
				} else {
					aA = currentT;
				}
				if(!(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS)) {
					break;
				}
			}
			aT = currentT;
		}
		var aA1 = this.mY1;
		var aA2 = this.mY2;
		return (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
	}
	,getTForX: function(aX) {
		var intervalStart = 0.0;
		var currentSample = 1;
		var lastSample = ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1;
		while(currentSample != lastSample && this.sampleValues[currentSample] <= aX) {
			intervalStart += ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			++currentSample;
		}
		--currentSample;
		var dist = (aX - this.sampleValues[currentSample]) / (this.sampleValues[currentSample + 1] - this.sampleValues[currentSample]);
		var guessForT = intervalStart + dist * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
		var aA1 = this.mX1;
		var aA2 = this.mX2;
		var initialSlope = 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * guessForT * guessForT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * guessForT + 3.0 * aA1;
		if(initialSlope >= ceramic_BezierEasing.NEWTON_MIN_SLOPE) {
			return this.newtonRaphsonIterate(aX,guessForT,this.mX1,this.mX2);
		} else if(initialSlope == 0.0) {
			return guessForT;
		} else {
			var aA = intervalStart;
			var aB = intervalStart + ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var mX1 = this.mX1;
			var mX2 = this.mX2;
			var currentX;
			var currentT;
			var i = 0;
			while(true) {
				currentT = aA + (aB - aA) / 2.0;
				currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - aX;
				if(currentX > 0.0) {
					aB = currentT;
				} else {
					aA = currentT;
				}
				if(!(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS)) {
					break;
				}
			}
			return currentT;
		}
	}
	,calcBezier: function(aT,aA1,aA2) {
		return (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
	}
	,getSlope: function(aT,aA1,aA2) {
		return 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * aT * aT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * aT + 3.0 * aA1;
	}
	,binarySubdivide: function(aX,aA,aB,mX1,mX2) {
		var currentX;
		var currentT;
		var i = 0;
		while(true) {
			currentT = aA + (aB - aA) / 2.0;
			currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - aX;
			if(currentX > 0.0) {
				aB = currentT;
			} else {
				aA = currentT;
			}
			if(!(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS)) {
				break;
			}
		}
		return currentT;
	}
	,newtonRaphsonIterate: function(aX,aGuessT,mX1,mX2) {
		var _g = 0;
		var _g1 = ceramic_BezierEasing.NEWTON_ITERATIONS;
		while(_g < _g1) {
			var i = _g++;
			var currentSlope = 3.0 * (1.0 - 3.0 * mX2 + 3.0 * mX1) * aGuessT * aGuessT + 2.0 * (3.0 * mX2 - 6.0 * mX1) * aGuessT + 3.0 * mX1;
			if(currentSlope == 0.0) {
				return aGuessT;
			}
			var currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * aGuessT + (3.0 * mX2 - 6.0 * mX1)) * aGuessT + 3.0 * mX1) * aGuessT - aX;
			aGuessT -= currentX / currentSlope;
		}
		return aGuessT;
	}
	,A: function(aA1,aA2) {
		return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	}
	,B: function(aA1,aA2) {
		return 3.0 * aA2 - 6.0 * aA1;
	}
	,C: function(aA1) {
		return 3.0 * aA1;
	}
	,removeFromCache: function(x1,y1,x2,y2) {
		this.cached = false;
		var floatKey = x1 * 100 + y1 * 1000 + x2 * 10000 + y2 * 100000;
		var key = floatKey | 0;
		if(ceramic_BezierEasing.cachedInstances != null) {
			var _this = ceramic_BezierEasing.cachedInstances;
			var value = _this.keys.h[key | 0];
			var index = value != null ? value : 0;
			var list = index >= 2 ? _this.values[index - 2] : null;
			if(list != null) {
				if(list.length == 1 && list[0] == this) {
					ceramic_BezierEasing.cachedInstances.remove(key);
				} else {
					HxOverrides.remove(list,this);
				}
			}
		}
	}
	,__class__: ceramic_BezierEasing
};
var ceramic_BinaryAsset = function(name,options) {
	this.unobservedBytes = null;
	this.bytesAutoruns = null;
	ceramic_Asset.call(this,"binary",name,options);
};
$hxClasses["ceramic.BinaryAsset"] = ceramic_BinaryAsset;
ceramic_BinaryAsset.__name__ = "ceramic.BinaryAsset";
ceramic_BinaryAsset.__super__ = ceramic_Asset;
ceramic_BinaryAsset.prototype = $extend(ceramic_Asset.prototype,{
	get_bytes: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.bytesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.bytesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedBytes;
	}
	,set_bytes: function(bytes) {
		var prevValue = this.unobservedBytes;
		this.unobservedBytes = bytes;
		if(prevValue == bytes) {
			return bytes;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitBytesChange(bytes,prevValue);
		var fieldAutoruns = this.bytesAutoruns;
		if(fieldAutoruns != null) {
			this.bytesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return bytes;
	}
	,invalidateBytes: function() {
		var value = this.unobservedBytes;
		this.emitBytesChange(value,value);
		var fieldAutoruns = this.bytesAutoruns;
		if(fieldAutoruns != null) {
			this.bytesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitBytesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBytesChange != null) {
			len += this.__cbOnBytesChange.length;
		}
		if(this.__cbOnceBytesChange != null) {
			len += this.__cbOnceBytesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBytesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBytesChange[ii];
					++i;
				}
			}
			if(this.__cbOnceBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBytesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBytesChange[ii];
					var unbind = this.__cbOnceOwnerUnbindBytesChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBytesChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBytesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bytesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBytesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBytesChange == null) {
				this.__cbOnOwnerUnbindBytesChange = [];
			}
			this.__cbOnOwnerUnbindBytesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBytesChange == null) {
				this.__cbOnOwnerUnbindBytesChange = [];
			}
			this.__cbOnOwnerUnbindBytesChange.push(null);
		}
		if(this.__cbOnBytesChange == null) {
			this.__cbOnBytesChange = [];
		}
		this.__cbOnBytesChange.push(handleCurrentPrevious);
	}
	,onceBytesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bytesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBytesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBytesChange == null) {
				this.__cbOnceOwnerUnbindBytesChange = [];
			}
			this.__cbOnceOwnerUnbindBytesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBytesChange == null) {
				this.__cbOnceOwnerUnbindBytesChange = [];
			}
			this.__cbOnceOwnerUnbindBytesChange.push(null);
		}
		if(this.__cbOnceBytesChange == null) {
			this.__cbOnceBytesChange = [];
		}
		this.__cbOnceBytesChange.push(handleCurrentPrevious);
	}
	,offBytesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBytesChange != null) {
				index = this.__cbOnBytesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBytesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBytesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBytesChange.splice(index,1);
				}
			}
			if(this.__cbOnceBytesChange != null) {
				index = this.__cbOnceBytesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBytesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBytesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBytesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBytesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBytesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBytesChange = null;
			}
			if(this.__cbOnceOwnerUnbindBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBytesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBytesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBytesChange = null;
			}
			this.__cbOnBytesChange = null;
			this.__cbOnceBytesChange = null;
		}
	}
	,listensBytesChange: function() {
		if(!(this.__cbOnBytesChange != null && this.__cbOnBytesChange.length > 0)) {
			if(this.__cbOnceBytesChange != null) {
				return this.__cbOnceBytesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load binary asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/BinaryAsset.hx", lineNumber : 21, className : "ceramic.BinaryAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load binary " + backendPath,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/BinaryAsset.hx", lineNumber : 36, className : "ceramic.BinaryAsset", methodName : "load"});
		ceramic_App.app.backend.binaries.load(realPath,null,function(bytes) {
			if(bytes != null) {
				_gthis.set_bytes(bytes);
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load binary at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/BinaryAsset.hx", lineNumber : 46, className : "ceramic.BinaryAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload binary (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/BinaryAsset.hx", lineNumber : 69, className : "ceramic.BinaryAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_bytes(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offBytesChange();
	}
	,__class__: ceramic_BinaryAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_bytes:"set_bytes",get_bytes:"get_bytes"})
});
var ceramic_BitmapFont = function(fontData,pages) {
	this.preRenderedPages = null;
	this.pageShaders = null;
	this.pages = new haxe_ds_IntMap();
	ceramic_Entity.call(this);
	this.set_fontData(fontData);
	if(fontData == null) {
		throw haxe_Exception.thrown("BitmapFont: fontData is null");
	}
	if(pages == null) {
		throw haxe_Exception.thrown("BitmapFont: pages is null");
	}
	if(fontData.distanceField != null) {
		this.pageShaders = new haxe_ds_IntMap();
	}
	var _g = 0;
	var _g1 = fontData.pages;
	while(_g < _g1.length) {
		var pageInfo = _g1[_g];
		++_g;
		var texture = pages.h[pageInfo.file];
		if(texture == null) {
			throw haxe_Exception.thrown("BitmapFont: missing texture for file " + pageInfo.file);
		}
		this.pages.h[pageInfo.id] = texture;
		if(fontData.distanceField != null) {
			var shader = ceramic_App.app.assets.shader("shader:msdf").clone();
			var _this = ceramic_App.app.backend.shaders;
			shader.backendItem.uniforms.setFloat("pxRange",fontData.distanceField.distanceRange);
			var _this1 = ceramic_App.app.backend.shaders;
			shader.backendItem.uniforms.setVector2("texSize",texture.width * texture.density,texture.height * texture.density);
			this.pageShaders.h[pageInfo.id] = shader;
		}
	}
};
$hxClasses["ceramic.BitmapFont"] = ceramic_BitmapFont;
ceramic_BitmapFont.__name__ = "ceramic.BitmapFont";
ceramic_BitmapFont.__super__ = ceramic_Entity;
ceramic_BitmapFont.prototype = $extend(ceramic_Entity.prototype,{
	set_fontData: function(fontData) {
		this.fontData = fontData;
		if(fontData != null) {
			this.spaceChar = fontData.chars.h[32];
			if(fontData.chars.h[160] == null) {
				fontData.chars.h[160] = this.spaceChar;
			}
		}
		return fontData;
	}
	,get_face: function() {
		return this.fontData.face;
	}
	,set_face: function(face) {
		return this.fontData.face = face;
	}
	,get_pointSize: function() {
		return this.fontData.pointSize;
	}
	,set_pointSize: function(pointSize) {
		return this.fontData.pointSize = pointSize;
	}
	,get_baseSize: function() {
		return this.fontData.baseSize;
	}
	,set_baseSize: function(baseSize) {
		return this.fontData.baseSize = baseSize;
	}
	,get_chars: function() {
		return this.fontData.chars;
	}
	,set_chars: function(chars) {
		return this.fontData.chars = chars;
	}
	,get_charCount: function() {
		return this.fontData.charCount;
	}
	,set_charCount: function(charCount) {
		return this.fontData.charCount = charCount;
	}
	,get_lineHeight: function() {
		return this.fontData.lineHeight;
	}
	,set_lineHeight: function(lineHeight) {
		return this.fontData.lineHeight = lineHeight;
	}
	,get_kernings: function() {
		return this.fontData.kernings;
	}
	,set_kernings: function(kernings) {
		return this.fontData.kernings = kernings;
	}
	,get_msdf: function() {
		if(this.fontData.distanceField != null) {
			return this.fontData.distanceField.fieldType == "msdf";
		} else {
			return false;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		if(this.pages != null) {
			var texture = this.pages.iterator();
			while(texture.hasNext()) {
				var texture1 = texture.next();
				texture1.destroy();
			}
			this.pages = null;
		}
		if(this.pageShaders != null) {
			var shader = this.pageShaders.iterator();
			while(shader.hasNext()) {
				var shader1 = shader.next();
				shader1.destroy();
			}
			this.pageShaders = null;
		}
		if(this.preRenderedPages != null) {
			var renderedForSize = this.preRenderedPages.iterator();
			while(renderedForSize.hasNext()) {
				var renderedForSize1 = renderedForSize.next();
				var texture = renderedForSize1.iterator();
				while(texture.hasNext()) {
					var texture1 = texture.next();
					texture1.destroy();
				}
			}
			this.preRenderedPages = null;
		}
	}
	,needsToPreRenderAtSize: function(pixelSize) {
		if(this.preRenderedPages == null || !this.preRenderedPages.h.hasOwnProperty(pixelSize)) {
			return true;
		}
		var preRenderedForSize = this.preRenderedPages.h[pixelSize];
		var id = this.pages.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(!preRenderedForSize.h.hasOwnProperty(id1)) {
				return true;
			}
		}
		return false;
	}
	,preRenderAtSize: function(pixelSize,done) {
		var numPending = 0;
		var id = this.pages.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			numPending += 1;
			this.preRenderPage(id1,pixelSize,function() {
				numPending -= 1;
				if(numPending == 0) {
					done();
					done = null;
				}
			});
		}
	}
	,preRenderPage: function(id,pixelsSize,done) {
		var _gthis = this;
		if(this.preRenderedPages == null) {
			this.preRenderedPages = new haxe_ds_IntMap();
		}
		var renderedForSize = this.preRenderedPages.h[pixelsSize];
		var originalTexture = this.pages.h[id];
		if(originalTexture == null) {
			throw haxe_Exception.thrown("Invalid bitmap font page with id " + id);
		}
		var sizeFactor = pixelsSize / this.fontData.pointSize;
		var scaledWidth = Math.ceil(originalTexture.width * originalTexture.density * sizeFactor);
		var scaledHeight = Math.ceil(originalTexture.width * originalTexture.density * sizeFactor);
		var renderTexture = new ceramic_RenderTexture(scaledWidth,scaledHeight,1);
		renderTexture.clearOnRender = true;
		renderTexture.autoRender = false;
		var quad = new ceramic_Quad();
		if(quad.texture != originalTexture) {
			if(quad.texture != null) {
				quad.texture.offDestroy($bind(quad,quad.textureDestroyed));
				if(quad.texture.asset != null) {
					quad.texture.asset.release();
				}
			}
			quad.texture = originalTexture;
			if(originalTexture == null) {
				quad.frameX = -1;
				quad.frameY = -1;
				if(quad.frameWidth != -1) {
					quad.frameWidth = -1;
				}
				if(quad.frameHeight != -1) {
					quad.frameHeight = -1;
				}
			} else if(quad.tile != null) {
				quad.frameX = quad.tile.frameX;
				quad.frameY = quad.tile.frameY;
				var frameWidth = quad.tile.frameWidth;
				if(quad.frameWidth != frameWidth) {
					quad.frameWidth = frameWidth;
					if(frameWidth != -1) {
						quad.set_width(frameWidth);
					}
				}
				var frameHeight = quad.tile.frameHeight;
				if(quad.frameHeight != frameHeight) {
					quad.frameHeight = frameHeight;
					if(frameHeight != -1) {
						quad.set_height(frameHeight);
					}
				}
			} else {
				quad.frameX = 0;
				quad.frameY = 0;
				var frameWidth = originalTexture.width;
				if(quad.frameWidth != frameWidth) {
					quad.frameWidth = frameWidth;
					if(frameWidth != -1) {
						quad.set_width(frameWidth);
					}
				}
				var frameHeight = originalTexture.height;
				if(quad.frameHeight != frameHeight) {
					quad.frameHeight = frameHeight;
					if(frameHeight != -1) {
						quad.set_height(frameHeight);
					}
				}
				originalTexture.onDestroy(quad,$bind(quad,quad.textureDestroyed));
				if(originalTexture.asset != null) {
					originalTexture.asset.retain();
				}
			}
		}
		quad.set_width(scaledWidth);
		quad.set_height(scaledHeight);
		quad.set_shader(this.pageShaders != null ? this.pageShaders.h[id] : null);
		quad.set_visible(false);
		if(renderedForSize != null && renderedForSize.h.hasOwnProperty(id)) {
			renderedForSize.h[id].destroy();
		}
		renderTexture.stamp(quad,function() {
			quad.destroy();
			quad = null;
			if(renderedForSize == null) {
				renderedForSize = new haxe_ds_IntMap();
				_gthis.preRenderedPages.h[pixelsSize] = renderedForSize;
			}
			renderedForSize.h[id] = renderTexture;
			done();
			done = null;
		});
	}
	,kerning: function(first,second) {
		var map = this.fontData.kernings.h[first];
		if(map != null && map.h.hasOwnProperty(second)) {
			return map.h[second];
		}
		return 0;
	}
	,__class__: ceramic_BitmapFont
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_msdf:"get_msdf",set_kernings:"set_kernings",get_kernings:"get_kernings",set_lineHeight:"set_lineHeight",get_lineHeight:"get_lineHeight",set_charCount:"set_charCount",get_charCount:"get_charCount",set_chars:"set_chars",get_chars:"get_chars",set_baseSize:"set_baseSize",get_baseSize:"get_baseSize",set_pointSize:"set_pointSize",get_pointSize:"get_pointSize",set_face:"set_face",get_face:"get_face",set_fontData:"set_fontData"})
});
var ceramic_BitmapFontCharacter = function(id,x,y,width,height,xOffset,yOffset,xAdvance,page) {
	this.id = id;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.xOffset = xOffset;
	this.yOffset = yOffset;
	this.xAdvance = xAdvance;
	this.page = page;
};
$hxClasses["ceramic.BitmapFontCharacter"] = ceramic_BitmapFontCharacter;
ceramic_BitmapFontCharacter.__name__ = "ceramic.BitmapFontCharacter";
ceramic_BitmapFontCharacter.prototype = {
	__class__: ceramic_BitmapFontCharacter
};
var ceramic_BitmapFontData = function(face,pointSize,baseSize,chars,charCount,distanceField,pages,lineHeight,kernings) {
	this.face = face;
	this.pointSize = pointSize;
	this.baseSize = baseSize;
	this.chars = chars;
	this.charCount = charCount;
	this.distanceField = distanceField;
	this.pages = pages;
	this.lineHeight = lineHeight;
	this.kernings = kernings;
};
$hxClasses["ceramic.BitmapFontData"] = ceramic_BitmapFontData;
ceramic_BitmapFontData.__name__ = "ceramic.BitmapFontData";
ceramic_BitmapFontData.prototype = {
	__class__: ceramic_BitmapFontData
};
var ceramic_BitmapFontDistanceFieldData = function(fieldType,distanceRange) {
	this.fieldType = fieldType;
	this.distanceRange = distanceRange;
};
$hxClasses["ceramic.BitmapFontDistanceFieldData"] = ceramic_BitmapFontDistanceFieldData;
ceramic_BitmapFontDistanceFieldData.__name__ = "ceramic.BitmapFontDistanceFieldData";
ceramic_BitmapFontDistanceFieldData.prototype = {
	__class__: ceramic_BitmapFontDistanceFieldData
};
var ceramic_BitmapFontParser = function() { };
$hxClasses["ceramic.BitmapFontParser"] = ceramic_BitmapFontParser;
ceramic_BitmapFontParser.__name__ = "ceramic.BitmapFontParser";
ceramic_BitmapFontParser.parse = function(rawFontData) {
	if(rawFontData.length == 0) {
		throw haxe_Exception.thrown("BitmapFont: fontData is 0 length");
	}
	var info = new ceramic_BitmapFontData(null,0,0,new haxe_ds_IntMap(),0,null,[],0,new haxe_ds_IntMap());
	var lines = StringTools.replace(StringTools.replace(rawFontData,"\r",""),"\t"," ").split("\n");
	if(lines.length == 0) {
		throw haxe_Exception.thrown("BitmapFont: invalid font data specified for parser.");
	}
	var first = lines[0];
	if(HxOverrides.substr(StringTools.ltrim(first),0,4) != "info") {
		throw haxe_Exception.thrown("BitmapFont: invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.");
	}
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		ceramic_BitmapFontParser.parseLine(line,info);
	}
	lines = null;
	return info;
};
ceramic_BitmapFontParser.parseLine = function(line,info) {
	var items = new haxe_ds_StringMap();
	var firstToken = ceramic_BitmapFontParser.extractLineTokens(line,items);
	switch(firstToken) {
	case "char":
		var char = new ceramic_BitmapFontCharacter(Std.parseInt(items.h["id"]),parseFloat(items.h["x"]),parseFloat(items.h["y"]),parseFloat(items.h["width"]),parseFloat(items.h["height"]),parseFloat(items.h["xoffset"]),parseFloat(items.h["yoffset"]),parseFloat(items.h["xadvance"]),Std.parseInt(items.h["page"]));
		info.chars.h[char.id] = char;
		break;
	case "chars":
		info.charCount = Std.parseInt(items.h["count"]);
		break;
	case "common":
		info.lineHeight = parseFloat(items.h["lineHeight"]);
		info.baseSize = parseFloat(items.h["base"]);
		break;
	case "distanceField":
		var fieldType = items.h["fieldType"];
		var distanceRange = Std.parseInt(items.h["distanceRange"]);
		info.distanceField = new ceramic_BitmapFontDistanceFieldData(fieldType,distanceRange);
		break;
	case "info":
		var s = items.h["face"];
		var len = s.length;
		if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
			s = s.substring(1,len - 1);
		}
		info.face = s;
		info.pointSize = parseFloat(items.h["size"]);
		break;
	case "kerning":
		var first = Std.parseInt(items.h["first"]);
		var second = Std.parseInt(items.h["second"]);
		var amount = parseFloat(items.h["amount"]);
		var map = info.kernings.h[first];
		if(map == null) {
			map = new haxe_ds_IntMap();
			info.kernings.h[first] = map;
		}
		map.h[second] = amount;
		break;
	case "page":
		var s = items.h["file"];
		var len = s.length;
		if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
			s = s.substring(1,len - 1);
		}
		info.pages.push({ id : Std.parseInt(items.h["id"]), file : StringTools.trim(s)});
		break;
	default:
	}
};
ceramic_BitmapFontParser.extractLineTokens = function(line,map) {
	var i = 0;
	var len = line.length;
	var firstToken = null;
	var keyToken = null;
	var nextToken = null;
	var inQuotes = false;
	while(i < len) {
		var c = HxOverrides.cca(line,i);
		if(inQuotes) {
			if(c == 92) {
				c = HxOverrides.cca(line,i);
				++i;
			} else if(c == 34) {
				inQuotes = false;
			}
			if(nextToken == null) {
				throw haxe_Exception.thrown("Invalid bitmap font line: " + line);
			}
			nextToken.b += Std.string(line.charAt(i));
		} else if(c == 32) {
			if(nextToken != null) {
				if(firstToken == null) {
					firstToken = nextToken.b;
				} else if(keyToken == null) {
					keyToken = nextToken.b;
					map.h[keyToken] = null;
				} else {
					map.h[keyToken] = nextToken.b;
				}
				keyToken = null;
				nextToken = null;
			}
		} else if(keyToken == null && c == 61) {
			if(nextToken == null) {
				throw haxe_Exception.thrown("Invalid bitmap font line: " + line);
			}
			keyToken = nextToken.b;
			nextToken = null;
		} else {
			if(c == 34) {
				inQuotes = true;
			}
			if(nextToken == null) {
				nextToken = new StringBuf();
			}
			nextToken.b += Std.string(line.charAt(i));
		}
		++i;
	}
	if(nextToken != null) {
		if(firstToken == null) {
			firstToken = nextToken.b;
		} else if(keyToken == null) {
			keyToken = nextToken.b;
			map.h[keyToken] = null;
		} else {
			map.h[keyToken] = nextToken.b;
		}
		keyToken = null;
		nextToken = null;
	}
	return firstToken;
};
ceramic_BitmapFontParser.unquote = function(s) {
	var len = s.length;
	if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
		s = s.substring(1,len - 1);
	}
	return s;
};
var ceramic_Collection = {};
ceramic_Collection._new = function() {
	var this1 = new ceramic_CollectionImpl();
	return this1;
};
ceramic_Collection.arrayAccess = function(this1,index) {
	return this1.getByIndex(index);
};
ceramic_Collection.randomElement = function(this1) {
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	var array = this1.entries;
	return array[Math.floor(Math.random() * 0.99999 * array.length)];
};
ceramic_Collection.randomElementExcept = function(this1,except,unsafe) {
	if(unsafe == null) {
		unsafe = false;
	}
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	return ceramic_Extensions.randomElementExcept(this1.entries,except,unsafe);
};
ceramic_Collection.randomElementMatchingValidator = function(this1,validator) {
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	return ceramic_Extensions.randomElementMatchingValidator(this1.entries,validator);
};
var ceramic_CollectionImpl = function() {
	this.combinedCollectionLastChanges = null;
	this.combinedCollections = null;
	this.filter = null;
	this.byId = null;
	this.entriesDirty = false;
	this.indexDirty = true;
	this.entries = [];
	this.lastChange = 0;
	this.internalId = ceramic_CollectionImpl._nextInternalId++;
};
$hxClasses["ceramic.CollectionImpl"] = ceramic_CollectionImpl;
ceramic_CollectionImpl.__name__ = "ceramic.CollectionImpl";
ceramic_CollectionImpl.__interfaces__ = [tracker_Events];
ceramic_CollectionImpl.prototype = {
	get_length: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries.length;
	}
	,pushAll: function(entries) {
		var _g = 0;
		while(_g < entries.length) {
			var entry = entries[_g];
			++_g;
			this.entries.push(entry);
		}
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,clear: function() {
		var len = this.entries.length;
		if(len > 0) {
			this.entries.splice(0,len);
		}
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,push: function(entry) {
		this.entries.push(entry);
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,remove: function(entry) {
		HxOverrides.remove(this.entries,entry);
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,synchronize: function() {
		if(this.entriesDirty) {
			this.computeEntries();
		}
		if(this.indexDirty) {
			this.computeIndex();
		}
	}
	,get: function(id) {
		if(id == null) {
			throw haxe_Exception.thrown("Cannot get a collection entry with a null id!");
		}
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		if(this.indexDirty) {
			this.computeIndex();
		}
		return this.byId.h[id];
	}
	,getByIndex: function(index) {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries[index];
	}
	,indexOfId: function(id) {
		var entry = this.get(id);
		if(entry == null) {
			return -1;
		}
		return this.indexOf(entry);
	}
	,indexOf: function(entry) {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries.indexOf(entry);
	}
	,iterator: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return new haxe_iterators_ArrayIterator(this.entries);
	}
	,checkCombined: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
	}
	,computeIndex: function() {
		if(this.entriesDirty) {
			this.computeEntries();
		}
		this.byId = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(this.byId.h,entry.id)) {
				this.byId.h[entry.id] = entry;
			}
		}
		this.indexDirty = false;
	}
	,computeEntries: function() {
		this.entries = [];
		var _g = 0;
		var _g1 = this.combinedCollections.length;
		while(_g < _g1) {
			var i = _g++;
			var collection = this.combinedCollections[i];
			if(collection.combinedCollections != null) {
				if(ceramic_CollectionImpl._lastCheckedCombined != collection) {
					var _g2 = 0;
					var _g3 = collection.combinedCollections.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var collection1 = collection.combinedCollections[i1];
						var collectionLastChange = collection.combinedCollectionLastChanges[i1];
						if(collectionLastChange != collection1.lastChange) {
							collection.entriesDirty = true;
							break;
						}
					}
					ceramic_CollectionImpl._lastCheckedCombined = collection;
				}
			}
			if(collection.entriesDirty) {
				collection.computeEntries();
			}
			var _g_current = 0;
			var _g_array = collection.entries;
			while(_g_current < _g_array.length) {
				var entry = _g_array[_g_current++];
				this.entries.push(entry);
			}
			this.combinedCollectionLastChanges[i] = collection.lastChange;
		}
		if(this.filter != null) {
			this.entries = this.filter(this.entries);
		}
		this.entriesDirty = false;
		this.indexDirty = true;
		if(ceramic_CollectionImpl._lastCheckedCombined != this) {
			ceramic_CollectionImpl._lastCheckedCombined = null;
		}
	}
	,__class__: ceramic_CollectionImpl
	,__properties__: {get_length:"get_length"}
};
var ceramic_CollectionEntry = function(id,name) {
	this.index = ceramic_CollectionEntry._nextIndex++;
	this.id = id != null ? id : "id" + ceramic_CollectionEntry._nextId++;
	this.name = name;
};
$hxClasses["ceramic.CollectionEntry"] = ceramic_CollectionEntry;
ceramic_CollectionEntry.__name__ = "ceramic.CollectionEntry";
ceramic_CollectionEntry.prototype = {
	setRawData: function(data) {
		var clazz = js_Boot.getClass(this);
		var classPath = clazz.__name__;
		var types = ceramic_FieldInfo.types(classPath);
		var h = types.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var type = types.h[key];
			if(Object.prototype.hasOwnProperty.call(data,key)) {
				var rawValue = Reflect.field(data,key);
				var value = null;
				if(this.setRawField(key,rawValue)) {
					continue;
				}
				if(type == null) {
					var rawValue1 = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
					var resolvedEnum = $hxEnums[type];
					if(resolvedEnum != null) {
						var _g = 0;
						var _this = resolvedEnum.__constructs__;
						var result = new Array(_this.length);
						var _g1 = 0;
						var _g2 = _this.length;
						while(_g1 < _g2) {
							var i = _g1++;
							result[i] = _this[i]._hx_name;
						}
						var _g3 = result;
						while(_g < _g3.length) {
							var name = _g3[_g];
							++_g;
							if(name.toLowerCase() == rawValue1) {
								value = Type.createEnum(resolvedEnum,name);
								break;
							}
						}
					}
				} else {
					switch(type) {
					case "Bool":
						if(typeof(rawValue) == "boolean") {
							value = rawValue;
						} else {
							rawValue = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
							if(rawValue != "" && rawValue != "0" && rawValue != "false" && rawValue != "no") {
								value = true;
							} else {
								value = false;
							}
						}
						break;
					case "Float":
						if(typeof(rawValue) == "number" && ((rawValue | 0) === rawValue) || typeof(rawValue) == "number") {
							value = rawValue;
						} else {
							value = parseFloat(StringTools.replace("" + Std.string(rawValue),",","."));
							if(value == null || isNaN(value)) {
								value = 0.0;
							}
						}
						break;
					case "String":
						value = rawValue == null || rawValue == "null" ? null : "" + Std.string(rawValue);
						break;
					case "Int":case "ceramic.Color":
						if(typeof(rawValue) == "number" && ((rawValue | 0) === rawValue) || typeof(rawValue) == "number") {
							value = rawValue | 0;
						} else {
							value = Std.parseInt("" + Std.string(rawValue));
							if(value == null || isNaN(value)) {
								value = 0;
							}
						}
						break;
					default:
						var rawValue2 = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
						var resolvedEnum1 = $hxEnums[type];
						if(resolvedEnum1 != null) {
							var _g4 = 0;
							var _this1 = resolvedEnum1.__constructs__;
							var result1 = new Array(_this1.length);
							var _g5 = 0;
							var _g6 = _this1.length;
							while(_g5 < _g6) {
								var i1 = _g5++;
								result1[i1] = _this1[i1]._hx_name;
							}
							var _g7 = result1;
							while(_g4 < _g7.length) {
								var name1 = _g7[_g4];
								++_g4;
								if(name1.toLowerCase() == rawValue2) {
									value = Type.createEnum(resolvedEnum1,name1);
									break;
								}
							}
						}
					}
				}
				this[key] = value;
			}
		}
	}
	,setRawField: function(name,rawValue) {
		return false;
	}
	,__class__: ceramic_CollectionEntry
};
var ceramic_Color = {};
ceramic_Color.__properties__ = {set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_green:"set_green",get_green:"get_green",set_blue:"set_blue",get_blue:"get_blue",set_red:"set_red",get_red:"get_red"};
ceramic_Color.random = function(minSatutation,minBrightness) {
	if(minBrightness == null) {
		minBrightness = 0.5;
	}
	if(minSatutation == null) {
		minSatutation = 0.5;
	}
	var hue = Math.random() * 360;
	var saturation = Math.random() * (1.0 - minSatutation) + minSatutation;
	var brightness = Math.random() * (1.0 - minBrightness) + minBrightness;
	return ceramic_Color.fromHSB(hue,saturation,brightness);
};
ceramic_Color.fromInt = function(value) {
	return ceramic_Color._new(value);
};
ceramic_Color.fromRGB = function(red,green,blue) {
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.fromRGBFloat = function(red,green,blue) {
	var color = ceramic_Color._new();
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	return color;
};
ceramic_Color.fromCMYK = function(cyan,magenta,yellow,black) {
	var color = ceramic_Color._new();
	var value = (1 - cyan) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 65535;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - magenta) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 16711935;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - yellow) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 16776960;
	color |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return color;
};
ceramic_Color.fromHSB = function(hue,saturation,brightness) {
	var color = ceramic_Color._new();
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return color;
};
ceramic_Color.fromHSL = function(hue,saturation,lightness) {
	var color = ceramic_Color._new();
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return color;
};
ceramic_Color.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(StringTools.startsWith(str,"0x")) {
		result = ceramic_Color._new(Std.parseInt(str.substring(0,8)));
	} else if(StringTools.startsWith(str,"#")) {
		var hexColor = "0x" + str.substring(1,7);
		result = ceramic_Color._new(Std.parseInt(hexColor));
	} else {
		str = str.toUpperCase();
		var h = ceramic_Color.colorLookup.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(key.toUpperCase() == str) {
				result = ceramic_Color._new(ceramic_Color.colorLookup.h[key]);
				break;
			}
		}
	}
	return result;
};
ceramic_Color.getHSBColorWheel = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(ceramic_Color.fromHSB(c,1.0,1.0));
	}
	return _g;
};
ceramic_Color.interpolate = function(color1,color2,factor) {
	if(factor == null) {
		factor = 0.5;
	}
	var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
	var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
	var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= 16711935;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= 16776960;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	return color;
};
ceramic_Color.gradient = function(color1,color2,steps,ease) {
	var output = [];
	if(ease == null) {
		ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = steps;
	while(_g < _g1) {
		var step = _g++;
		var factor = ease(step / (steps - 1));
		if(factor == null) {
			factor = 0.5;
		}
		var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
		var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
		var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
		var color = ceramic_Color._new();
		color &= 65535;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= 16711935;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= 16776960;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		output[step] = color;
	}
	return output;
};
ceramic_Color.multiply = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = ceramic_Color._new();
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	return color;
};
ceramic_Color.add = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var blue = (lhs & 255) + (rhs & 255);
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.subtract = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var blue = (lhs & 255) - (rhs & 255);
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.toHexString = function(this1,prefix) {
	if(prefix == null) {
		prefix = true;
	}
	return (prefix ? "0x" : "") + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
ceramic_Color.toWebString = function(this1) {
	var prefix = false;
	if(prefix == null) {
		prefix = true;
	}
	return "#" + ((prefix ? "0x" : "") + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
ceramic_Color.getColorInfo = function(this1) {
	var result = "0x" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2) + "\n";
	result += "Red: " + (this1 >> 16 & 255) + " green: " + (this1 >> 8 & 255) + " blue: " + (this1 & 255) + "\n";
	result += "Hue: " + ceramic_Color.roundDecimal(ceramic_Color.get_hue(this1),2) + " saturation: " + ceramic_Color.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " brightness: " + ceramic_Color.roundDecimal(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " lightness: " + ceramic_Color.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2,2);
	return result;
};
ceramic_Color.getDarkened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - factor);
	var hue = ceramic_Color.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return output;
};
ceramic_Color.getLightened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * factor;
	var hue = ceramic_Color.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return output;
};
ceramic_Color.getInverted = function(this1) {
	var lhs = 16777215;
	var red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var blue = (lhs & 255) - (this1 & 255);
	var color = ceramic_Color._new();
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var output = color;
	return output;
};
ceramic_Color.setRGB = function(this1,red,green,blue) {
	this1 &= 65535;
	this1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	this1 &= 16711935;
	this1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	this1 &= 16776960;
	this1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return this1;
};
ceramic_Color.setRGBFloat = function(this1,red,green,blue) {
	var value = Math.round(red * 255);
	this1 &= 65535;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	this1 &= 16711935;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	this1 &= 16776960;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return this1;
};
ceramic_Color.setCMYK = function(this1,cyan,magenta,yellow,black) {
	var value = (1 - cyan) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 65535;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - magenta) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 16711935;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - yellow) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 16776960;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return this1;
};
ceramic_Color.setHSB = function(this1,hue,saturation,brightness) {
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color.setHSL = function(this1,hue,saturation,lightness) {
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color.setHSChromaMatch = function(this1,hue,saturation,chroma,match) {
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color._new = function(value) {
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
ceramic_Color.get_red = function(this1) {
	return this1 >> 16 & 255;
};
ceramic_Color.get_green = function(this1) {
	return this1 >> 8 & 255;
};
ceramic_Color.get_blue = function(this1) {
	return this1 & 255;
};
ceramic_Color.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
ceramic_Color.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
ceramic_Color.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
ceramic_Color.set_red = function(this1,value) {
	this1 &= 65535;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	return value;
};
ceramic_Color.set_green = function(this1,value) {
	this1 &= 16711935;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	return value;
};
ceramic_Color.set_blue = function(this1,value) {
	this1 &= 16776960;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return value;
};
ceramic_Color.set_redFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 65535;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	return value;
};
ceramic_Color.set_greenFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16711935;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	return value;
};
ceramic_Color.set_blueFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16776960;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return value;
};
ceramic_Color.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.set_cyan = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_magenta = function(this1,value) {
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_yellow = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_black = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
ceramic_Color.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
ceramic_Color.set_hue = function(this1,value) {
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = brightness - chroma;
	var hue = value;
	var chroma1 = chroma;
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_saturation = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * value;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_brightness = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_lightness = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
ceramic_Color.roundDecimal = function(value,precision) {
	var mult = 1;
	var _g = 0;
	var _g1 = precision;
	while(_g < _g1) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(value * mult) / mult;
};
ceramic_Color.bound = function(value,min,max) {
	var lowerBound = min != null && value < min ? min : value;
	if(max != null && lowerBound > max) {
		return max;
	} else {
		return lowerBound;
	}
};
ceramic_Color.toString = function(this1) {
	if(this1 == -1) {
		return "NONE";
	} else {
		return "0x" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
	}
};
ceramic_Color.fromHSLuv = function(hue,saturation,lightness) {
	var color = ceramic_Color._new();
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return color;
};
ceramic_Color.setHSLuv = function(this1,hue,saturation,lightness) {
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return this1;
};
ceramic_Color.getHSLuv = function(this1,result) {
	if(result == null) {
		result = [0,0,0];
	}
	ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
	ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
	ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
	hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
	result[1] *= 0.01;
	result[2] *= 0.01;
	return result;
};
var ceramic_Component = function() { };
$hxClasses["ceramic.Component"] = ceramic_Component;
ceramic_Component.__name__ = "ceramic.Component";
ceramic_Component.__isInterface__ = true;
ceramic_Component.prototype = {
	__class__: ceramic_Component
};
var ceramic_ComputeFps = function(size) {
	if(size == null) {
		size = 10;
	}
	this.fps = 0;
	this.index = 0;
	this.size = size;
	this.frames = [];
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		this.frames.push(0);
	}
};
$hxClasses["ceramic.ComputeFps"] = ceramic_ComputeFps;
ceramic_ComputeFps.__name__ = "ceramic.ComputeFps";
ceramic_ComputeFps.prototype = {
	addFrame: function(delta) {
		this.frames[this.index] = delta;
		this.index = (this.index + 1) % this.size;
		var newFps = 0.0;
		var _g = 0;
		var _g1 = this.size;
		while(_g < _g1) {
			var i = _g++;
			newFps += this.frames[i];
		}
		if(newFps > 0) {
			newFps = this.size / newFps;
		} else {
			newFps = 0;
		}
		this.fps = Math.round(Math.min(999,newFps));
	}
	,__class__: ceramic_ComputeFps
};
var ceramic_ConvertField = function() { };
$hxClasses["ceramic.ConvertField"] = ceramic_ConvertField;
ceramic_ConvertField.__name__ = "ceramic.ConvertField";
ceramic_ConvertField.__isInterface__ = true;
ceramic_ConvertField.prototype = {
	__class__: ceramic_ConvertField
};
var ceramic_ConvertArray = function() {
};
$hxClasses["ceramic.ConvertArray"] = ceramic_ConvertArray;
ceramic_ConvertArray.__name__ = "ceramic.ConvertArray";
ceramic_ConvertArray.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertArray.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = [];
		value = value.concat(basic);
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = [];
		basic = basic.concat(value);
		return basic;
	}
	,__class__: ceramic_ConvertArray
};
var ceramic_ConvertComponentMap = function() {
};
$hxClasses["ceramic.ConvertComponentMap"] = ceramic_ConvertComponentMap;
ceramic_ConvertComponentMap.__name__ = "ceramic.ConvertComponentMap";
ceramic_ConvertComponentMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertComponentMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var initializerName = basic[name];
			ceramic_App.app.logger.error("Not using component initializers anymore. Need to implement event based solution!",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ConvertComponentMap.hx", lineNumber : 38, className : "ceramic.ConvertComponentMap", methodName : "basicToField"});
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		var h = value.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			var component = value.h[name];
			if(component != null && component.initializerName != null) {
				basic[name] = component.initializerName;
			}
		}
		return basic;
	}
	,__class__: ceramic_ConvertComponentMap
};
var ceramic_ConvertFont = function() {
};
$hxClasses["ceramic.ConvertFont"] = ceramic_ConvertFont;
ceramic_ConvertFont.__name__ = "ceramic.ConvertFont";
ceramic_ConvertFont.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertFont.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic != null) {
			if(basic == ceramic_App.app.defaultFont.asset.name) {
				done(ceramic_App.app.defaultFont);
			} else {
				assets.ensureFont(basic,null,function(asset) {
					done(asset != null ? asset.get_font() : null);
				});
			}
		} else {
			done(null);
		}
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null || value.asset == null) {
			return null;
		} else {
			return value.asset.name;
		}
	}
	,__class__: ceramic_ConvertFont
};
var ceramic_ConvertFragmentData = function() {
};
$hxClasses["ceramic.ConvertFragmentData"] = ceramic_ConvertFragmentData;
ceramic_ConvertFragmentData.__name__ = "ceramic.ConvertFragmentData";
ceramic_ConvertFragmentData.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertFragmentData.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		done(basic);
	}
	,fieldToBasic: function(instance,field,value) {
		return value;
	}
	,__class__: ceramic_ConvertFragmentData
};
var ceramic_ConvertIntBoolMap = function() {
};
$hxClasses["ceramic.ConvertIntBoolMap"] = ceramic_ConvertIntBoolMap;
ceramic_ConvertIntBoolMap.__name__ = "ceramic.ConvertIntBoolMap";
ceramic_ConvertIntBoolMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertIntBoolMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var this1 = new haxe_ds_IntMap();
		var value = this1;
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var value1 = Reflect.field(basic,key);
			value.h[Std.parseInt(key) | 0] = value1;
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		ceramic_App.app.logger.warning("ConvertIntBoolMap.fieldToBasic() not implemented!",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ConvertIntBoolMap.hx", lineNumber : 47, className : "ceramic.ConvertIntBoolMap", methodName : "fieldToBasic"});
		return basic;
	}
	,__class__: ceramic_ConvertIntBoolMap
};
var ceramic_ConvertMap = function() {
};
$hxClasses["ceramic.ConvertMap"] = ceramic_ConvertMap;
ceramic_ConvertMap.__name__ = "ceramic.ConvertMap";
ceramic_ConvertMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			value.h[key] = basic[key];
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		var h = value.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			basic[key] = value.h[key];
		}
		return basic;
	}
	,__class__: ceramic_ConvertMap
};
var ceramic_ConvertTexture = function() {
};
$hxClasses["ceramic.ConvertTexture"] = ceramic_ConvertTexture;
ceramic_ConvertTexture.__name__ = "ceramic.ConvertTexture";
ceramic_ConvertTexture.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertTexture.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic != null) {
			assets.ensureImage(basic,null,function(asset) {
				done(asset != null ? asset.get_texture() : null);
			});
		} else {
			done(null);
		}
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null || value.asset == null) {
			return null;
		} else {
			return value.asset.name;
		}
	}
	,__class__: ceramic_ConvertTexture
};
var ceramic_Csv = function() { };
$hxClasses["ceramic.Csv"] = ceramic_Csv;
ceramic_Csv.__name__ = "ceramic.Csv";
ceramic_Csv.parse = function(csv) {
	csv = StringTools.trim(csv);
	var sep = "";
	var i = 0;
	var c = "";
	var cc = "";
	var len = csv.length;
	var inString = false;
	var val = "";
	var keys = [];
	while(i < len) {
		c = csv.charAt(i);
		if(inString) {
			if(c == "\"") {
				cc = c + csv.charAt(i + 1);
				if(cc == "\"\"") {
					val += "\"";
					i += 2;
				} else {
					inString = false;
					++i;
				}
			} else {
				val += c;
				++i;
			}
		} else if(c == "\n") {
			++i;
			break;
		} else if(val == "" && c == "\"") {
			inString = true;
			++i;
		} else if(sep == "") {
			if(c == "," || c == ";") {
				sep = c;
				keys.push(StringTools.replace(val,"\r",""));
				val = "";
			} else {
				val += c;
			}
			++i;
		} else if(c == sep) {
			keys.push(StringTools.replace(val,"\r",""));
			val = "";
			++i;
		} else {
			val += c;
			++i;
		}
	}
	if(val != "") {
		keys.push(StringTools.replace(val,"\r",""));
	}
	inString = false;
	val = "";
	var entry = { };
	var entryHasFields = false;
	var result = [];
	var keyIndex = 0;
	var key = "";
	var tooManyColumnsAt = -1;
	while(i < len) {
		c = csv.charAt(i);
		if(inString) {
			if(c == "\"") {
				cc = c + csv.charAt(i + 1);
				if(cc == "\"\"") {
					val += "\"";
					i += 2;
				} else {
					inString = false;
					++i;
				}
			} else {
				val += c;
				++i;
			}
		} else if(c == "\n") {
			key = keys[keyIndex++];
			if(key != null) {
				entry[key] = StringTools.replace(val,"\r","");
				entryHasFields = true;
			} else if(tooManyColumnsAt == -1) {
				tooManyColumnsAt = result.length;
			}
			val = "";
			result.push(entry);
			entryHasFields = false;
			keyIndex = 0;
			entry = { };
			++i;
		} else if(val == "" && c == "\"") {
			inString = true;
			++i;
		} else if(c == sep) {
			key = keys[keyIndex++];
			if(key != null) {
				entry[key] = StringTools.replace(val,"\r","");
				entryHasFields = true;
			} else if(tooManyColumnsAt == -1) {
				tooManyColumnsAt = result.length;
			}
			val = "";
			++i;
		} else {
			val += c;
			++i;
		}
	}
	key = keys[keyIndex++];
	if(key != null) {
		entry[key] = StringTools.replace(val,"\r","");
		entryHasFields = true;
	} else if(tooManyColumnsAt == -1) {
		ceramic_Csv.warning(entry);
		tooManyColumnsAt = result.length;
	}
	val = "";
	if(entryHasFields) {
		result.push(entry);
	}
	if(tooManyColumnsAt >= 0) {
		ceramic_Csv.warning("Malformed CSV: too many columns at row #" + tooManyColumnsAt);
	}
	return result;
};
ceramic_Csv.stringify = function(items,fields) {
	if(fields == null) {
		fields = [];
		var usedFields_h = Object.create(null);
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var _g1 = 0;
			var _g2 = Reflect.fields(item);
			while(_g1 < _g2.length) {
				var field = _g2[_g1];
				++_g1;
				if(!Object.prototype.hasOwnProperty.call(usedFields_h,field)) {
					fields.push(field);
					usedFields_h[field] = true;
				}
			}
		}
	}
	var output_b = "";
	var n = 0;
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(n++ > 0) {
			output_b += ",";
		}
		if(field.length != 0) {
			output_b += "\"";
			var _g1 = 0;
			var _g2 = field.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var c = field.charAt(i);
				if(c == "\"") {
					output_b += "\"\"";
				} else {
					output_b += Std.string(c);
				}
			}
			output_b += "\"";
		}
	}
	var _g = 0;
	while(_g < items.length) {
		var item = items[_g];
		++_g;
		output_b += "\n";
		n = 0;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			if(n++ > 0) {
				output_b += ",";
			}
			var value = Reflect.field(item,field);
			var input = value != null ? Std.string(value) : "";
			if(input.length != 0) {
				output_b += "\"";
				var _g2 = 0;
				var _g3 = input.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var c = input.charAt(i);
					if(c == "\"") {
						output_b += "\"\"";
					} else {
						output_b += Std.string(c);
					}
				}
				output_b += "\"";
			}
		}
	}
	return output_b;
};
ceramic_Csv.warning = function(str) {
	ceramic_App.app.logger.warning(str,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Csv.hx", lineNumber : 236, className : "ceramic.Csv", methodName : "warning"});
};
var ceramic_CustomAssetKind = function(kind,add,extensions,dir,types) {
	this.kind = kind;
	this.add = add;
	this.extensions = extensions;
	this.dir = dir;
	this.types = types;
};
$hxClasses["ceramic.CustomAssetKind"] = ceramic_CustomAssetKind;
ceramic_CustomAssetKind.__name__ = "ceramic.CustomAssetKind";
ceramic_CustomAssetKind.prototype = {
	__class__: ceramic_CustomAssetKind
};
var ceramic_DatabaseAsset = function(name,options) {
	this.unobservedDatabase = null;
	this.databaseAutoruns = null;
	ceramic_Asset.call(this,"database",name,options);
};
$hxClasses["ceramic.DatabaseAsset"] = ceramic_DatabaseAsset;
ceramic_DatabaseAsset.__name__ = "ceramic.DatabaseAsset";
ceramic_DatabaseAsset.__super__ = ceramic_Asset;
ceramic_DatabaseAsset.prototype = $extend(ceramic_Asset.prototype,{
	get_database: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.databaseAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.databaseAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedDatabase;
	}
	,set_database: function(database) {
		var prevValue = this.unobservedDatabase;
		this.unobservedDatabase = database;
		if(prevValue == database) {
			return database;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitDatabaseChange(database,prevValue);
		var fieldAutoruns = this.databaseAutoruns;
		if(fieldAutoruns != null) {
			this.databaseAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return database;
	}
	,invalidateDatabase: function() {
		var value = this.unobservedDatabase;
		this.emitDatabaseChange(value,value);
		var fieldAutoruns = this.databaseAutoruns;
		if(fieldAutoruns != null) {
			this.databaseAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitDatabaseChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnDatabaseChange != null) {
			len += this.__cbOnDatabaseChange.length;
		}
		if(this.__cbOnceDatabaseChange != null) {
			len += this.__cbOnceDatabaseChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnDatabaseChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDatabaseChange[ii];
					++i;
				}
			}
			if(this.__cbOnceDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDatabaseChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDatabaseChange[ii];
					var unbind = this.__cbOnceOwnerUnbindDatabaseChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDatabaseChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDatabaseChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "databaseChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offDatabaseChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDatabaseChange == null) {
				this.__cbOnOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnOwnerUnbindDatabaseChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDatabaseChange == null) {
				this.__cbOnOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnOwnerUnbindDatabaseChange.push(null);
		}
		if(this.__cbOnDatabaseChange == null) {
			this.__cbOnDatabaseChange = [];
		}
		this.__cbOnDatabaseChange.push(handleCurrentPrevious);
	}
	,onceDatabaseChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "databaseChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offDatabaseChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDatabaseChange == null) {
				this.__cbOnceOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnceOwnerUnbindDatabaseChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDatabaseChange == null) {
				this.__cbOnceOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnceOwnerUnbindDatabaseChange.push(null);
		}
		if(this.__cbOnceDatabaseChange == null) {
			this.__cbOnceDatabaseChange = [];
		}
		this.__cbOnceDatabaseChange.push(handleCurrentPrevious);
	}
	,offDatabaseChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnDatabaseChange != null) {
				index = this.__cbOnDatabaseChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnDatabaseChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDatabaseChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDatabaseChange.splice(index,1);
				}
			}
			if(this.__cbOnceDatabaseChange != null) {
				index = this.__cbOnceDatabaseChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceDatabaseChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDatabaseChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDatabaseChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDatabaseChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDatabaseChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDatabaseChange = null;
			}
			if(this.__cbOnceOwnerUnbindDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDatabaseChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDatabaseChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDatabaseChange = null;
			}
			this.__cbOnDatabaseChange = null;
			this.__cbOnceDatabaseChange = null;
		}
	}
	,listensDatabaseChange: function() {
		if(!(this.__cbOnDatabaseChange != null && this.__cbOnDatabaseChange.length > 0)) {
			if(this.__cbOnceDatabaseChange != null) {
				return this.__cbOnceDatabaseChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load database asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/DatabaseAsset.hx", lineNumber : 22, className : "ceramic.DatabaseAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load database " + backendPath,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/DatabaseAsset.hx", lineNumber : 37, className : "ceramic.DatabaseAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,null,function(text) {
			if(text != null) {
				try {
					_gthis.set_database(ceramic_Csv.parse(text));
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to parse database at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/DatabaseAsset.hx", lineNumber : 45, className : "ceramic.DatabaseAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load database at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/DatabaseAsset.hx", lineNumber : 54, className : "ceramic.DatabaseAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload database (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/DatabaseAsset.hx", lineNumber : 77, className : "ceramic.DatabaseAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_database(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offDatabaseChange();
	}
	,__class__: ceramic_DatabaseAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_database:"set_database",get_database:"get_database"})
});
var ceramic_Easing = $hxEnums["ceramic.Easing"] = { __ename__:"ceramic.Easing",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"ceramic.Easing",toString:$estr}
	,LINEAR: {_hx_name:"LINEAR",_hx_index:1,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_IN: {_hx_name:"BACK_EASE_IN",_hx_index:2,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_IN_OUT: {_hx_name:"BACK_EASE_IN_OUT",_hx_index:3,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_OUT: {_hx_name:"BACK_EASE_OUT",_hx_index:4,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_IN: {_hx_name:"QUAD_EASE_IN",_hx_index:5,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_IN_OUT: {_hx_name:"QUAD_EASE_IN_OUT",_hx_index:6,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_OUT: {_hx_name:"QUAD_EASE_OUT",_hx_index:7,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_IN: {_hx_name:"CUBIC_EASE_IN",_hx_index:8,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_IN_OUT: {_hx_name:"CUBIC_EASE_IN_OUT",_hx_index:9,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_OUT: {_hx_name:"CUBIC_EASE_OUT",_hx_index:10,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_IN: {_hx_name:"QUART_EASE_IN",_hx_index:11,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_IN_OUT: {_hx_name:"QUART_EASE_IN_OUT",_hx_index:12,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_OUT: {_hx_name:"QUART_EASE_OUT",_hx_index:13,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_IN: {_hx_name:"QUINT_EASE_IN",_hx_index:14,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_IN_OUT: {_hx_name:"QUINT_EASE_IN_OUT",_hx_index:15,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_OUT: {_hx_name:"QUINT_EASE_OUT",_hx_index:16,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_IN: {_hx_name:"BOUNCE_EASE_IN",_hx_index:17,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_IN_OUT: {_hx_name:"BOUNCE_EASE_IN_OUT",_hx_index:18,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_OUT: {_hx_name:"BOUNCE_EASE_OUT",_hx_index:19,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_IN: {_hx_name:"ELASTIC_EASE_IN",_hx_index:20,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_IN_OUT: {_hx_name:"ELASTIC_EASE_IN_OUT",_hx_index:21,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_OUT: {_hx_name:"ELASTIC_EASE_OUT",_hx_index:22,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_IN: {_hx_name:"EXPO_EASE_IN",_hx_index:23,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_IN_OUT: {_hx_name:"EXPO_EASE_IN_OUT",_hx_index:24,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_OUT: {_hx_name:"EXPO_EASE_OUT",_hx_index:25,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_IN: {_hx_name:"SINE_EASE_IN",_hx_index:26,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_IN_OUT: {_hx_name:"SINE_EASE_IN_OUT",_hx_index:27,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_OUT: {_hx_name:"SINE_EASE_OUT",_hx_index:28,__enum__:"ceramic.Easing",toString:$estr}
	,BEZIER: ($_=function(x1,y1,x2,y2) { return {_hx_index:29,x1:x1,y1:y1,x2:x2,y2:y2,__enum__:"ceramic.Easing",toString:$estr}; },$_._hx_name="BEZIER",$_.__params__ = ["x1","y1","x2","y2"],$_)
	,CUSTOM: ($_=function(easing) { return {_hx_index:30,easing:easing,__enum__:"ceramic.Easing",toString:$estr}; },$_._hx_name="CUSTOM",$_.__params__ = ["easing"],$_)
};
ceramic_Easing.__constructs__ = [ceramic_Easing.NONE,ceramic_Easing.LINEAR,ceramic_Easing.BACK_EASE_IN,ceramic_Easing.BACK_EASE_IN_OUT,ceramic_Easing.BACK_EASE_OUT,ceramic_Easing.QUAD_EASE_IN,ceramic_Easing.QUAD_EASE_IN_OUT,ceramic_Easing.QUAD_EASE_OUT,ceramic_Easing.CUBIC_EASE_IN,ceramic_Easing.CUBIC_EASE_IN_OUT,ceramic_Easing.CUBIC_EASE_OUT,ceramic_Easing.QUART_EASE_IN,ceramic_Easing.QUART_EASE_IN_OUT,ceramic_Easing.QUART_EASE_OUT,ceramic_Easing.QUINT_EASE_IN,ceramic_Easing.QUINT_EASE_IN_OUT,ceramic_Easing.QUINT_EASE_OUT,ceramic_Easing.BOUNCE_EASE_IN,ceramic_Easing.BOUNCE_EASE_IN_OUT,ceramic_Easing.BOUNCE_EASE_OUT,ceramic_Easing.ELASTIC_EASE_IN,ceramic_Easing.ELASTIC_EASE_IN_OUT,ceramic_Easing.ELASTIC_EASE_OUT,ceramic_Easing.EXPO_EASE_IN,ceramic_Easing.EXPO_EASE_IN_OUT,ceramic_Easing.EXPO_EASE_OUT,ceramic_Easing.SINE_EASE_IN,ceramic_Easing.SINE_EASE_IN_OUT,ceramic_Easing.SINE_EASE_OUT,ceramic_Easing.BEZIER,ceramic_Easing.CUSTOM];
var ceramic_EasingUtils = function() { };
$hxClasses["ceramic.EasingUtils"] = ceramic_EasingUtils;
ceramic_EasingUtils.__name__ = "ceramic.EasingUtils";
ceramic_EasingUtils.easingFromString = function(str) {
	return Type.createEnum(ceramic_Easing,str,ceramic_EasingUtils._emptyArray);
};
ceramic_EasingUtils.easingToString = function(easing) {
	return $hxEnums[easing.__enum__].__constructs__[easing._hx_index]._hx_name;
};
var ceramic_Extensions = function() { };
$hxClasses["ceramic.Extensions"] = ceramic_Extensions;
ceramic_Extensions.__name__ = "ceramic.Extensions";
ceramic_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
ceramic_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
ceramic_Extensions.setArrayLength = function(array,length) {
	if(array.length != length) {
		if(array.length > length) {
			array.splice(length,array.length - length);
		} else {
			var dArray = array;
			dArray[length - 1] = null;
		}
	}
};
ceramic_Extensions.randomElement = function(array) {
	return array[Math.floor(Math.random() * 0.99999 * array.length)];
};
ceramic_Extensions.randomElementExcept = function(array,except,unsafe) {
	if(unsafe == null) {
		unsafe = false;
	}
	if(unsafe) {
		var ret = null;
		while(true) {
			ret = array[Math.floor(Math.random() * 0.99999 * array.length)];
			if(!(ret == except)) {
				break;
			}
		}
		return ret;
	} else {
		var array_ = [];
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			array_.push(item);
		}
		ceramic_Extensions.shuffle(array_);
		var _g = 0;
		while(_g < array_.length) {
			var item = array_[_g];
			++_g;
			if(item != except) {
				return item;
			}
		}
	}
	return null;
};
ceramic_Extensions.randomElementMatchingValidator = function(array,validator) {
	var array_ = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		array_.push(item);
	}
	ceramic_Extensions.shuffle(array_);
	var _g = 0;
	while(_g < array_.length) {
		var item = array_[_g];
		++_g;
		if(validator(item)) {
			return item;
		}
	}
	return null;
};
ceramic_Extensions.shuffle = function(arr) {
	if(arr != null) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var j = Math.floor((arr.length - 1 + 1) * Math.random());
			var a = arr[i];
			var b = arr[j];
			arr[i] = b;
			arr[j] = a;
		}
	}
};
ceramic_Extensions.swapElements = function(arr,index0,index1) {
	var a = arr[index0];
	arr[index0] = arr[index1];
	arr[index1] = a;
};
ceramic_Extensions.setProperty = function(instance,field,value) {
	Reflect.setProperty(instance,field,value);
};
ceramic_Extensions.getProperty = function(instance,field) {
	return Reflect.getProperty(instance,field);
};
var ceramic_FieldInfo = function() { };
$hxClasses["ceramic.FieldInfo"] = ceramic_FieldInfo;
ceramic_FieldInfo.__name__ = "ceramic.FieldInfo";
ceramic_FieldInfo.types = function(targetClass,recursive) {
	if(recursive == null) {
		recursive = true;
	}
	var info = ceramic_FieldInfo.fieldInfoMap.h[targetClass];
	if(info == null) {
		info = new haxe_ds_StringMap();
		ceramic_FieldInfo.fieldInfoMap.h[targetClass] = info;
		var clazz = $hxClasses[targetClass];
		var clazzStr = "" + Std.string(clazz);
		var firstTry = true;
		while(clazz != null) {
			var storedFieldInfo = Reflect.field(clazz,"_fieldInfo");
			firstTry = false;
			if(storedFieldInfo != null) {
				var access = storedFieldInfo;
				var _g_access = access;
				var _g_keys = Reflect.fields(access);
				var _g_index = 0;
				while(_g_index < _g_keys.length) {
					var key = _g_keys[_g_index++];
					var _g1_value = _g_access[key];
					var _g1_key = key;
					var key1 = _g1_key;
					var val = _g1_value;
					if(!Object.prototype.hasOwnProperty.call(info.h,key1)) {
						info.h[key1] = val.type;
					}
				}
			}
			if(!recursive) {
				break;
			}
			clazz = clazz.__super__;
		}
	}
	return info;
};
ceramic_FieldInfo.typeOf = function(targetClass,field) {
	return ceramic_FieldInfo.types(targetClass).h[field];
};
var ceramic_Files = function() { };
$hxClasses["ceramic.Files"] = ceramic_Files;
ceramic_Files.__name__ = "ceramic.Files";
ceramic_Files.haveSameContent = function(filePath1,filePath2) {
	ceramic_App.app.logger.warning("haveSameContent() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 38, className : "ceramic.Files", methodName : "haveSameContent"});
	return false;
};
ceramic_Files.haveSameLastModified = function(filePath1,filePath2) {
	ceramic_App.app.logger.warning("haveSameLastModified() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 75, className : "ceramic.Files", methodName : "haveSameLastModified"});
	return false;
};
ceramic_Files.setToSameLastModified = function(srcFilePath,dstFilePath) {
	ceramic_App.app.logger.warning("setToSameLastModified() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 98, className : "ceramic.Files", methodName : "setToSameLastModified"});
};
ceramic_Files.getFlatDirectory = function(dir,excludeSystemFiles) {
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	return [];
};
ceramic_Files.getLastModified = function(path) {
	return -1;
};
ceramic_Files.removeEmptyDirectories = function(dir,excludeSystemFiles) {
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	ceramic_App.app.logger.warning("removeEmptyDirectories() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 227, className : "ceramic.Files", methodName : "removeEmptyDirectories"});
};
ceramic_Files.isEmptyDirectory = function(dir,excludeSystemFiles) {
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	ceramic_App.app.logger.warning("isEmptyDirectory() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 248, className : "ceramic.Files", methodName : "isEmptyDirectory"});
	return false;
};
ceramic_Files.deleteRecursive = function(toDelete) {
	ceramic_App.app.logger.warning("deleteRecursive() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 292, className : "ceramic.Files", methodName : "deleteRecursive"});
};
ceramic_Files.getRelativePath = function(absolutePath,relativeTo) {
	var isWindows = false;
	var fromParts = HxOverrides.substr(ceramic_Path.normalize(relativeTo),isWindows ? 3 : 1,null).split("/");
	var toParts = HxOverrides.substr(ceramic_Path.normalize(absolutePath),isWindows ? 3 : 1,null).split("/");
	var length = Math.min(fromParts.length,toParts.length);
	var samePartsLength = length;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		if(fromParts[i] != toParts[i]) {
			samePartsLength = i;
			break;
		}
	}
	var outputParts = [];
	var _g = samePartsLength;
	var _g1 = fromParts.length;
	while(_g < _g1) {
		var i = _g++;
		outputParts.push("..");
	}
	outputParts = outputParts.concat(toParts.slice(samePartsLength));
	var result = outputParts.join("/");
	if(StringTools.endsWith(absolutePath,"/") && !StringTools.endsWith(result,"/")) {
		result += "/";
	}
	if(!StringTools.startsWith(result,".")) {
		result = "./" + result;
	}
	return result;
};
ceramic_Files.copyFileWithIntermediateDirs = function(srcPath,dstPath) {
	ceramic_App.app.logger.warning("copyFileWithIntermediateDirs() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 348, className : "ceramic.Files", methodName : "copyFileWithIntermediateDirs"});
};
ceramic_Files.copyDirectory = function(srcDir,dstDir,removeExisting) {
	if(removeExisting == null) {
		removeExisting = false;
	}
	ceramic_App.app.logger.warning("copyDirectory() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 382, className : "ceramic.Files", methodName : "copyDirectory"});
};
ceramic_Files.getContent = function(path) {
	ceramic_App.app.logger.warning("getContent() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 408, className : "ceramic.Files", methodName : "getContent"});
	return null;
};
ceramic_Files.saveContent = function(path,content) {
	ceramic_App.app.logger.warning("saveContent() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 434, className : "ceramic.Files", methodName : "saveContent"});
};
ceramic_Files.createDirectory = function(path) {
	ceramic_App.app.logger.warning("createDirectory() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 459, className : "ceramic.Files", methodName : "createDirectory"});
};
ceramic_Files.exists = function(path) {
	ceramic_App.app.logger.warning("exists() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 511, className : "ceramic.Files", methodName : "exists"});
	return false;
};
ceramic_Files.isDirectory = function(path) {
	ceramic_App.app.logger.warning("isDirectory() is not supported on this target",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Files.hx", lineNumber : 544, className : "ceramic.Files", methodName : "isDirectory"});
	return false;
};
var ceramic_Filter = function() {
	this.explicitRenderPendingResultCallbacks = null;
	this.explicitRenderState = 0;
	this.density = -1;
	this.unobservedRenderTexture = null;
	this.renderTextureAutoruns = null;
	this.textureTile = null;
	this.textureTilePacker = null;
	this.explicitRender = false;
	this.autoRender = true;
	this.textureFilter = ceramic_TextureFilter.LINEAR;
	this.enabled = true;
	this.hitVisual = null;
	this.textureId = null;
	this.observedDirty = false;
	ceramic_Layer.call(this);
	this.transparent = false;
	this.content = new ceramic_Quad();
	this.content.transparent = true;
	this.content.color = 16777215;
	this.add(this.content);
	this.set_hitVisual(this);
	ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.handleTexturesDensityChange));
};
$hxClasses["ceramic.Filter"] = ceramic_Filter;
ceramic_Filter.__name__ = "ceramic.Filter";
ceramic_Filter.__interfaces__ = [tracker_Observable];
ceramic_Filter.__super__ = ceramic_Layer;
ceramic_Filter.prototype = $extend(ceramic_Layer.prototype,{
	emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnObservedDirty[ii];
					++i;
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceObservedDirty = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_textureId: function(textureId) {
		this.textureId = textureId;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().id = textureId;
		}
		return textureId;
	}
	,set_hitVisual: function(hitVisual) {
		if(this.hitVisual == hitVisual) {
			return hitVisual;
		}
		if(this.hitVisual != null) {
			ceramic_App.app.screen.removeHitVisual(this.hitVisual);
		}
		this.hitVisual = hitVisual;
		if(this.hitVisual != null) {
			ceramic_App.app.screen.addHitVisual(this.hitVisual);
		}
		return hitVisual;
	}
	,set_enabled: function(enabled) {
		if(this.enabled == enabled) {
			return enabled;
		}
		this.enabled = enabled;
		this.transparent = !enabled;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return enabled;
	}
	,set_textureFilter: function(textureFilter) {
		if(this.textureFilter == textureFilter) {
			return textureFilter;
		}
		this.textureFilter = textureFilter;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().set_filter(textureFilter);
		}
		return textureFilter;
	}
	,set_autoRender: function(autoRender) {
		if(this.autoRender == autoRender) {
			return autoRender;
		}
		this.autoRender = autoRender;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().autoRender = autoRender;
		}
		return autoRender;
	}
	,set_explicitRender: function(explicitRender) {
		if(this.explicitRender == explicitRender) {
			return explicitRender;
		}
		this.explicitRender = explicitRender;
		this.content.set_active(!explicitRender);
		return explicitRender;
	}
	,set_textureTilePacker: function(textureTilePacker) {
		if(this.textureTilePacker == textureTilePacker) {
			return textureTilePacker;
		}
		if(this.textureTile != null && this.textureTilePacker != null) {
			this.textureTilePacker.releaseTile(this.textureTile);
			this.textureTile = null;
			this.set_tile(null);
			this.set_tile(null);
			this.content.set_renderTarget(null);
		}
		this.textureTilePacker = textureTilePacker;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return textureTilePacker;
	}
	,get_renderTexture: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.renderTextureAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.renderTextureAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedRenderTexture;
	}
	,set_renderTexture: function(renderTexture) {
		var prevValue = this.unobservedRenderTexture;
		this.unobservedRenderTexture = renderTexture;
		if(prevValue == renderTexture) {
			return renderTexture;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitRenderTextureChange(renderTexture,prevValue);
		var fieldAutoruns = this.renderTextureAutoruns;
		if(fieldAutoruns != null) {
			this.renderTextureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return renderTexture;
	}
	,invalidateRenderTexture: function() {
		var value = this.unobservedRenderTexture;
		this.emitRenderTextureChange(value,value);
		var fieldAutoruns = this.renderTextureAutoruns;
		if(fieldAutoruns != null) {
			this.renderTextureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitRenderTextureChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnRenderTextureChange != null) {
			len += this.__cbOnRenderTextureChange.length;
		}
		if(this.__cbOnceRenderTextureChange != null) {
			len += this.__cbOnceRenderTextureChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnRenderTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnRenderTextureChange[ii];
					++i;
				}
			}
			if(this.__cbOnceRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceRenderTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceRenderTextureChange[ii];
					var unbind = this.__cbOnceOwnerUnbindRenderTextureChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceRenderTextureChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRenderTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderTextureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRenderTextureChange == null) {
				this.__cbOnOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnOwnerUnbindRenderTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRenderTextureChange == null) {
				this.__cbOnOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnOwnerUnbindRenderTextureChange.push(null);
		}
		if(this.__cbOnRenderTextureChange == null) {
			this.__cbOnRenderTextureChange = [];
		}
		this.__cbOnRenderTextureChange.push(handleCurrentPrevious);
	}
	,onceRenderTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderTextureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRenderTextureChange == null) {
				this.__cbOnceOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnceOwnerUnbindRenderTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRenderTextureChange == null) {
				this.__cbOnceOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnceOwnerUnbindRenderTextureChange.push(null);
		}
		if(this.__cbOnceRenderTextureChange == null) {
			this.__cbOnceRenderTextureChange = [];
		}
		this.__cbOnceRenderTextureChange.push(handleCurrentPrevious);
	}
	,offRenderTextureChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnRenderTextureChange != null) {
				index = this.__cbOnRenderTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnRenderTextureChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRenderTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRenderTextureChange.splice(index,1);
				}
			}
			if(this.__cbOnceRenderTextureChange != null) {
				index = this.__cbOnceRenderTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceRenderTextureChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRenderTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRenderTextureChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRenderTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRenderTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRenderTextureChange = null;
			}
			if(this.__cbOnceOwnerUnbindRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRenderTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRenderTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRenderTextureChange = null;
			}
			this.__cbOnRenderTextureChange = null;
			this.__cbOnceRenderTextureChange = null;
		}
	}
	,listensRenderTextureChange: function() {
		if(!(this.__cbOnRenderTextureChange != null && this.__cbOnRenderTextureChange.length > 0)) {
			if(this.__cbOnceRenderTextureChange != null) {
				return this.__cbOnceRenderTextureChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_density: function(density) {
		if(this.density == density) {
			return density;
		}
		this.density = density;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return density;
	}
	,handleTexturesDensityChange: function(density,prevDensity) {
		if(density != prevDensity && this.density == -1) {
			this.filterSize(Math.ceil(this.get_width()),Math.ceil(this.get_height()),density);
			this.contentDirty = false;
		}
	}
	,filterSize: function(filterWidth,filterHeight,density) {
		if(this.enabled) {
			if(this.get_renderTexture() == null || (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture())) && (this.get_renderTexture().width != filterWidth || this.get_renderTexture().height != filterHeight || density != -1 && this.get_renderTexture().density != density) || this.textureTilePacker != null && !this.textureTilePacker.managesTexture(this.get_renderTexture()) || this.textureTile != null && (this.textureTile.frameWidth != filterWidth || this.textureTile.frameHeight != filterHeight)) {
				if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
					var texture = null;
					if(this.texture != texture) {
						if(this.texture != null) {
							this.texture.offDestroy($bind(this,this.textureDestroyed));
							if(this.texture.asset != null) {
								this.texture.asset.release();
							}
						}
						this.texture = texture;
						if(texture == null) {
							this.frameX = -1;
							this.frameY = -1;
							if(this.frameWidth != -1) {
								this.frameWidth = -1;
							}
							if(this.frameHeight != -1) {
								this.frameHeight = -1;
							}
						} else if(this.tile != null) {
							this.frameX = this.tile.frameX;
							this.frameY = this.tile.frameY;
							var frameWidth = this.tile.frameWidth;
							if(this.frameWidth != frameWidth) {
								this.frameWidth = frameWidth;
								if(frameWidth != -1) {
									this.set_width(frameWidth);
								}
							}
							var frameHeight = this.tile.frameHeight;
							if(this.frameHeight != frameHeight) {
								this.frameHeight = frameHeight;
								if(frameHeight != -1) {
									this.set_height(frameHeight);
								}
							}
						} else {
							this.frameX = 0;
							this.frameY = 0;
							var frameWidth = texture.width;
							if(this.frameWidth != frameWidth) {
								this.frameWidth = frameWidth;
								if(frameWidth != -1) {
									this.set_width(frameWidth);
								}
							}
							var frameHeight = texture.height;
							if(this.frameHeight != frameHeight) {
								this.frameHeight = frameHeight;
								if(frameHeight != -1) {
									this.set_height(frameHeight);
								}
							}
							texture.onDestroy(this,$bind(this,this.textureDestroyed));
							if(texture.asset != null) {
								texture.asset.retain();
							}
						}
					}
					this.get_renderTexture().destroy();
					this.set_renderTexture(null);
				}
				if(this.textureTile != null && this.textureTilePacker != null) {
					this.textureTilePacker.releaseTile(this.textureTile);
					this.textureTile = null;
				}
				if(filterWidth > 0 && filterHeight > 0) {
					if(this.textureTilePacker != null) {
						this.set_renderTexture(this.textureTilePacker.texture);
						this.textureTile = this.textureTilePacker.allocTile(filterWidth,filterHeight);
						this.set_tile(this.textureTile);
					} else {
						this.set_renderTexture(new ceramic_RenderTexture(filterWidth,filterHeight,density));
						this.get_renderTexture().id = this.textureId;
						this.get_renderTexture().set_filter(this.textureFilter);
						this.get_renderTexture().autoRender = this.autoRender;
						this.set_tile(null);
						var texture = this.get_renderTexture();
						if(this.texture != texture) {
							if(this.texture != null) {
								this.texture.offDestroy($bind(this,this.textureDestroyed));
								if(this.texture.asset != null) {
									this.texture.asset.release();
								}
							}
							this.texture = texture;
							if(texture == null) {
								this.frameX = -1;
								this.frameY = -1;
								if(this.frameWidth != -1) {
									this.frameWidth = -1;
								}
								if(this.frameHeight != -1) {
									this.frameHeight = -1;
								}
							} else if(this.tile != null) {
								this.frameX = this.tile.frameX;
								this.frameY = this.tile.frameY;
								var frameWidth = this.tile.frameWidth;
								if(this.frameWidth != frameWidth) {
									this.frameWidth = frameWidth;
									if(frameWidth != -1) {
										this.set_width(frameWidth);
									}
								}
								var frameHeight = this.tile.frameHeight;
								if(this.frameHeight != frameHeight) {
									this.frameHeight = frameHeight;
									if(frameHeight != -1) {
										this.set_height(frameHeight);
									}
								}
							} else {
								this.frameX = 0;
								this.frameY = 0;
								var frameWidth = texture.width;
								if(this.frameWidth != frameWidth) {
									this.frameWidth = frameWidth;
									if(frameWidth != -1) {
										this.set_width(frameWidth);
									}
								}
								var frameHeight = texture.height;
								if(this.frameHeight != frameHeight) {
									this.frameHeight = frameHeight;
									if(frameHeight != -1) {
										this.set_height(frameHeight);
									}
								}
								texture.onDestroy(this,$bind(this,this.textureDestroyed));
								if(texture.asset != null) {
									texture.asset.retain();
								}
							}
						}
					}
				}
			}
		} else if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
			this.set_tile(null);
			var texture = null;
			if(this.texture != texture) {
				if(this.texture != null) {
					this.texture.offDestroy($bind(this,this.textureDestroyed));
					if(this.texture.asset != null) {
						this.texture.asset.release();
					}
				}
				this.texture = texture;
				if(texture == null) {
					this.frameX = -1;
					this.frameY = -1;
					if(this.frameWidth != -1) {
						this.frameWidth = -1;
					}
					if(this.frameHeight != -1) {
						this.frameHeight = -1;
					}
				} else if(this.tile != null) {
					this.frameX = this.tile.frameX;
					this.frameY = this.tile.frameY;
					var frameWidth = this.tile.frameWidth;
					if(this.frameWidth != frameWidth) {
						this.frameWidth = frameWidth;
						if(frameWidth != -1) {
							this.set_width(frameWidth);
						}
					}
					var frameHeight = this.tile.frameHeight;
					if(this.frameHeight != frameHeight) {
						this.frameHeight = frameHeight;
						if(frameHeight != -1) {
							this.set_height(frameHeight);
						}
					}
				} else {
					this.frameX = 0;
					this.frameY = 0;
					var frameWidth = texture.width;
					if(this.frameWidth != frameWidth) {
						this.frameWidth = frameWidth;
						if(frameWidth != -1) {
							this.set_width(frameWidth);
						}
					}
					var frameHeight = texture.height;
					if(this.frameHeight != frameHeight) {
						this.frameHeight = frameHeight;
						if(frameHeight != -1) {
							this.set_height(frameHeight);
						}
					}
					texture.onDestroy(this,$bind(this,this.textureDestroyed));
					if(texture.asset != null) {
						texture.asset.retain();
					}
				}
			}
			this.get_renderTexture().destroy();
			this.set_renderTexture(null);
		}
		var _this = this.content;
		_this.set_width(filterWidth);
		_this.set_height(filterHeight);
		this.content.set_renderTarget(this.get_renderTexture());
		if(this.textureTile != null) {
			var _this = this.content;
			var y = this.textureTile.frameY;
			_this.set_x(this.textureTile.frameX);
			_this.set_y(y);
		} else {
			var _this = this.content;
			_this.set_x(0);
			_this.set_y(0);
		}
		if(this.content.contentDirty) {
			this.content.computeContent();
		}
	}
	,render: function(requestFullUpdate,done) {
		if(requestFullUpdate == null) {
			requestFullUpdate = false;
		}
		var _gthis = this;
		if(!this.explicitRender) {
			ceramic_App.app.logger.warning("Explicit render is disabled on this filter. Ignoring render() call.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Filter.hx", lineNumber : 227, className : "ceramic.Filter", methodName : "render"});
			return;
		}
		if(this.explicitRenderState == 1) {
			if(done != null) {
				if(this.explicitRenderPendingResultCallbacks == null) {
					this.explicitRenderPendingResultCallbacks = [];
				}
				this.explicitRenderPendingResultCallbacks.push(done);
				done = null;
			}
			return;
		} else if(this.explicitRenderState == 2) {
			if(done != null) {
				if(this.explicitRenderPendingResultCallbacks == null) {
					this.explicitRenderPendingResultCallbacks = [];
				}
				this.explicitRenderPendingResultCallbacks.push(function() {
					_gthis.render(requestFullUpdate,done);
					done = null;
				});
			}
			return;
		}
		this.explicitRenderState = 1;
		if(this.contentDirty) {
			this.computeContent();
		}
		if(this.get_renderTexture() == null) {
			this.explicitRenderState = 0;
			var callbacks = this.explicitRenderPendingResultCallbacks;
			this.explicitRenderPendingResultCallbacks = null;
			if(done != null) {
				done();
				done = null;
			}
			if(callbacks != null) {
				var _g = 0;
				var _g1 = callbacks.length;
				while(_g < _g1) {
					var i = _g++;
					var cb = callbacks[i];
					callbacks[i] = null;
					cb();
					cb = null;
				}
			}
			return;
		}
		this.content.set_active(true);
		if(requestFullUpdate) {
			var _this = ceramic_App.app;
			if(_this.inUpdate) {
				_this.shouldUpdateAndDrawAgain = true;
			}
		}
		ceramic_App.app.onceUpdate(null,function(_) {
			if(_gthis._lifecycleState < 0) {
				done = null;
				return;
			}
			_gthis.explicitRenderState = 2;
			if(_gthis.contentDirty) {
				_gthis.computeContent();
			}
			if(_gthis.get_renderTexture() == null) {
				_gthis.content.set_active(false);
				_gthis.explicitRenderState = 0;
				var callbacks = _gthis.explicitRenderPendingResultCallbacks;
				_gthis.explicitRenderPendingResultCallbacks = null;
				if(done != null) {
					done();
					done = null;
				}
				if(callbacks != null) {
					var _g = 0;
					var _g1 = callbacks.length;
					while(_g < _g1) {
						var i = _g++;
						var cb = callbacks[i];
						callbacks[i] = null;
						cb();
						cb = null;
					}
				}
				return;
			}
			_gthis.get_renderTexture().renderDirty = true;
			ceramic_App.app.onceFinishDraw(null,function() {
				if(_gthis._lifecycleState < 0) {
					done = null;
					return;
				}
				_gthis.content.set_active(false);
				_gthis.explicitRenderState = 0;
				var callbacks = _gthis.explicitRenderPendingResultCallbacks;
				_gthis.explicitRenderPendingResultCallbacks = null;
				if(done != null) {
					done();
					done = null;
				}
				if(callbacks != null) {
					var _g = 0;
					var _g1 = callbacks.length;
					while(_g < _g1) {
						var i = _g++;
						var cb = callbacks[i];
						callbacks[i] = null;
						cb();
						cb = null;
					}
				}
			});
		});
	}
	,visualInContentHits: function(visual,x,y) {
		var matchedHitVisual = ceramic_Screen.matchedHitVisual;
		ceramic_Screen.matchedHitVisual = null;
		if(this.hitVisual.hits(x,y)) {
			ceramic_Screen.matchedHitVisual = matchedHitVisual;
			if(visual.matrixDirty) {
				visual.computeMatrix();
			}
			var _this = ceramic_Filter._matrix;
			_this.a = visual.matA;
			_this.b = visual.matB;
			_this.c = visual.matC;
			_this.d = visual.matD;
			_this.tx = visual.matTX;
			_this.ty = visual.matTY;
			_this.changedDirty = true;
			var hv = this.hitVisual;
			while(true) {
				if(hv.matrixDirty) {
					hv.computeMatrix();
				}
				var a1 = ceramic_Filter._matrix.a * hv.matA + ceramic_Filter._matrix.b * hv.matC;
				ceramic_Filter._matrix.b = ceramic_Filter._matrix.a * hv.matB + ceramic_Filter._matrix.b * hv.matD;
				ceramic_Filter._matrix.a = a1;
				var c1 = ceramic_Filter._matrix.c * hv.matA + ceramic_Filter._matrix.d * hv.matC;
				ceramic_Filter._matrix.d = ceramic_Filter._matrix.c * hv.matB + ceramic_Filter._matrix.d * hv.matD;
				ceramic_Filter._matrix.c = c1;
				var tx1 = ceramic_Filter._matrix.tx * hv.matA + ceramic_Filter._matrix.ty * hv.matC + hv.matTX;
				ceramic_Filter._matrix.ty = ceramic_Filter._matrix.tx * hv.matB + ceramic_Filter._matrix.ty * hv.matD + hv.matTY;
				ceramic_Filter._matrix.tx = tx1;
				if(hv.computedRenderTarget != null) {
					var didFindParentHitVisual = false;
					var parent = hv.parent;
					if(parent != null) {
						while(true) {
							if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
								var filter = parent;
								if(filter.get_renderTexture() == hv.computedRenderTarget) {
									hv = filter.hitVisual;
									didFindParentHitVisual = true;
									break;
								}
							}
							parent = parent.parent;
							if(!(parent != null)) {
								break;
							}
						}
					}
					if(!didFindParentHitVisual) {
						return false;
					}
				} else {
					hv = null;
				}
				if(!(hv != null)) {
					break;
				}
			}
			var _this = ceramic_Filter._matrix;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
			return visual.hitTest(x,y,ceramic_Filter._matrix);
		}
		ceramic_Screen.matchedHitVisual = matchedHitVisual;
		return false;
	}
	,set_width: function(width) {
		if(this.get_width() == width) {
			return width;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return ceramic_Layer.prototype.set_width.call(this,width);
	}
	,set_height: function(height) {
		if(this.get_height() == height) {
			return height;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return ceramic_Layer.prototype.set_height.call(this,height);
	}
	,computeContent: function() {
		this.filterSize(Math.ceil(this.get_width()),Math.ceil(this.get_height()),this.density);
		this.contentDirty = false;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.set_hitVisual(null);
		var texture = null;
		if(this.texture != texture) {
			if(this.texture != null) {
				this.texture.offDestroy($bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.release();
				}
			}
			this.texture = texture;
			if(texture == null) {
				this.frameX = -1;
				this.frameY = -1;
				if(this.frameWidth != -1) {
					this.frameWidth = -1;
				}
				if(this.frameHeight != -1) {
					this.frameHeight = -1;
				}
			} else if(this.tile != null) {
				this.frameX = this.tile.frameX;
				this.frameY = this.tile.frameY;
				var frameWidth = this.tile.frameWidth;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = this.tile.frameHeight;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
			} else {
				this.frameX = 0;
				this.frameY = 0;
				var frameWidth = texture.width;
				if(this.frameWidth != frameWidth) {
					this.frameWidth = frameWidth;
					if(frameWidth != -1) {
						this.set_width(frameWidth);
					}
				}
				var frameHeight = texture.height;
				if(this.frameHeight != frameHeight) {
					this.frameHeight = frameHeight;
					if(frameHeight != -1) {
						this.set_height(frameHeight);
					}
				}
				texture.onDestroy(this,$bind(this,this.textureDestroyed));
				if(texture.asset != null) {
					texture.asset.retain();
				}
			}
		}
		if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
			this.get_renderTexture().destroy();
			this.set_renderTexture(null);
		}
		this.set_textureTilePacker(null);
		this.set_renderTexture(null);
		this.explicitRenderPendingResultCallbacks = null;
		this.content = null;
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		ceramic_Layer.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offRenderTextureChange();
	}
	,__class__: ceramic_Filter
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_density:"set_density",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture",set_textureTilePacker:"set_textureTilePacker",set_explicitRender:"set_explicitRender",set_autoRender:"set_autoRender",set_textureFilter:"set_textureFilter",set_enabled:"set_enabled",set_hitVisual:"set_hitVisual",set_textureId:"set_textureId"})
});
var ceramic_Flags = {};
ceramic_Flags._new = function() {
	var this1 = 0;
	return this1;
};
ceramic_Flags.bool = function(this1,bit) {
	var mask = 1 << bit;
	return (this1 & mask) == mask;
};
ceramic_Flags.setBool = function(this1,bit,bool) {
	if(bool) {
		this1 |= 1 << bit;
	} else {
		this1 &= ~(1 << bit);
	}
	return bool;
};
ceramic_Flags.getBool = function(flags,bit) {
	var mask = 1 << bit;
	return (flags & mask) == mask;
};
ceramic_Flags.setBoolAndGetFlags = function(flags,bit,bool) {
	flags = bool ? flags | 1 << bit : flags & ~(1 << bit);
	return flags;
};
var ceramic_FontAsset = function(name,options) {
	this.unobservedFont = null;
	this.fontAutoruns = null;
	this.pages = null;
	this.fontData = null;
	ceramic_Asset.call(this,"font",name,options);
	this.set_handleTexturesDensityChange(true);
	this.assets = new ceramic_Assets();
};
$hxClasses["ceramic.FontAsset"] = ceramic_FontAsset;
ceramic_FontAsset.__name__ = "ceramic.FontAsset";
ceramic_FontAsset.__super__ = ceramic_Asset;
ceramic_FontAsset.prototype = $extend(ceramic_Asset.prototype,{
	emitReplaceFont: function(newFont,prevFont) {
		var len = 0;
		if(this.__cbOnReplaceFont != null) {
			len += this.__cbOnReplaceFont.length;
		}
		if(this.__cbOnceReplaceFont != null) {
			len += this.__cbOnceReplaceFont.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceFont.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReplaceFont[ii];
					++i;
				}
			}
			if(this.__cbOnceReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReplaceFont.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReplaceFont[ii];
					var unbind = this.__cbOnceOwnerUnbindReplaceFont[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReplaceFont = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newFont,prevFont);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceFont: function(owner,handleNewFontPrevFont) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceFont" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFontPrevFont != null) {
					_gthis.offReplaceFont(handleNewFontPrevFont);
					handleNewFontPrevFont = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceFont == null) {
				this.__cbOnOwnerUnbindReplaceFont = [];
			}
			this.__cbOnOwnerUnbindReplaceFont.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFontPrevFont = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceFont == null) {
				this.__cbOnOwnerUnbindReplaceFont = [];
			}
			this.__cbOnOwnerUnbindReplaceFont.push(null);
		}
		if(this.__cbOnReplaceFont == null) {
			this.__cbOnReplaceFont = [];
		}
		this.__cbOnReplaceFont.push(handleNewFontPrevFont);
	}
	,onceReplaceFont: function(owner,handleNewFontPrevFont) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceFont" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFontPrevFont != null) {
					_gthis.offReplaceFont(handleNewFontPrevFont);
					handleNewFontPrevFont = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceFont == null) {
				this.__cbOnceOwnerUnbindReplaceFont = [];
			}
			this.__cbOnceOwnerUnbindReplaceFont.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFontPrevFont = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceFont == null) {
				this.__cbOnceOwnerUnbindReplaceFont = [];
			}
			this.__cbOnceOwnerUnbindReplaceFont.push(null);
		}
		if(this.__cbOnceReplaceFont == null) {
			this.__cbOnceReplaceFont = [];
		}
		this.__cbOnceReplaceFont.push(handleNewFontPrevFont);
	}
	,offReplaceFont: function(handleNewFontPrevFont) {
		if(handleNewFontPrevFont != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceFont != null) {
				index = this.__cbOnReplaceFont.indexOf(handleNewFontPrevFont);
				if(index != -1) {
					this.__cbOnReplaceFont.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceFont[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceFont.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceFont != null) {
				index = this.__cbOnceReplaceFont.indexOf(handleNewFontPrevFont);
				if(index != -1) {
					this.__cbOnceReplaceFont.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceFont[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceFont.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceFont.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceFont[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceFont = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceFont.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceFont[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceFont = null;
			}
			this.__cbOnReplaceFont = null;
			this.__cbOnceReplaceFont = null;
		}
	}
	,listensReplaceFont: function() {
		if(!(this.__cbOnReplaceFont != null && this.__cbOnReplaceFont.length > 0)) {
			if(this.__cbOnceReplaceFont != null) {
				return this.__cbOnceReplaceFont.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_font: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fontAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fontAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedFont;
	}
	,set_font: function(font) {
		var prevValue = this.unobservedFont;
		this.unobservedFont = font;
		if(prevValue == font) {
			return font;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFontChange(font,prevValue);
		var fieldAutoruns = this.fontAutoruns;
		if(fieldAutoruns != null) {
			this.fontAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return font;
	}
	,invalidateFont: function() {
		var value = this.unobservedFont;
		this.emitFontChange(value,value);
		var fieldAutoruns = this.fontAutoruns;
		if(fieldAutoruns != null) {
			this.fontAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitFontChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFontChange != null) {
			len += this.__cbOnFontChange.length;
		}
		if(this.__cbOnceFontChange != null) {
			len += this.__cbOnceFontChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFontChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFontChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFontChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFontChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFontChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFontChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFontChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fontChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFontChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFontChange == null) {
				this.__cbOnOwnerUnbindFontChange = [];
			}
			this.__cbOnOwnerUnbindFontChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFontChange == null) {
				this.__cbOnOwnerUnbindFontChange = [];
			}
			this.__cbOnOwnerUnbindFontChange.push(null);
		}
		if(this.__cbOnFontChange == null) {
			this.__cbOnFontChange = [];
		}
		this.__cbOnFontChange.push(handleCurrentPrevious);
	}
	,onceFontChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fontChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFontChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFontChange == null) {
				this.__cbOnceOwnerUnbindFontChange = [];
			}
			this.__cbOnceOwnerUnbindFontChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFontChange == null) {
				this.__cbOnceOwnerUnbindFontChange = [];
			}
			this.__cbOnceOwnerUnbindFontChange.push(null);
		}
		if(this.__cbOnceFontChange == null) {
			this.__cbOnceFontChange = [];
		}
		this.__cbOnceFontChange.push(handleCurrentPrevious);
	}
	,offFontChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFontChange != null) {
				index = this.__cbOnFontChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFontChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFontChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFontChange.splice(index,1);
				}
			}
			if(this.__cbOnceFontChange != null) {
				index = this.__cbOnceFontChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFontChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFontChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFontChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFontChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFontChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFontChange = null;
			}
			if(this.__cbOnceOwnerUnbindFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFontChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFontChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFontChange = null;
			}
			this.__cbOnFontChange = null;
			this.__cbOnceFontChange = null;
		}
	}
	,listensFontChange: function() {
		if(!(this.__cbOnFontChange != null && this.__cbOnFontChange.length > 0)) {
			if(this.__cbOnceFontChange != null) {
				return this.__cbOnceFontChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.assets.inheritRuntimeAssetsFromAssets(this.owner);
		var toDestroy = [];
		var asset = this.assets.iterator();
		while(asset.hasNext()) {
			var asset1 = asset.next();
			toDestroy.push(asset1);
		}
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load font asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 44, className : "ceramic.FontAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		ceramic_App.app.logger.info("Load font " + this.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 50, className : "ceramic.FontAsset", methodName : "load"});
		this.assets.runtimeAssets = this.runtimeAssets;
		var asset = new ceramic_TextAsset(this.name);
		asset.set_handleTexturesDensityChange(false);
		asset.set_path(this.path);
		this.assets.addAsset(asset);
		this.assets.onceComplete(this,function(success) {
			var text = asset.get_text();
			if(text != null) {
				try {
					_gthis.fontData = ceramic_BitmapFontParser.parse(text);
					var pages = new haxe_ds_StringMap();
					var assetList = [];
					var _g = 0;
					var _g1 = _gthis.fontData.pages;
					while(_g < _g1.length) {
						var page = _g1[_g];
						++_g;
						var pathInfo = ceramic_Assets.decodePath(page.file);
						var asset1 = new ceramic_ImageAsset(pathInfo.name);
						asset1.set_handleTexturesDensityChange(false);
						asset1.set_path(pathInfo.path);
						_gthis.assets.addAsset(asset1);
						assetList.push(asset1);
					}
					_gthis.assets.onceComplete(_gthis,function(success) {
						if(success) {
							var _g = 0;
							while(_g < assetList.length) {
								var asset = assetList[_g];
								++_g;
								var key = asset.path;
								var value = asset.get_texture();
								pages.h[key] = value;
							}
							var prevFont = _gthis.get_font();
							var newFont = new ceramic_BitmapFont(_gthis.fontData,pages);
							newFont.id = "font:" + _gthis.path;
							newFont.asset = _gthis;
							_gthis.set_font(newFont);
							if(prevFont != null) {
								_gthis.emitReplaceFont(_gthis.get_font(),prevFont);
								if(prevFont == ceramic_App.app.defaultFont) {
									ceramic_App.app.defaultFont = _gthis.get_font();
								}
								var _g = 0;
								var _g1 = [].concat(ceramic_App.app.visuals);
								while(_g < _g1.length) {
									var visual = _g1[_g];
									++_g;
									if(visual._lifecycleState >= 0 && ((visual) instanceof ceramic_Text)) {
										var text = visual;
										if(text.font == prevFont) {
											text.set_font(_gthis.get_font());
										}
									}
								}
								prevFont.asset = null;
								prevFont.destroy();
							}
							var _g = 0;
							while(_g < toDestroy.length) {
								var asset = toDestroy[_g];
								++_g;
								if(((asset) instanceof ceramic_ImageAsset)) {
									var imageAsset = asset;
									if(assetList.indexOf(imageAsset) == -1) {
										asset.destroy();
									}
								} else {
									asset.destroy();
								}
							}
							_gthis.set_status(ceramic_AssetStatus.READY);
							_gthis.emitComplete(true);
							if(_gthis.handleTexturesDensityChange) {
								_gthis.checkTexturesDensity();
							}
						} else {
							_gthis.set_status(ceramic_AssetStatus.BROKEN);
							ceramic_App.app.logger.error("Failed to load textures for font at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 156, className : "ceramic.FontAsset", methodName : "load"});
							_gthis.emitComplete(false);
						}
					});
					_gthis.assets.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 162, className : "ceramic.FontAsset", methodName : "load"});
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to decode font data at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 166, className : "ceramic.FontAsset", methodName : "load"});
					_gthis.emitComplete(false);
				}
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load font data at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 172, className : "ceramic.FontAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
		this.assets.load(null,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 177, className : "ceramic.FontAsset", methodName : "load"});
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
		var prevPath = this.path;
		this.computePath();
		if(prevPath != this.path) {
			ceramic_App.app.logger.info("Reload font (" + prevPath + " -> " + this.path + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 198, className : "ceramic.FontAsset", methodName : "checkTexturesDensity"});
			this.load();
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload font (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FontAsset.hx", lineNumber : 219, className : "ceramic.FontAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_font() != null) {
			this.get_font().destroy();
			this.set_font(null);
		}
		if(this.pages != null) {
			var h = this.pages.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var texture = this.pages.h[key];
				texture.destroy();
			}
			this.pages = null;
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceFont();
		this.offFontChange();
	}
	,__class__: ceramic_FontAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_font:"set_font",get_font:"get_font"})
});
var ceramic_Value = function(value) {
	if(value != null) {
		this.value = value;
	}
};
$hxClasses["ceramic.Value"] = ceramic_Value;
ceramic_Value.__name__ = "ceramic.Value";
ceramic_Value.prototype = {
	__class__: ceramic_Value
};
var ceramic_Fragment = function(assets,editedItems) {
	if(editedItems == null) {
		editedItems = false;
	}
	this.fragmentComponents = null;
	this.timeline = null;
	this.pendingLoads = 0;
	this.floatD = 0.0;
	this.floatC = 0.0;
	this.floatB = 0.0;
	this.floatA = 0.0;
	this.autoUpdateTimeline = true;
	this.resizable = false;
	this.fragmentData = null;
	this.fps = 30;
	this.assets = null;
	this.editedItems = false;
	ceramic_Layer.call(this);
	this.editedItems = editedItems;
	this.assets = assets;
	this.entities = [];
	this.items = [];
};
$hxClasses["ceramic.Fragment"] = ceramic_Fragment;
ceramic_Fragment.__name__ = "ceramic.Fragment";
ceramic_Fragment.cacheData = function(fragmentData) {
	ceramic_Fragment.cachedFragmentData.h[fragmentData.id] = fragmentData;
};
ceramic_Fragment.getData = function(fragmentId) {
	return ceramic_Fragment.cachedFragmentData.h[fragmentId];
};
ceramic_Fragment.__super__ = ceramic_Layer;
ceramic_Fragment.prototype = $extend(ceramic_Layer.prototype,{
	emitFloatAChange: function(floatA,prevFloatA) {
		var len = 0;
		if(this.__cbOnFloatAChange != null) {
			len += this.__cbOnFloatAChange.length;
		}
		if(this.__cbOnceFloatAChange != null) {
			len += this.__cbOnceFloatAChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatAChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFloatAChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFloatAChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFloatAChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFloatAChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFloatAChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatA,prevFloatA);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatAChange: function(owner,handleFloatAPrevFloatA) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatAChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatAPrevFloatA != null) {
					_gthis.offFloatAChange(handleFloatAPrevFloatA);
					handleFloatAPrevFloatA = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatAChange == null) {
				this.__cbOnOwnerUnbindFloatAChange = [];
			}
			this.__cbOnOwnerUnbindFloatAChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatAPrevFloatA = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatAChange == null) {
				this.__cbOnOwnerUnbindFloatAChange = [];
			}
			this.__cbOnOwnerUnbindFloatAChange.push(null);
		}
		if(this.__cbOnFloatAChange == null) {
			this.__cbOnFloatAChange = [];
		}
		this.__cbOnFloatAChange.push(handleFloatAPrevFloatA);
	}
	,onceFloatAChange: function(owner,handleFloatAPrevFloatA) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatAChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatAPrevFloatA != null) {
					_gthis.offFloatAChange(handleFloatAPrevFloatA);
					handleFloatAPrevFloatA = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatAChange == null) {
				this.__cbOnceOwnerUnbindFloatAChange = [];
			}
			this.__cbOnceOwnerUnbindFloatAChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatAPrevFloatA = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatAChange == null) {
				this.__cbOnceOwnerUnbindFloatAChange = [];
			}
			this.__cbOnceOwnerUnbindFloatAChange.push(null);
		}
		if(this.__cbOnceFloatAChange == null) {
			this.__cbOnceFloatAChange = [];
		}
		this.__cbOnceFloatAChange.push(handleFloatAPrevFloatA);
	}
	,offFloatAChange: function(handleFloatAPrevFloatA) {
		if(handleFloatAPrevFloatA != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatAChange != null) {
				index = this.__cbOnFloatAChange.indexOf(handleFloatAPrevFloatA);
				if(index != -1) {
					this.__cbOnFloatAChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatAChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatAChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatAChange != null) {
				index = this.__cbOnceFloatAChange.indexOf(handleFloatAPrevFloatA);
				if(index != -1) {
					this.__cbOnceFloatAChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatAChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatAChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatAChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatAChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatAChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatAChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatAChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatAChange = null;
			}
			this.__cbOnFloatAChange = null;
			this.__cbOnceFloatAChange = null;
		}
	}
	,listensFloatAChange: function() {
		if(!(this.__cbOnFloatAChange != null && this.__cbOnFloatAChange.length > 0)) {
			if(this.__cbOnceFloatAChange != null) {
				return this.__cbOnceFloatAChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFloatBChange: function(floatB,prevFloatB) {
		var len = 0;
		if(this.__cbOnFloatBChange != null) {
			len += this.__cbOnFloatBChange.length;
		}
		if(this.__cbOnceFloatBChange != null) {
			len += this.__cbOnceFloatBChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatBChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFloatBChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFloatBChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFloatBChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFloatBChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFloatBChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatB,prevFloatB);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatBChange: function(owner,handleFloatBPrevFloatB) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatBChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatBPrevFloatB != null) {
					_gthis.offFloatBChange(handleFloatBPrevFloatB);
					handleFloatBPrevFloatB = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatBChange == null) {
				this.__cbOnOwnerUnbindFloatBChange = [];
			}
			this.__cbOnOwnerUnbindFloatBChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatBPrevFloatB = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatBChange == null) {
				this.__cbOnOwnerUnbindFloatBChange = [];
			}
			this.__cbOnOwnerUnbindFloatBChange.push(null);
		}
		if(this.__cbOnFloatBChange == null) {
			this.__cbOnFloatBChange = [];
		}
		this.__cbOnFloatBChange.push(handleFloatBPrevFloatB);
	}
	,onceFloatBChange: function(owner,handleFloatBPrevFloatB) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatBChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatBPrevFloatB != null) {
					_gthis.offFloatBChange(handleFloatBPrevFloatB);
					handleFloatBPrevFloatB = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatBChange == null) {
				this.__cbOnceOwnerUnbindFloatBChange = [];
			}
			this.__cbOnceOwnerUnbindFloatBChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatBPrevFloatB = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatBChange == null) {
				this.__cbOnceOwnerUnbindFloatBChange = [];
			}
			this.__cbOnceOwnerUnbindFloatBChange.push(null);
		}
		if(this.__cbOnceFloatBChange == null) {
			this.__cbOnceFloatBChange = [];
		}
		this.__cbOnceFloatBChange.push(handleFloatBPrevFloatB);
	}
	,offFloatBChange: function(handleFloatBPrevFloatB) {
		if(handleFloatBPrevFloatB != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatBChange != null) {
				index = this.__cbOnFloatBChange.indexOf(handleFloatBPrevFloatB);
				if(index != -1) {
					this.__cbOnFloatBChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatBChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatBChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatBChange != null) {
				index = this.__cbOnceFloatBChange.indexOf(handleFloatBPrevFloatB);
				if(index != -1) {
					this.__cbOnceFloatBChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatBChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatBChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatBChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatBChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatBChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatBChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatBChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatBChange = null;
			}
			this.__cbOnFloatBChange = null;
			this.__cbOnceFloatBChange = null;
		}
	}
	,listensFloatBChange: function() {
		if(!(this.__cbOnFloatBChange != null && this.__cbOnFloatBChange.length > 0)) {
			if(this.__cbOnceFloatBChange != null) {
				return this.__cbOnceFloatBChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFloatCChange: function(floatC,prevFloatC) {
		var len = 0;
		if(this.__cbOnFloatCChange != null) {
			len += this.__cbOnFloatCChange.length;
		}
		if(this.__cbOnceFloatCChange != null) {
			len += this.__cbOnceFloatCChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatCChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFloatCChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFloatCChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFloatCChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFloatCChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFloatCChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatC,prevFloatC);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatCChange: function(owner,handleFloatCPrevFloatC) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatCChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatCPrevFloatC != null) {
					_gthis.offFloatCChange(handleFloatCPrevFloatC);
					handleFloatCPrevFloatC = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatCChange == null) {
				this.__cbOnOwnerUnbindFloatCChange = [];
			}
			this.__cbOnOwnerUnbindFloatCChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatCPrevFloatC = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatCChange == null) {
				this.__cbOnOwnerUnbindFloatCChange = [];
			}
			this.__cbOnOwnerUnbindFloatCChange.push(null);
		}
		if(this.__cbOnFloatCChange == null) {
			this.__cbOnFloatCChange = [];
		}
		this.__cbOnFloatCChange.push(handleFloatCPrevFloatC);
	}
	,onceFloatCChange: function(owner,handleFloatCPrevFloatC) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatCChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatCPrevFloatC != null) {
					_gthis.offFloatCChange(handleFloatCPrevFloatC);
					handleFloatCPrevFloatC = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatCChange == null) {
				this.__cbOnceOwnerUnbindFloatCChange = [];
			}
			this.__cbOnceOwnerUnbindFloatCChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatCPrevFloatC = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatCChange == null) {
				this.__cbOnceOwnerUnbindFloatCChange = [];
			}
			this.__cbOnceOwnerUnbindFloatCChange.push(null);
		}
		if(this.__cbOnceFloatCChange == null) {
			this.__cbOnceFloatCChange = [];
		}
		this.__cbOnceFloatCChange.push(handleFloatCPrevFloatC);
	}
	,offFloatCChange: function(handleFloatCPrevFloatC) {
		if(handleFloatCPrevFloatC != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatCChange != null) {
				index = this.__cbOnFloatCChange.indexOf(handleFloatCPrevFloatC);
				if(index != -1) {
					this.__cbOnFloatCChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatCChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatCChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatCChange != null) {
				index = this.__cbOnceFloatCChange.indexOf(handleFloatCPrevFloatC);
				if(index != -1) {
					this.__cbOnceFloatCChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatCChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatCChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatCChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatCChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatCChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatCChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatCChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatCChange = null;
			}
			this.__cbOnFloatCChange = null;
			this.__cbOnceFloatCChange = null;
		}
	}
	,listensFloatCChange: function() {
		if(!(this.__cbOnFloatCChange != null && this.__cbOnFloatCChange.length > 0)) {
			if(this.__cbOnceFloatCChange != null) {
				return this.__cbOnceFloatCChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFloatDChange: function(floatD,prevFloatD) {
		var len = 0;
		if(this.__cbOnFloatDChange != null) {
			len += this.__cbOnFloatDChange.length;
		}
		if(this.__cbOnceFloatDChange != null) {
			len += this.__cbOnceFloatDChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatDChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFloatDChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFloatDChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFloatDChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFloatDChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFloatDChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatD,prevFloatD);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatDChange: function(owner,handleFloatDPrevFloatD) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatDChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatDPrevFloatD != null) {
					_gthis.offFloatDChange(handleFloatDPrevFloatD);
					handleFloatDPrevFloatD = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatDChange == null) {
				this.__cbOnOwnerUnbindFloatDChange = [];
			}
			this.__cbOnOwnerUnbindFloatDChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatDPrevFloatD = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatDChange == null) {
				this.__cbOnOwnerUnbindFloatDChange = [];
			}
			this.__cbOnOwnerUnbindFloatDChange.push(null);
		}
		if(this.__cbOnFloatDChange == null) {
			this.__cbOnFloatDChange = [];
		}
		this.__cbOnFloatDChange.push(handleFloatDPrevFloatD);
	}
	,onceFloatDChange: function(owner,handleFloatDPrevFloatD) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatDChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatDPrevFloatD != null) {
					_gthis.offFloatDChange(handleFloatDPrevFloatD);
					handleFloatDPrevFloatD = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatDChange == null) {
				this.__cbOnceOwnerUnbindFloatDChange = [];
			}
			this.__cbOnceOwnerUnbindFloatDChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatDPrevFloatD = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatDChange == null) {
				this.__cbOnceOwnerUnbindFloatDChange = [];
			}
			this.__cbOnceOwnerUnbindFloatDChange.push(null);
		}
		if(this.__cbOnceFloatDChange == null) {
			this.__cbOnceFloatDChange = [];
		}
		this.__cbOnceFloatDChange.push(handleFloatDPrevFloatD);
	}
	,offFloatDChange: function(handleFloatDPrevFloatD) {
		if(handleFloatDPrevFloatD != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatDChange != null) {
				index = this.__cbOnFloatDChange.indexOf(handleFloatDPrevFloatD);
				if(index != -1) {
					this.__cbOnFloatDChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatDChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatDChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatDChange != null) {
				index = this.__cbOnceFloatDChange.indexOf(handleFloatDPrevFloatD);
				if(index != -1) {
					this.__cbOnceFloatDChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatDChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatDChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatDChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatDChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatDChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatDChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatDChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatDChange = null;
			}
			this.__cbOnFloatDChange = null;
			this.__cbOnceFloatDChange = null;
		}
	}
	,listensFloatDChange: function() {
		if(!(this.__cbOnFloatDChange != null && this.__cbOnFloatDChange.length > 0)) {
			if(this.__cbOnceFloatDChange != null) {
				return this.__cbOnceFloatDChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitLocation: function(location) {
		var len = 0;
		if(this.__cbOnLocation != null) {
			len += this.__cbOnLocation.length;
		}
		if(this.__cbOnceLocation != null) {
			len += this.__cbOnceLocation.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnLocation.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnLocation[ii];
					++i;
				}
			}
			if(this.__cbOnceLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnceLocation.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceLocation[ii];
					var unbind = this.__cbOnceOwnerUnbindLocation[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceLocation = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(location);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onLocation: function(owner,handleLocation) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "location" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLocation != null) {
					_gthis.offLocation(handleLocation);
					handleLocation = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindLocation == null) {
				this.__cbOnOwnerUnbindLocation = [];
			}
			this.__cbOnOwnerUnbindLocation.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLocation = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindLocation == null) {
				this.__cbOnOwnerUnbindLocation = [];
			}
			this.__cbOnOwnerUnbindLocation.push(null);
		}
		if(this.__cbOnLocation == null) {
			this.__cbOnLocation = [];
		}
		this.__cbOnLocation.push(handleLocation);
	}
	,onceLocation: function(owner,handleLocation) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "location" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLocation != null) {
					_gthis.offLocation(handleLocation);
					handleLocation = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindLocation == null) {
				this.__cbOnceOwnerUnbindLocation = [];
			}
			this.__cbOnceOwnerUnbindLocation.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLocation = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindLocation == null) {
				this.__cbOnceOwnerUnbindLocation = [];
			}
			this.__cbOnceOwnerUnbindLocation.push(null);
		}
		if(this.__cbOnceLocation == null) {
			this.__cbOnceLocation = [];
		}
		this.__cbOnceLocation.push(handleLocation);
	}
	,offLocation: function(handleLocation) {
		if(handleLocation != null) {
			var index;
			var unbind;
			if(this.__cbOnLocation != null) {
				index = this.__cbOnLocation.indexOf(handleLocation);
				if(index != -1) {
					this.__cbOnLocation.splice(index,1);
					unbind = this.__cbOnOwnerUnbindLocation[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindLocation.splice(index,1);
				}
			}
			if(this.__cbOnceLocation != null) {
				index = this.__cbOnceLocation.indexOf(handleLocation);
				if(index != -1) {
					this.__cbOnceLocation.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindLocation[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindLocation.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindLocation.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindLocation[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindLocation = null;
			}
			if(this.__cbOnceOwnerUnbindLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindLocation.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindLocation[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindLocation = null;
			}
			this.__cbOnLocation = null;
			this.__cbOnceLocation = null;
		}
	}
	,listensLocation: function() {
		if(!(this.__cbOnLocation != null && this.__cbOnLocation.length > 0)) {
			if(this.__cbOnceLocation != null) {
				return this.__cbOnceLocation.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_autoUpdateTimeline: function(autoUpdateTimeline) {
		if(this.autoUpdateTimeline != autoUpdateTimeline) {
			this.autoUpdateTimeline = autoUpdateTimeline;
			if(this.timeline != null) {
				this.timeline.set_autoUpdate(autoUpdateTimeline);
			}
		}
		return autoUpdateTimeline;
	}
	,set_floatA: function(floatA) {
		if(this.floatA != floatA) {
			var prevFloatA = this.floatA;
			this.floatA = floatA;
			this.emitFloatAChange(floatA,prevFloatA);
		}
		return floatA;
	}
	,set_floatB: function(floatB) {
		if(this.floatB != floatB) {
			var prevFloatA = this.floatB;
			this.floatB = floatB;
			this.emitFloatBChange(floatB,prevFloatA);
		}
		return floatB;
	}
	,set_floatC: function(floatC) {
		if(this.floatC != floatC) {
			var prevFloatC = this.floatC;
			this.floatC = floatC;
			this.emitFloatCChange(floatC,prevFloatC);
		}
		return floatC;
	}
	,set_floatD: function(floatD) {
		if(this.floatD != floatD) {
			var prevFloatD = this.floatD;
			this.floatD = floatD;
			this.emitFloatDChange(floatD,prevFloatD);
		}
		return floatD;
	}
	,emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReady[ii];
					++i;
				}
			}
			if(this.__cbOnceReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReady[ii];
					var unbind = this.__cbOnceOwnerUnbindReady[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReady = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_fragmentData: function(fragmentData) {
		var _gthis = this;
		this.pendingLoads++;
		this.fragmentData = fragmentData;
		var usedIds_h = Object.create(null);
		if(fragmentData != null) {
			this.set_width(fragmentData.width);
			this.set_height(fragmentData.height);
			if(fragmentData.color != null) {
				this.color = fragmentData.color;
			} else {
				this.color = 0;
			}
			if(fragmentData.transparent != null) {
				this.transparent = fragmentData.transparent;
			} else {
				this.transparent = true;
			}
			if(fragmentData.items != null) {
				var _g = 0;
				var _g1 = fragmentData.items;
				while(_g < _g1.length) {
					var item = _g1[_g];
					++_g;
					this.putItem(item);
					usedIds_h[item.id] = true;
				}
			}
		}
		if(fragmentData == null || Object.prototype.hasOwnProperty.call(fragmentData,"items")) {
			var toRemove = null;
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				if(!Object.prototype.hasOwnProperty.call(usedIds_h,entity.id)) {
					if(toRemove == null) {
						toRemove = [];
					}
					toRemove.push(entity.id);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var id = toRemove[_g];
					++_g;
					this.removeItem(id);
				}
			}
		}
		if(fragmentData != null) {
			this.pendingLoads++;
			var converter = ceramic_App.app.converters.h["ceramic.ReadOnlyMap<String,ceramic.Component>"];
			converter.basicToField(this,"components",this.assets,fragmentData.components,function(value) {
				if(_gthis._lifecycleState < 0) {
					return;
				}
				_gthis.pendingLoads--;
				_gthis.onceReady(_gthis,function() {
					_gthis.set_fragmentComponents(value);
				});
				if(_gthis.pendingLoads == 0) {
					_gthis.emitReady();
				}
			});
		}
		if(fragmentData != null && fragmentData.fps != null) {
			this.set_fps(fragmentData.fps);
		}
		var usedTrackIds = null;
		if(fragmentData != null && fragmentData.tracks != null) {
			var _g = 0;
			var _g1 = fragmentData.tracks;
			while(_g < _g1.length) {
				var track = _g1[_g];
				++_g;
				if(usedTrackIds == null) {
					usedTrackIds = new haxe_ds_StringMap();
				}
				usedTrackIds.h[track.entity + "#" + track.field] = true;
				this.putTrack(null,track);
			}
			if(this.timeline != null && this.timeline.tracks.length > 0) {
				var _g = 0;
				var _g1 = [].concat(this.timeline.tracks);
				while(_g < _g1.length) {
					var existingTrack = _g1[_g];
					++_g;
					if(usedTrackIds == null || !Object.prototype.hasOwnProperty.call(usedTrackIds.h,existingTrack.id)) {
						var parts = existingTrack.id.split("#");
						if(parts.length == 2) {
							this.removeTrack(parts[0],parts[1]);
						} else {
							ceramic_App.app.logger.warning("Cannot remove track with unhandled id: " + existingTrack.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 311, className : "ceramic.Fragment", methodName : "set_fragmentData"});
						}
					}
				}
			}
		}
		var usedLabels = null;
		if(fragmentData != null && fragmentData.labels != null) {
			var rawLabels = fragmentData.labels;
			var _g = 0;
			var _g1 = Reflect.fields(rawLabels);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(usedLabels == null) {
					usedLabels = new haxe_ds_StringMap();
				}
				usedLabels.h[name] = true;
				var index = rawLabels[name];
				this.putLabel(index,name);
			}
			if(this.timeline != null && this.timeline.labels != null) {
				var _g = 0;
				var _g1 = [].concat(this.timeline.labels);
				while(_g < _g1.length) {
					var existingLabel = _g1[_g];
					++_g;
					if(usedLabels == null || !Object.prototype.hasOwnProperty.call(usedLabels.h,existingLabel)) {
						this.timeline.removeLabel(existingLabel);
					}
				}
			}
		}
		this.pendingLoads--;
		if(this.pendingLoads == 0) {
			this.emitReady();
		}
		return fragmentData;
	}
	,set_fps: function(fps) {
		if(this.fps != fps) {
			this.fps = fps;
			if(this.timeline != null) {
				this.timeline.fps = fps;
			}
			if(this.tracks != null) {
				var _g = 0;
				var _g1 = this.tracks;
				while(_g < _g1.length) {
					var track = _g1[_g];
					++_g;
					this.putTrack(null,track);
				}
			}
		}
		return fps;
	}
	,putItem: function(item) {
		var existing = this.get(item.id);
		var existingWasVisual = false;
		if(existing != null) {
			existingWasVisual = ((existing) instanceof ceramic_Visual);
			var c = js_Boot.getClass(existing);
			if(item.entity != c.__name__) {
				this.removeItem(item.id);
				existing = null;
			}
		} else {
			this.items.push(item);
		}
		var name = item.entity;
		var entityClass = $hxClasses[name];
		var instance = existing != null ? existing : null;
		var isFragment = item.entity == "ceramic.Fragment";
		if(instance == null) {
			var newArgs = [];
			if(isFragment) {
				newArgs.push(this.assets);
				newArgs.push(false);
			}
			instance = Type.createInstance(entityClass,newArgs);
		}
		if(instance == null) {
			throw haxe_Exception.thrown("Failed to create instance of " + item.entity);
		}
		instance.id = item.id;
		if(isFragment) {
			var frag = instance;
			frag.set_depthRange(1);
		}
		if(instance.get_data().name == null && item.name != null) {
			instance.get_data().name = item.name;
		}
		if(item.data != null && instance.get_data() != null) {
			var _g = 0;
			var _g1 = Reflect.fields(item.data);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				instance.get_data()[key] = Reflect.field(item.data,key);
			}
		}
		if(item.props != null) {
			var orderedProps = Reflect.fields(item.props);
			haxe_ds_ArraySort.sort(orderedProps,function(a,b) {
				var nA = 0;
				var nB = 0;
				return nA - nB;
			});
			var _g = 0;
			while(_g < orderedProps.length) {
				var field = orderedProps[_g];
				++_g;
				var fieldType = ceramic_FieldInfo.typeOf(item.entity,field);
				var value = Reflect.field(item.props,field);
				var converter = fieldType != null ? ceramic_App.app.converters.h[fieldType] : null;
				if(converter != null) {
					this.putItemField(isFragment,item,instance,field,value,converter);
				} else {
					if(!Object.prototype.hasOwnProperty.call(ceramic_Fragment.basicTypes.h,fieldType)) {
						var resolvedEnum = $hxEnums[fieldType];
						if(resolvedEnum != null) {
							var _g1 = 0;
							var _this = resolvedEnum.__constructs__;
							var result = new Array(_this.length);
							var _g2 = 0;
							var _g3 = _this.length;
							while(_g2 < _g3) {
								var i = _g2++;
								result[i] = _this[i]._hx_name;
							}
							var _g4 = result;
							while(_g1 < _g4.length) {
								var name = _g4[_g1];
								++_g1;
								if(name.toLowerCase() == value.toLowerCase()) {
									value = Type.createEnum(resolvedEnum,name);
									break;
								}
							}
						}
					}
					Reflect.setProperty(instance,field,value);
				}
			}
			var fieldType = ceramic_FieldInfo.typeOf(item.entity,"components");
			var value = item.components;
			var converter = fieldType != null ? ceramic_App.app.converters.h[fieldType] : null;
			if(converter != null) {
				this.putItemField(isFragment,item,instance,"components",value,converter);
			} else {
				ceramic_App.app.logger.warning("No converter found for field: components (type: " + fieldType + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 471, className : "ceramic.Fragment", methodName : "putItem"});
			}
		}
		if(existing == null) {
			if(ceramic_FieldInfo.typeOf(item.entity,"assets") == "ceramic.Assets") {
				Reflect.setProperty(instance,"assets",this.assets);
			}
			this.entities.push(instance);
		}
		var isVisual = ((instance) instanceof ceramic_Visual);
		if(isVisual && !existingWasVisual) {
			this.add(instance);
		}
		if(existing == null) {
			this.putTracksForItem(item.id);
		}
		return instance;
	}
	,putItemField: function(isFragment,item,instance,field,value,converter) {
		var _gthis = this;
		this.pendingLoads++;
		converter.basicToField(instance,field,this.assets,value,function(value) {
			_gthis.pendingLoads--;
			if(_gthis._lifecycleState < 0) {
				return;
			}
			if(instance._lifecycleState >= 0) {
				if(isFragment && field == "fragmentData") {
					var fragment = instance;
					_gthis.pendingLoads++;
					fragment.onceReady(_gthis,function() {
						_gthis.pendingLoads--;
						if(_gthis._lifecycleState < 0) {
							return;
						}
						if(_gthis.pendingLoads == 0) {
							_gthis.emitReady();
						}
					});
					fragment.set_fragmentData(value);
				} else if(field != "components") {
					Reflect.setProperty(instance,field,value);
				} else {
					_gthis.onceReady(_gthis,function() {
						var map = null;
						if(value != null) {
							map = value;
							if(map != null) {
								var h = map.h;
								var k_h = h;
								var k_keys = Object.keys(h);
								var k_length = k_keys.length;
								var k_current = 0;
								while(k_current < k_length) {
									var k = k_keys[k_current++];
									var c = map.h[k];
									if(c != null) {
										instance.component(k,c);
									}
								}
							}
						}
					});
				}
			}
			if(_gthis.pendingLoads == 0) {
				_gthis.emitReady();
			}
		});
	}
	,get: function(itemId) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.id == itemId) {
				return entity;
			}
		}
		return null;
	}
	,getItemInstanceByName: function(name) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.get_data().name == name) {
				return entity;
			}
		}
		return null;
	}
	,getItem: function(itemId) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.id == itemId) {
				return item;
			}
		}
		return null;
	}
	,getItemByName: function(name) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.name == name) {
				return item;
			}
		}
		return null;
	}
	,typeOfItem: function(itemId) {
		var item = this.getItem(itemId);
		if(item != null) {
			return item.entity;
		} else {
			ceramic_App.app.logger.warning("Failed to resolve entity type for item " + itemId,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 684, className : "ceramic.Fragment", methodName : "typeOfItem"});
			return null;
		}
	}
	,removeItem: function(itemId) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.id == itemId) {
				HxOverrides.remove(this.entities,entity);
				entity.destroy();
				break;
			}
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.id == itemId) {
				HxOverrides.remove(this.items,item);
				break;
			}
		}
	}
	,removeAllItems: function() {
		var _g = 0;
		var _g1 = [].concat(this.entities);
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			HxOverrides.remove(this.entities,entity);
			entity.destroy();
		}
		var _g = 0;
		var _g1 = [].concat(this.items);
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			HxOverrides.remove(this.items,item);
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
		if(this.timeline != null) {
			this.timeline.destroy();
			this.timeline = null;
		}
		this.removeAllItems();
	}
	,set_components: function(components) {
		if(this._components == components) {
			return components;
		}
		if(this._components != null) {
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(components == null || !Object.prototype.hasOwnProperty.call(components.h,name)) {
					if(this.fragmentComponents == null || !Object.prototype.hasOwnProperty.call(this.fragmentComponents.h,name)) {
						this.removeComponent(name);
					}
				}
			}
		}
		if(components != null) {
			var h = components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = components.h[name];
				if(this._components != null) {
					var existing = this._components.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this._components = components;
		return components;
	}
	,set_fragmentComponents: function(fragmentComponents) {
		if(this.fragmentComponents == fragmentComponents) {
			return fragmentComponents;
		}
		if(this.fragmentComponents != null) {
			var h = this.fragmentComponents.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(fragmentComponents == null || !Object.prototype.hasOwnProperty.call(fragmentComponents.h,name)) {
					this.removeComponent(name);
				}
			}
		}
		if(fragmentComponents != null) {
			var h = fragmentComponents.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = fragmentComponents.h[name];
				if(this.fragmentComponents != null) {
					var existing = this.fragmentComponents.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this.fragmentComponents = fragmentComponents;
		return fragmentComponents;
	}
	,isManagedComponent: function() {
	}
	,putTrack: function(entityType,track) {
		var existingIndexes = null;
		var existing = this.getTrack(track.entity,track.field);
		if(existing == null) {
			if(this.tracks == null) {
				this.tracks = [];
			}
			this.tracks.push(track);
		} else {
			existingIndexes = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = existing.keyframes;
			while(_g < _g1.length) {
				var keyframe = _g1[_g];
				++_g;
				existingIndexes.h[keyframe.index] = true;
			}
			var indexOfTrack = this.tracks.indexOf(existing);
			this.tracks[indexOfTrack] = track;
		}
		var entityId = track.entity;
		var entity = this.get(entityId);
		if(track.keyframes != null && track.keyframes.length > 0) {
			this.createTimelineIfNeeded();
			var field = track.field;
			var trackId = entityId + "#" + field;
			var trackOptions = track.options;
			if(entityType == null) {
				entityType = this.typeOfItem(track.entity);
			}
			if(entityType == null) {
				ceramic_App.app.logger.warning("Cannot update timeline track " + trackId + ": failed to resolve entity type",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1008, className : "ceramic.Fragment", methodName : "putTrack"});
				return;
			}
			var entityInfo = ceramic_FieldInfo.types(entityType);
			var entityFieldType = entityInfo != null ? entityInfo.h[field] : null;
			if(entityFieldType == null) {
				ceramic_App.app.logger.warning("Cannot update timeline track " + trackId + ": failed to resolve info for " + field + " of entity type " + entityType,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1014, className : "ceramic.Fragment", methodName : "putTrack"});
				return;
			}
			var timelineTrack = this.timeline.get(trackId);
			if(timelineTrack == null) {
				if(entity == null) {
					ceramic_App.app.logger.warning("Failed to create timeline track " + trackId + " because there is no entity with id " + track.entity,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1022, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
				ceramic_Fragment._trackResult.value = null;
				ceramic_App.app.timelines.emitCreateTrack(entityFieldType,trackOptions,ceramic_Fragment._trackResult);
				timelineTrack = ceramic_Fragment._trackResult.value;
				if(timelineTrack == null) {
					ceramic_App.app.logger.warning("Failed to create timeline track " + trackId + " for " + field + " of entity type " + entityType,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1030, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
				entity.onDestroy(timelineTrack,function(_) {
					timelineTrack.destroy();
				});
				timelineTrack.id = trackId;
				ceramic_App.app.timelines.emitBindTrack(entityFieldType,trackOptions,timelineTrack,entity,field);
				this.timeline.add(timelineTrack);
			}
			timelineTrack.loop = track.loop;
			if(ceramic_Fragment._usedKeyframes.length > 0) {
				var _g = 0;
				var _g1 = ceramic_Fragment._usedKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					ceramic_Fragment._usedKeyframes[i] = null;
				}
				var array = ceramic_Fragment._usedKeyframes;
				if(array.length != 0) {
					if(array.length > 0) {
						array.splice(0,array.length);
					} else {
						var dArray = array;
						dArray[-1] = null;
					}
				}
			}
			var prevIndex = -1;
			var isSorted = true;
			var _g = 0;
			var _g1 = track.keyframes;
			while(_g < _g1.length) {
				var keyframe = _g1[_g];
				++_g;
				var index = keyframe.index;
				if(index < prevIndex) {
					isSorted = false;
				}
				prevIndex = index;
				var existing = timelineTrack.findKeyframeAtIndex(index);
				ceramic_Fragment._keyframeResult.value = null;
				ceramic_App.app.timelines.emitCreateKeyframe(entityFieldType,trackOptions,keyframe.value,index,ceramic_EasingUtils.easingFromString(keyframe.easing),existing,ceramic_Fragment._keyframeResult);
				var timelineKeyframe = ceramic_Fragment._keyframeResult.value;
				if(timelineKeyframe != null) {
					ceramic_Fragment._usedKeyframes.push(timelineKeyframe);
					if(existing != null) {
						if(existing != timelineKeyframe) {
							timelineTrack.remove(existing);
							timelineTrack.add(timelineKeyframe);
						}
					} else {
						timelineTrack.add(timelineKeyframe);
					}
				} else {
					ceramic_App.app.logger.warning("Failed to create or update keyframe #" + Std.string($bind(this,this.frame)) + " of track " + trackId + " for field " + field + " of entity type " + entityType,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1087, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
			}
			var toRemove = null;
			var timelineKeyframes = timelineTrack.keyframes;
			if(isSorted) {
				var usedIndex = 0;
				var _g = 0;
				var _g1 = timelineKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					var timelineKeyframe = timelineKeyframes[i];
					if(ceramic_Fragment._usedKeyframes[usedIndex] == timelineKeyframe) {
						++usedIndex;
					} else {
						if(toRemove == null) {
							toRemove = [];
						}
						toRemove.push(timelineKeyframe);
					}
				}
			} else {
				ceramic_App.app.logger.warning("Input keyframe array should be sorted by time in ascending order!",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Fragment.hx", lineNumber : 1117, className : "ceramic.Fragment", methodName : "putTrack"});
				var _g = 0;
				var _g1 = timelineKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					var timelineKeyframe = timelineKeyframes[i];
					if(ceramic_Fragment._usedKeyframes.indexOf(timelineKeyframe) == -1) {
						if(toRemove == null) {
							toRemove = [];
						}
						toRemove.push(timelineKeyframe);
					}
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var timelineKeyframe = toRemove[_g];
					++_g;
					timelineTrack.remove(timelineKeyframe);
				}
				toRemove = null;
			}
			if(ceramic_Fragment._usedKeyframes.length > 0) {
				var _g = 0;
				var _g1 = ceramic_Fragment._usedKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					ceramic_Fragment._usedKeyframes[i] = null;
				}
				var array = ceramic_Fragment._usedKeyframes;
				if(array.length != 0) {
					if(array.length > 0) {
						array.splice(0,array.length);
					} else {
						var dArray = array;
						dArray[-1] = null;
					}
				}
			}
			timelineTrack.apply();
		}
	}
	,putTracksForItem: function(itemId) {
		if(this.tracks != null) {
			var _g = 0;
			var _g1 = this.tracks.length;
			while(_g < _g1) {
				var i = _g++;
				var track = this.tracks[i];
				if(track.entity == itemId) {
					this.putTrack(null,track);
				}
			}
		}
	}
	,getTrack: function(entity,field) {
		if(this.tracks != null) {
			var _g = 0;
			var _g1 = this.tracks;
			while(_g < _g1.length) {
				var track = _g1[_g];
				++_g;
				if(track.entity == entity && track.field == field) {
					return track;
				}
			}
		}
		return null;
	}
	,removeTrack: function(entity,field) {
		if(this.tracks != null) {
			var index = -1;
			var _g = 0;
			var _g1 = this.tracks.length;
			while(_g < _g1) {
				var i = _g++;
				var track = this.tracks[i];
				if(track.entity == entity && track.field == field) {
					index = i;
					break;
				}
			}
			if(index != -1) {
				this.tracks.splice(index,1);
				if(this.timeline != null) {
					var trackId = entity + "#" + field;
					var timelineTrack = this.timeline.get(trackId);
					if(timelineTrack != null) {
						this.timeline.remove(timelineTrack);
						timelineTrack.destroy();
					}
				}
			}
		}
	}
	,createTimelineIfNeeded: function() {
		if(this.timeline == null) {
			this.timeline = new ceramic_Timeline();
			this.timeline.fps = this.fps;
			this.timeline.set_autoUpdate(this.autoUpdateTimeline);
		}
	}
	,putLabel: function(index,name) {
		this.createTimelineIfNeeded();
		this.timeline.setLabel(index,name);
	}
	,indexOfLabel: function(name) {
		if(this.timeline != null) {
			return this.timeline.indexOfLabel(name);
		}
		return -1;
	}
	,labelAtIndex: function(index) {
		if(this.timeline != null) {
			return this.timeline.labelAtIndex(index);
		}
		return null;
	}
	,removeLabel: function(name) {
		if(this.timeline != null) {
			this.timeline.removeLabel(name);
		}
	}
	,removeLabelAtIndex: function(index) {
		if(this.timeline != null) {
			this.timeline.removeLabelAtIndex(index);
		}
	}
	,get_paused: function() {
		if(this.timeline != null) {
			return this.timeline.paused;
		} else {
			return false;
		}
	}
	,set_paused: function(paused) {
		var prevPaused = this.timeline != null && this.timeline.paused;
		if(prevPaused != paused) {
			this.createTimelineIfNeeded();
			this.timeline.set_paused(paused);
		}
		return paused;
	}
	,unbindEvents: function() {
		ceramic_Layer.prototype.unbindEvents.call(this);
		this.offFloatAChange();
		this.offFloatBChange();
		this.offFloatCChange();
		this.offFloatDChange();
		this.offLocation();
		this.offReady();
	}
	,__class__: ceramic_Fragment
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_paused:"set_paused",get_paused:"get_paused",set_fragmentComponents:"set_fragmentComponents",set_floatD:"set_floatD",set_floatC:"set_floatC",set_floatB:"set_floatB",set_floatA:"set_floatA",set_autoUpdateTimeline:"set_autoUpdateTimeline",set_fragmentData:"set_fragmentData",set_fps:"set_fps"})
});
var ceramic_FragmentsAsset = function(name,options) {
	this.unobservedFragments = null;
	this.fragmentsAutoruns = null;
	ceramic_Asset.call(this,"fragments",name,options);
};
$hxClasses["ceramic.FragmentsAsset"] = ceramic_FragmentsAsset;
ceramic_FragmentsAsset.__name__ = "ceramic.FragmentsAsset";
ceramic_FragmentsAsset.__super__ = ceramic_Asset;
ceramic_FragmentsAsset.prototype = $extend(ceramic_Asset.prototype,{
	get_fragments: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fragmentsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fragmentsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedFragments;
	}
	,set_fragments: function(fragments) {
		var prevValue = this.unobservedFragments;
		this.unobservedFragments = fragments;
		if(prevValue == fragments) {
			return fragments;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFragmentsChange(fragments,prevValue);
		var fieldAutoruns = this.fragmentsAutoruns;
		if(fieldAutoruns != null) {
			this.fragmentsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return fragments;
	}
	,invalidateFragments: function() {
		var value = this.unobservedFragments;
		this.emitFragmentsChange(value,value);
		var fieldAutoruns = this.fragmentsAutoruns;
		if(fieldAutoruns != null) {
			this.fragmentsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitFragmentsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFragmentsChange != null) {
			len += this.__cbOnFragmentsChange.length;
		}
		if(this.__cbOnceFragmentsChange != null) {
			len += this.__cbOnceFragmentsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFragmentsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFragmentsChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFragmentsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFragmentsChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFragmentsChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFragmentsChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFragmentsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fragmentsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFragmentsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFragmentsChange == null) {
				this.__cbOnOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnOwnerUnbindFragmentsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFragmentsChange == null) {
				this.__cbOnOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnOwnerUnbindFragmentsChange.push(null);
		}
		if(this.__cbOnFragmentsChange == null) {
			this.__cbOnFragmentsChange = [];
		}
		this.__cbOnFragmentsChange.push(handleCurrentPrevious);
	}
	,onceFragmentsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fragmentsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFragmentsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFragmentsChange == null) {
				this.__cbOnceOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnceOwnerUnbindFragmentsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFragmentsChange == null) {
				this.__cbOnceOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnceOwnerUnbindFragmentsChange.push(null);
		}
		if(this.__cbOnceFragmentsChange == null) {
			this.__cbOnceFragmentsChange = [];
		}
		this.__cbOnceFragmentsChange.push(handleCurrentPrevious);
	}
	,offFragmentsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFragmentsChange != null) {
				index = this.__cbOnFragmentsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFragmentsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFragmentsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFragmentsChange.splice(index,1);
				}
			}
			if(this.__cbOnceFragmentsChange != null) {
				index = this.__cbOnceFragmentsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFragmentsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFragmentsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFragmentsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFragmentsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFragmentsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFragmentsChange = null;
			}
			if(this.__cbOnceOwnerUnbindFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFragmentsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFragmentsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFragmentsChange = null;
			}
			this.__cbOnFragmentsChange = null;
			this.__cbOnceFragmentsChange = null;
		}
	}
	,listensFragmentsChange: function() {
		if(!(this.__cbOnFragmentsChange != null && this.__cbOnFragmentsChange.length > 0)) {
			if(this.__cbOnceFragmentsChange != null) {
				return this.__cbOnceFragmentsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load fragments asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FragmentsAsset.hx", lineNumber : 23, className : "ceramic.FragmentsAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load fragments " + backendPath,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FragmentsAsset.hx", lineNumber : 38, className : "ceramic.FragmentsAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,null,function(text) {
			if(text != null) {
				try {
					_gthis.set_fragments(JSON.parse(text));
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to parse fragments at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FragmentsAsset.hx", lineNumber : 46, className : "ceramic.FragmentsAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load fragments at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FragmentsAsset.hx", lineNumber : 55, className : "ceramic.FragmentsAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload fragments (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/FragmentsAsset.hx", lineNumber : 78, className : "ceramic.FragmentsAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_fragments(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offFragmentsChange();
	}
	,__class__: ceramic_FragmentsAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_fragments:"set_fragments",get_fragments:"get_fragments"})
});
var ceramic_GamepadAxis = {};
ceramic_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	default:
		return "" + this1;
	}
};
var ceramic_GamepadButton = {};
ceramic_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "L1";
	case 5:
		return "R1";
	case 6:
		return "L2";
	case 7:
		return "R2";
	case 8:
		return "SELECT";
	case 9:
		return "START";
	case 10:
		return "L3";
	case 11:
		return "R3";
	case 12:
		return "DPAD_UP";
	case 13:
		return "DPAD_DOWN";
	case 14:
		return "DPAD_LEFT";
	case 15:
		return "DPAD_RIGHT";
	default:
		return "" + this1;
	}
};
var ceramic_GeometryUtils = function() { };
$hxClasses["ceramic.GeometryUtils"] = ceramic_GeometryUtils;
ceramic_GeometryUtils.__name__ = "ceramic.GeometryUtils";
ceramic_GeometryUtils.pointInTriangle = function(x,y,ax,ay,bx,by,cx,cy) {
	var d1 = (x - bx) * (ay - by) - (ax - bx) * (y - by);
	var d2 = (x - cx) * (by - cy) - (bx - cx) * (y - cy);
	var d3 = (x - ax) * (cy - ay) - (cx - ax) * (y - ay);
	var hasNeg = d1 < 0 || d2 < 0 || d3 < 0;
	var hasPos = d1 > 0 || d2 > 0 || d3 > 0;
	return !(hasNeg && hasPos);
};
var ceramic_GlyphQuad = function() {
	this.glyphAdvance = -1;
	this.glyphY = -1;
	this.glyphX = -1;
	this.code = -1;
	this.line = -1;
	this.posInLine = -1;
	this.index = -1;
	this.glyph = null;
	this.char = null;
	ceramic_Quad.call(this);
};
$hxClasses["ceramic.GlyphQuad"] = ceramic_GlyphQuad;
ceramic_GlyphQuad.__name__ = "ceramic.GlyphQuad";
ceramic_GlyphQuad.__super__ = ceramic_Quad;
ceramic_GlyphQuad.prototype = $extend(ceramic_Quad.prototype,{
	emitClear: function(quad) {
		var len = 0;
		if(this.__cbOnClear != null) {
			len += this.__cbOnClear.length;
		}
		if(this.__cbOnceClear != null) {
			len += this.__cbOnceClear.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnClear.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnClear[ii];
					++i;
				}
			}
			if(this.__cbOnceClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnceClear.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceClear[ii];
					var unbind = this.__cbOnceOwnerUnbindClear[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceClear = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(quad);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onClear: function(owner,handleQuad) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "clear" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleQuad != null) {
					_gthis.offClear(handleQuad);
					handleQuad = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindClear == null) {
				this.__cbOnOwnerUnbindClear = [];
			}
			this.__cbOnOwnerUnbindClear.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleQuad = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindClear == null) {
				this.__cbOnOwnerUnbindClear = [];
			}
			this.__cbOnOwnerUnbindClear.push(null);
		}
		if(this.__cbOnClear == null) {
			this.__cbOnClear = [];
		}
		this.__cbOnClear.push(handleQuad);
	}
	,onceClear: function(owner,handleQuad) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "clear" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleQuad != null) {
					_gthis.offClear(handleQuad);
					handleQuad = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindClear == null) {
				this.__cbOnceOwnerUnbindClear = [];
			}
			this.__cbOnceOwnerUnbindClear.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleQuad = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindClear == null) {
				this.__cbOnceOwnerUnbindClear = [];
			}
			this.__cbOnceOwnerUnbindClear.push(null);
		}
		if(this.__cbOnceClear == null) {
			this.__cbOnceClear = [];
		}
		this.__cbOnceClear.push(handleQuad);
	}
	,offClear: function(handleQuad) {
		if(handleQuad != null) {
			var index;
			var unbind;
			if(this.__cbOnClear != null) {
				index = this.__cbOnClear.indexOf(handleQuad);
				if(index != -1) {
					this.__cbOnClear.splice(index,1);
					unbind = this.__cbOnOwnerUnbindClear[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindClear.splice(index,1);
				}
			}
			if(this.__cbOnceClear != null) {
				index = this.__cbOnceClear.indexOf(handleQuad);
				if(index != -1) {
					this.__cbOnceClear.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindClear[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindClear.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindClear.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindClear[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindClear = null;
			}
			if(this.__cbOnceOwnerUnbindClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindClear.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindClear[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindClear = null;
			}
			this.__cbOnClear = null;
			this.__cbOnceClear = null;
		}
	}
	,listensClear: function() {
		if(!(this.__cbOnClear != null && this.__cbOnClear.length > 0)) {
			if(this.__cbOnceClear != null) {
				return this.__cbOnceClear.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,toString: function() {
		return "GlyphQuad(c=" + this.char + ",i=" + this.index + ",l=" + this.line + ",x=" + this.glyphX + ",y=" + this.glyphY + ")";
	}
	,clear: function() {
		this.emitClear(this);
		ceramic_Quad.prototype.clear.call(this);
	}
	,unbindEvents: function() {
		ceramic_Quad.prototype.unbindEvents.call(this);
		this.offClear();
	}
	,__class__: ceramic_GlyphQuad
});
var ceramic_Group = function(id) {
	this.items = [];
	ceramic_Entity.call(this);
	if(id != null) {
		this.id = id;
	}
	ceramic_App.app.groups.push(this);
};
$hxClasses["ceramic.Group"] = ceramic_Group;
ceramic_Group.__name__ = "ceramic.Group";
ceramic_Group.__super__ = ceramic_Entity;
ceramic_Group.prototype = $extend(ceramic_Entity.prototype,{
	add: function(item) {
		var items = this.items;
		var index = items.indexOf(item);
		if(index != -1) {
			ceramic_App.app.logger.warning("Cannot add item " + Std.string(item) + " to group, already inside group",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Group.hx", lineNumber : 43, className : "ceramic.Group", methodName : "add"});
		} else {
			items.push(item);
			item.onDestroy(this,$bind(this,this.itemDestroyed));
		}
	}
	,remove: function(item) {
		var items = this.items;
		var index = items.indexOf(item);
		if(index != -1) {
			items.splice(index,1);
			item.offDestroy($bind(this,this.itemDestroyed));
		} else {
			ceramic_App.app.logger.warning("Cannot remove item " + Std.string(item) + " from group, index is -1",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Group.hx", lineNumber : 62, className : "ceramic.Group", methodName : "remove"});
		}
	}
	,contains: function(item) {
		return this.items.indexOf(item) != -1;
	}
	,itemDestroyed: function(item) {
		this.remove(item);
	}
	,clear: function() {
		var items = this.items;
		if(items.length > 0) {
			var len = items.length;
			var pool = ceramic_ArrayPool.pool(len);
			var tmp = pool.get();
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				tmp.vector[i] = items[i];
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var item = tmp.vector[i];
				item.offDestroy($bind(this,this.itemDestroyed));
				item.destroy();
			}
			if(items.length != 0) {
				if(items.length > 0) {
					items.splice(0,items.length);
				} else {
					var dArray = items;
					dArray[-1] = null;
				}
			}
			pool.release(tmp);
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		HxOverrides.remove(ceramic_App.app.groups,this);
		this.clear();
	}
	,__class__: ceramic_Group
});
var ceramic_HashedString = function() { };
$hxClasses["ceramic.HashedString"] = ceramic_HashedString;
ceramic_HashedString.__name__ = "ceramic.HashedString";
ceramic_HashedString.encode = function(str) {
	var hash = haxe_crypto_Md5.encode(str);
	var len = str.length;
	return hash + "" + len + ";" + str;
};
ceramic_HashedString.append = function(encoded,str) {
	return encoded + ceramic_HashedString.encode(str);
};
ceramic_HashedString.decode = function(encoded) {
	ceramic_HashedString._lastDecodeIncomplete = false;
	var i = 0;
	var len = encoded.length;
	var result = null;
	while(i < len) {
		var hash = encoded.substring(i,i + 32);
		var n = i += 32;
		while(n < len && HxOverrides.cca(encoded,n) != 59) ++n;
		var sectionLen = Std.parseInt(encoded.substring(i,n));
		if(sectionLen == null || sectionLen <= 0) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: invalid section length",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/HashedString.hx", lineNumber : 55, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		i = n + 1;
		var section = encoded.substring(i,i + sectionLen);
		if(section == null) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: null section",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/HashedString.hx", lineNumber : 64, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		if(haxe_crypto_Md5.encode(section) != hash) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: section hash mismatch",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/HashedString.hx", lineNumber : 69, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		i += sectionLen;
		if(result == null) {
			result = new StringBuf();
		}
		result.b += section == null ? "null" : "" + section;
	}
	if(result != null) {
		return result.b;
	} else {
		ceramic_App.app.logger.error("Invalid encoded string",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/HashedString.hx", lineNumber : 87, className : "ceramic.HashedString", methodName : "decode"});
		ceramic_HashedString._lastDecodeIncomplete = true;
		return null;
	}
};
ceramic_HashedString.prototype = {
	isLastDecodeIncomplete: function() {
		return ceramic_HashedString._lastDecodeIncomplete;
	}
	,__class__: ceramic_HashedString
};
var ceramic_ImageAsset = function(name,options) {
	this.reloadBecauseOfDensityChange = false;
	this.defaultImageOptions = null;
	this.unobservedTexture = null;
	this.textureAutoruns = null;
	ceramic_Asset.call(this,"image",name,options);
	this.set_handleTexturesDensityChange(true);
};
$hxClasses["ceramic.ImageAsset"] = ceramic_ImageAsset;
ceramic_ImageAsset.__name__ = "ceramic.ImageAsset";
ceramic_ImageAsset.__super__ = ceramic_Asset;
ceramic_ImageAsset.prototype = $extend(ceramic_Asset.prototype,{
	emitReplaceTexture: function(newTexture,prevTexture) {
		var len = 0;
		if(this.__cbOnReplaceTexture != null) {
			len += this.__cbOnReplaceTexture.length;
		}
		if(this.__cbOnceReplaceTexture != null) {
			len += this.__cbOnceReplaceTexture.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceTexture.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReplaceTexture[ii];
					++i;
				}
			}
			if(this.__cbOnceReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReplaceTexture.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReplaceTexture[ii];
					var unbind = this.__cbOnceOwnerUnbindReplaceTexture[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReplaceTexture = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newTexture,prevTexture);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceTexture: function(owner,handleNewTexturePrevTexture) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceTexture" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewTexturePrevTexture != null) {
					_gthis.offReplaceTexture(handleNewTexturePrevTexture);
					handleNewTexturePrevTexture = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceTexture == null) {
				this.__cbOnOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnOwnerUnbindReplaceTexture.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewTexturePrevTexture = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceTexture == null) {
				this.__cbOnOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnOwnerUnbindReplaceTexture.push(null);
		}
		if(this.__cbOnReplaceTexture == null) {
			this.__cbOnReplaceTexture = [];
		}
		this.__cbOnReplaceTexture.push(handleNewTexturePrevTexture);
	}
	,onceReplaceTexture: function(owner,handleNewTexturePrevTexture) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceTexture" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewTexturePrevTexture != null) {
					_gthis.offReplaceTexture(handleNewTexturePrevTexture);
					handleNewTexturePrevTexture = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceTexture == null) {
				this.__cbOnceOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnceOwnerUnbindReplaceTexture.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewTexturePrevTexture = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceTexture == null) {
				this.__cbOnceOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnceOwnerUnbindReplaceTexture.push(null);
		}
		if(this.__cbOnceReplaceTexture == null) {
			this.__cbOnceReplaceTexture = [];
		}
		this.__cbOnceReplaceTexture.push(handleNewTexturePrevTexture);
	}
	,offReplaceTexture: function(handleNewTexturePrevTexture) {
		if(handleNewTexturePrevTexture != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceTexture != null) {
				index = this.__cbOnReplaceTexture.indexOf(handleNewTexturePrevTexture);
				if(index != -1) {
					this.__cbOnReplaceTexture.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceTexture[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceTexture.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceTexture != null) {
				index = this.__cbOnceReplaceTexture.indexOf(handleNewTexturePrevTexture);
				if(index != -1) {
					this.__cbOnceReplaceTexture.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceTexture[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceTexture.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceTexture.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceTexture[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceTexture = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceTexture.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceTexture[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceTexture = null;
			}
			this.__cbOnReplaceTexture = null;
			this.__cbOnceReplaceTexture = null;
		}
	}
	,listensReplaceTexture: function() {
		if(!(this.__cbOnReplaceTexture != null && this.__cbOnReplaceTexture.length > 0)) {
			if(this.__cbOnceReplaceTexture != null) {
				return this.__cbOnceReplaceTexture.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_texture: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textureAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textureAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTexture;
	}
	,set_texture: function(texture) {
		var prevValue = this.unobservedTexture;
		this.unobservedTexture = texture;
		if(prevValue == texture) {
			return texture;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextureChange(texture,prevValue);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return texture;
	}
	,invalidateTexture: function() {
		var value = this.unobservedTexture;
		this.emitTextureChange(value,value);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTextureChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextureChange != null) {
			len += this.__cbOnTextureChange.length;
		}
		if(this.__cbOnceTextureChange != null) {
			len += this.__cbOnceTextureChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTextureChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTextureChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTextureChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTextureChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnTextureChange == null) {
			this.__cbOnTextureChange = [];
		}
		this.__cbOnTextureChange.push(handleCurrentPrevious);
	}
	,onceTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnceTextureChange == null) {
			this.__cbOnceTextureChange = [];
		}
		this.__cbOnceTextureChange.push(handleCurrentPrevious);
	}
	,offTextureChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextureChange != null) {
				index = this.__cbOnTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextureChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextureChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextureChange != null) {
				index = this.__cbOnceTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextureChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextureChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextureChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextureChange = null;
			}
			this.__cbOnTextureChange = null;
			this.__cbOnceTextureChange = null;
		}
	}
	,listensTextureChange: function() {
		if(!(this.__cbOnTextureChange != null && this.__cbOnTextureChange.length > 0)) {
			if(this.__cbOnceTextureChange != null) {
				return this.__cbOnceTextureChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		var reloadBecauseOfDensityChange = this.reloadBecauseOfDensityChange;
		this.reloadBecauseOfDensityChange = false;
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load image asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ImageAsset.hx", lineNumber : 41, className : "ceramic.ImageAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.defaultImageOptions != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.defaultImageOptions);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.defaultImageOptions,key);
			}
		}
		if(this.options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.options);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.options,key);
			}
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load image " + backendPath + " (density=" + this.density + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ImageAsset.hx", lineNumber : 68, className : "ceramic.ImageAsset", methodName : "load"});
		ceramic_App.app.backend.textures.load(realPath,loadOptions,function(image) {
			if(image != null) {
				var prevTexture = _gthis.get_texture();
				var newTexture = new ceramic_Texture(image,_gthis.density);
				newTexture.id = "texture:" + backendPath;
				_gthis.set_texture(newTexture);
				_gthis.get_texture().asset = _gthis;
				if(prevTexture != null) {
					_gthis.get_texture().set_filter(prevTexture.filter);
					_gthis.emitReplaceTexture(_gthis.get_texture(),prevTexture);
					var _g = 0;
					var _g1 = [].concat(ceramic_App.app.visuals);
					while(_g < _g1.length) {
						var visual = _g1[_g];
						++_g;
						if(visual._lifecycleState >= 0) {
							if(visual.asQuad != null) {
								var quad = visual.asQuad;
								if(quad.texture == prevTexture) {
									var frameX = quad.frameX;
									var frameY = quad.frameY;
									var frameWidth = quad.frameWidth;
									var frameHeight = quad.frameHeight;
									var texture = _gthis.get_texture();
									if(quad.texture != texture) {
										if(quad.texture != null) {
											quad.texture.offDestroy($bind(quad,quad.textureDestroyed));
											if(quad.texture.asset != null) {
												quad.texture.asset.release();
											}
										}
										quad.texture = texture;
										if(texture == null) {
											quad.frameX = -1;
											quad.frameY = -1;
											if(quad.frameWidth != -1) {
												quad.frameWidth = -1;
											}
											if(quad.frameHeight != -1) {
												quad.frameHeight = -1;
											}
										} else if(quad.tile != null) {
											quad.frameX = quad.tile.frameX;
											quad.frameY = quad.tile.frameY;
											var frameWidth1 = quad.tile.frameWidth;
											if(quad.frameWidth != frameWidth1) {
												quad.frameWidth = frameWidth1;
												if(frameWidth1 != -1) {
													quad.set_width(frameWidth1);
												}
											}
											var frameHeight1 = quad.tile.frameHeight;
											if(quad.frameHeight != frameHeight1) {
												quad.frameHeight = frameHeight1;
												if(frameHeight1 != -1) {
													quad.set_height(frameHeight1);
												}
											}
										} else {
											quad.frameX = 0;
											quad.frameY = 0;
											var frameWidth2 = texture.width;
											if(quad.frameWidth != frameWidth2) {
												quad.frameWidth = frameWidth2;
												if(frameWidth2 != -1) {
													quad.set_width(frameWidth2);
												}
											}
											var frameHeight2 = texture.height;
											if(quad.frameHeight != frameHeight2) {
												quad.frameHeight = frameHeight2;
												if(frameHeight2 != -1) {
													quad.set_height(frameHeight2);
												}
											}
											texture.onDestroy(quad,$bind(quad,quad.textureDestroyed));
											if(texture.asset != null) {
												texture.asset.retain();
											}
										}
									}
									if(reloadBecauseOfDensityChange || frameX != 0 || frameY != 0 || frameWidth != prevTexture.width || frameHeight != prevTexture.height) {
										quad.frameX = frameX;
										quad.frameY = frameY;
										if(quad.frameWidth != frameWidth) {
											quad.frameWidth = frameWidth;
											if(frameWidth != -1) {
												quad.set_width(frameWidth);
											}
										}
										if(quad.frameHeight != frameHeight) {
											quad.frameHeight = frameHeight;
											if(frameHeight != -1) {
												quad.set_height(frameHeight);
											}
										}
									}
								}
							} else if(visual.asMesh != null) {
								var mesh = visual.asMesh;
								if(mesh.texture == prevTexture) {
									var texture1 = _gthis.get_texture();
									if(mesh.texture != texture1) {
										if(mesh.texture != null) {
											mesh.texture.offDestroy($bind(mesh,mesh.textureDestroyed));
											if(mesh.texture.asset != null) {
												mesh.texture.asset.release();
											}
										}
										mesh.texture = texture1;
										if(mesh.texture != null) {
											mesh.texture.onDestroy(mesh,$bind(mesh,mesh.textureDestroyed));
											if(mesh.texture.asset != null) {
												mesh.texture.asset.retain();
											}
										}
									}
								}
							}
						}
					}
					prevTexture.asset = null;
					prevTexture.destroy();
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
				if(_gthis.handleTexturesDensityChange) {
					_gthis.checkTexturesDensity();
				}
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load texture at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ImageAsset.hx", lineNumber : 146, className : "ceramic.ImageAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
		var prevPath = this.path;
		this.computePath();
		if(prevPath != this.path) {
			ceramic_App.app.logger.info("Reload texture (" + prevPath + " -> " + this.path + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ImageAsset.hx", lineNumber : 171, className : "ceramic.ImageAsset", methodName : "checkTexturesDensity"});
			this.reloadBecauseOfDensityChange = true;
			this.load();
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload texture (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ImageAsset.hx", lineNumber : 193, className : "ceramic.ImageAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_texture() != null) {
			this.get_texture().destroy();
			this.set_texture(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceTexture();
		this.offTextureChange();
	}
	,__class__: ceramic_ImageAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture"})
});
var ceramic_InitSettings = function(settings) {
	this.settings = settings;
};
$hxClasses["ceramic.InitSettings"] = ceramic_InitSettings;
ceramic_InitSettings.__name__ = "ceramic.InitSettings";
ceramic_InitSettings.prototype = {
	get_targetWidth: function() {
		return this.settings.get_targetWidth();
	}
	,set_targetWidth: function(targetWidth) {
		return this.settings.set_targetWidth(targetWidth);
	}
	,get_targetHeight: function() {
		return this.settings.get_targetHeight();
	}
	,set_targetHeight: function(targetHeight) {
		return this.settings.set_targetHeight(targetHeight);
	}
	,get_windowWidth: function() {
		return this.settings.get_windowWidth();
	}
	,set_windowWidth: function(windowWidth) {
		return this.settings.set_windowWidth(windowWidth);
	}
	,get_windowHeight: function() {
		return this.settings.get_windowHeight();
	}
	,set_windowHeight: function(windowHeight) {
		return this.settings.set_windowHeight(windowHeight);
	}
	,get_targetDensity: function() {
		return this.settings.get_targetDensity();
	}
	,set_targetDensity: function(targetDensity) {
		return this.settings.set_targetDensity(targetDensity);
	}
	,get_background: function() {
		return this.settings.get_background();
	}
	,set_background: function(background) {
		return this.settings.set_background(background);
	}
	,get_scaling: function() {
		return this.settings.get_scaling();
	}
	,set_scaling: function(scaling) {
		return this.settings.set_scaling(scaling);
	}
	,get_title: function() {
		return this.settings.get_title();
	}
	,set_title: function(title) {
		return this.settings.set_title(title);
	}
	,get_fullscreen: function() {
		return this.settings.get_fullscreen();
	}
	,set_fullscreen: function(fullscreen) {
		return this.settings.set_fullscreen(fullscreen);
	}
	,get_maxDelta: function() {
		return this.settings.get_maxDelta();
	}
	,set_maxDelta: function(maxDelta) {
		return this.settings.set_maxDelta(maxDelta);
	}
	,get_orientation: function() {
		return this.settings.orientation;
	}
	,set_orientation: function(orientation) {
		return this.settings.orientation = orientation;
	}
	,get_antialiasing: function() {
		return this.settings.antialiasing;
	}
	,set_antialiasing: function(antialiasing) {
		return this.settings.antialiasing = antialiasing;
	}
	,get_collections: function() {
		return this.settings.collections;
	}
	,set_collections: function(collections) {
		return this.settings.collections = collections;
	}
	,get_appInfo: function() {
		return this.settings.appInfo;
	}
	,set_appInfo: function(appInfo) {
		return this.settings.appInfo = appInfo;
	}
	,get_resizable: function() {
		return this.settings.resizable;
	}
	,set_resizable: function(resizable) {
		return this.settings.resizable = resizable;
	}
	,get_assetsPath: function() {
		return this.settings.assetsPath;
	}
	,set_assetsPath: function(assetsPath) {
		return this.settings.assetsPath = assetsPath;
	}
	,get_backend: function() {
		return this.settings.backend;
	}
	,set_backend: function(backend) {
		return this.settings.backend = backend;
	}
	,get_defaultFont: function() {
		return this.settings.defaultFont;
	}
	,set_defaultFont: function(defaultFont) {
		return this.settings.defaultFont = defaultFont;
	}
	,get_defaultShader: function() {
		return this.settings.defaultShader;
	}
	,set_defaultShader: function(defaultShader) {
		return this.settings.defaultShader = defaultShader;
	}
	,__class__: ceramic_InitSettings
	,__properties__: {set_defaultShader:"set_defaultShader",get_defaultShader:"get_defaultShader",set_defaultFont:"set_defaultFont",get_defaultFont:"get_defaultFont",set_backend:"set_backend",get_backend:"get_backend",set_assetsPath:"set_assetsPath",get_assetsPath:"get_assetsPath",set_resizable:"set_resizable",get_resizable:"get_resizable",set_appInfo:"set_appInfo",get_appInfo:"get_appInfo",set_collections:"set_collections",get_collections:"get_collections",set_antialiasing:"set_antialiasing",get_antialiasing:"get_antialiasing",set_orientation:"set_orientation",get_orientation:"get_orientation",set_maxDelta:"set_maxDelta",get_maxDelta:"get_maxDelta",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_title:"set_title",get_title:"get_title",set_scaling:"set_scaling",get_scaling:"get_scaling",set_background:"set_background",get_background:"get_background",set_targetDensity:"set_targetDensity",get_targetDensity:"get_targetDensity",set_windowHeight:"set_windowHeight",get_windowHeight:"get_windowHeight",set_windowWidth:"set_windowWidth",get_windowWidth:"get_windowWidth",set_targetHeight:"set_targetHeight",get_targetHeight:"get_targetHeight",set_targetWidth:"set_targetWidth",get_targetWidth:"get_targetWidth"}
};
var ceramic_Input = function() {
	this.activeGamepads = [];
	this.gamepadAxisValues = new haxe_ds_IntMap();
	this.pressedGamepadButtons = new haxe_ds_IntMap();
	this.pressedKeyCodes = new haxe_ds_IntMap();
	this.pressedScanCodes = new haxe_ds_IntMap();
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Input"] = ceramic_Input;
ceramic_Input.__name__ = "ceramic.Input";
ceramic_Input.__super__ = ceramic_Entity;
ceramic_Input.prototype = $extend(ceramic_Entity.prototype,{
	emitKeyDown: function(key) {
		this.willEmitKeyDown(key);
		var len = 0;
		if(this.__cbOnKeyDown != null) {
			len += this.__cbOnKeyDown.length;
		}
		if(this.__cbOnceKeyDown != null) {
			len += this.__cbOnceKeyDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnKeyDown[ii];
					++i;
				}
			}
			if(this.__cbOnceKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceKeyDown[ii];
					var unbind = this.__cbOnceOwnerUnbindKeyDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceKeyDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnKeyDown == null) {
			this.__cbOnKeyDown = [];
		}
		this.__cbOnKeyDown.push(handleKey);
	}
	,onceKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnceKeyDown == null) {
			this.__cbOnceKeyDown = [];
		}
		this.__cbOnceKeyDown.push(handleKey);
	}
	,offKeyDown: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyDown != null) {
				index = this.__cbOnKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyDown.splice(index,1);
				}
			}
			if(this.__cbOnceKeyDown != null) {
				index = this.__cbOnceKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyDown = null;
			}
			if(this.__cbOnceOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = null;
			}
			this.__cbOnKeyDown = null;
			this.__cbOnceKeyDown = null;
		}
	}
	,listensKeyDown: function() {
		if(!(this.__cbOnKeyDown != null && this.__cbOnKeyDown.length > 0)) {
			if(this.__cbOnceKeyDown != null) {
				return this.__cbOnceKeyDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitKeyUp: function(key) {
		this.willEmitKeyUp(key);
		var len = 0;
		if(this.__cbOnKeyUp != null) {
			len += this.__cbOnKeyUp.length;
		}
		if(this.__cbOnceKeyUp != null) {
			len += this.__cbOnceKeyUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnKeyUp[ii];
					++i;
				}
			}
			if(this.__cbOnceKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceKeyUp[ii];
					var unbind = this.__cbOnceOwnerUnbindKeyUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceKeyUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnKeyUp == null) {
			this.__cbOnKeyUp = [];
		}
		this.__cbOnKeyUp.push(handleKey);
	}
	,onceKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnceKeyUp == null) {
			this.__cbOnceKeyUp = [];
		}
		this.__cbOnceKeyUp.push(handleKey);
	}
	,offKeyUp: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyUp != null) {
				index = this.__cbOnKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyUp.splice(index,1);
				}
			}
			if(this.__cbOnceKeyUp != null) {
				index = this.__cbOnceKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyUp = null;
			}
			if(this.__cbOnceOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = null;
			}
			this.__cbOnKeyUp = null;
			this.__cbOnceKeyUp = null;
		}
	}
	,listensKeyUp: function() {
		if(!(this.__cbOnKeyUp != null && this.__cbOnKeyUp.length > 0)) {
			if(this.__cbOnceKeyUp != null) {
				return this.__cbOnceKeyUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadAxis: function(gamepadId,axis,value) {
		var key = gamepadId * 32 + axis;
		this.gamepadAxisValues.h[key | 0] = value;
		var len = 0;
		if(this.__cbOnGamepadAxis != null) {
			len += this.__cbOnGamepadAxis.length;
		}
		if(this.__cbOnceGamepadAxis != null) {
			len += this.__cbOnceGamepadAxis.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadAxis[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadAxis[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadAxis = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,axis,value);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadAxis: function(owner,handleGamepadIdAxisValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisValue);
					handleGamepadIdAxisValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisValue = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnGamepadAxis == null) {
			this.__cbOnGamepadAxis = [];
		}
		this.__cbOnGamepadAxis.push(handleGamepadIdAxisValue);
	}
	,onceGamepadAxis: function(owner,handleGamepadIdAxisValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisValue);
					handleGamepadIdAxisValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisValue = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnceGamepadAxis == null) {
			this.__cbOnceGamepadAxis = [];
		}
		this.__cbOnceGamepadAxis.push(handleGamepadIdAxisValue);
	}
	,offGamepadAxis: function(handleGamepadIdAxisValue) {
		if(handleGamepadIdAxisValue != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadAxis != null) {
				index = this.__cbOnGamepadAxis.indexOf(handleGamepadIdAxisValue);
				if(index != -1) {
					this.__cbOnGamepadAxis.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				index = this.__cbOnceGamepadAxis.indexOf(handleGamepadIdAxisValue);
				if(index != -1) {
					this.__cbOnceGamepadAxis.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadAxis = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = null;
			}
			this.__cbOnGamepadAxis = null;
			this.__cbOnceGamepadAxis = null;
		}
	}
	,listensGamepadAxis: function() {
		if(!(this.__cbOnGamepadAxis != null && this.__cbOnGamepadAxis.length > 0)) {
			if(this.__cbOnceGamepadAxis != null) {
				return this.__cbOnceGamepadAxis.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadDown: function(gamepadId,button) {
		this.willEmitGamepadDown(gamepadId,button);
		var len = 0;
		if(this.__cbOnGamepadDown != null) {
			len += this.__cbOnGamepadDown.length;
		}
		if(this.__cbOnceGamepadDown != null) {
			len += this.__cbOnceGamepadDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadDown[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadDown[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,button);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDown: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadDown(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnGamepadDown == null) {
			this.__cbOnGamepadDown = [];
		}
		this.__cbOnGamepadDown.push(handleGamepadIdButton);
	}
	,onceGamepadDown: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadDown(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnceGamepadDown == null) {
			this.__cbOnceGamepadDown = [];
		}
		this.__cbOnceGamepadDown.push(handleGamepadIdButton);
	}
	,offGamepadDown: function(handleGamepadIdButton) {
		if(handleGamepadIdButton != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDown != null) {
				index = this.__cbOnGamepadDown.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnGamepadDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDown.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				index = this.__cbOnceGamepadDown.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnceGamepadDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDown = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = null;
			}
			this.__cbOnGamepadDown = null;
			this.__cbOnceGamepadDown = null;
		}
	}
	,listensGamepadDown: function() {
		if(!(this.__cbOnGamepadDown != null && this.__cbOnGamepadDown.length > 0)) {
			if(this.__cbOnceGamepadDown != null) {
				return this.__cbOnceGamepadDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadUp: function(gamepadId,button) {
		this.willEmitGamepadUp(gamepadId,button);
		var len = 0;
		if(this.__cbOnGamepadUp != null) {
			len += this.__cbOnGamepadUp.length;
		}
		if(this.__cbOnceGamepadUp != null) {
			len += this.__cbOnceGamepadUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadUp[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadUp[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,button);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadUp: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadUp(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnGamepadUp == null) {
			this.__cbOnGamepadUp = [];
		}
		this.__cbOnGamepadUp.push(handleGamepadIdButton);
	}
	,onceGamepadUp: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadUp(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnceGamepadUp == null) {
			this.__cbOnceGamepadUp = [];
		}
		this.__cbOnceGamepadUp.push(handleGamepadIdButton);
	}
	,offGamepadUp: function(handleGamepadIdButton) {
		if(handleGamepadIdButton != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadUp != null) {
				index = this.__cbOnGamepadUp.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnGamepadUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadUp.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				index = this.__cbOnceGamepadUp.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnceGamepadUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadUp = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = null;
			}
			this.__cbOnGamepadUp = null;
			this.__cbOnceGamepadUp = null;
		}
	}
	,listensGamepadUp: function() {
		if(!(this.__cbOnGamepadUp != null && this.__cbOnGamepadUp.length > 0)) {
			if(this.__cbOnceGamepadUp != null) {
				return this.__cbOnceGamepadUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadEnable: function(gamepadId,name) {
		this.willEmitGamepadEnable(gamepadId,name);
		var len = 0;
		if(this.__cbOnGamepadEnable != null) {
			len += this.__cbOnGamepadEnable.length;
		}
		if(this.__cbOnceGamepadEnable != null) {
			len += this.__cbOnceGamepadEnable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadEnable[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadEnable[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadEnable = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnGamepadEnable == null) {
			this.__cbOnGamepadEnable = [];
		}
		this.__cbOnGamepadEnable.push(handleGamepadIdName);
	}
	,onceGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnceGamepadEnable == null) {
			this.__cbOnceGamepadEnable = [];
		}
		this.__cbOnceGamepadEnable.push(handleGamepadIdName);
	}
	,offGamepadEnable: function(handleGamepadIdName) {
		if(handleGamepadIdName != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadEnable != null) {
				index = this.__cbOnGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnGamepadEnable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				index = this.__cbOnceGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnceGamepadEnable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadEnable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = null;
			}
			this.__cbOnGamepadEnable = null;
			this.__cbOnceGamepadEnable = null;
		}
	}
	,listensGamepadEnable: function() {
		if(!(this.__cbOnGamepadEnable != null && this.__cbOnGamepadEnable.length > 0)) {
			if(this.__cbOnceGamepadEnable != null) {
				return this.__cbOnceGamepadEnable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitGamepadDisable: function(gamepadId) {
		this.willEmitGamepadDisable(gamepadId);
		var len = 0;
		if(this.__cbOnGamepadDisable != null) {
			len += this.__cbOnGamepadDisable.length;
		}
		if(this.__cbOnceGamepadDisable != null) {
			len += this.__cbOnceGamepadDisable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGamepadDisable[ii];
					++i;
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGamepadDisable[ii];
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGamepadDisable = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnGamepadDisable == null) {
			this.__cbOnGamepadDisable = [];
		}
		this.__cbOnGamepadDisable.push(handleGamepadId);
	}
	,onceGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnceGamepadDisable == null) {
			this.__cbOnceGamepadDisable = [];
		}
		this.__cbOnceGamepadDisable.push(handleGamepadId);
	}
	,offGamepadDisable: function(handleGamepadId) {
		if(handleGamepadId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDisable != null) {
				index = this.__cbOnGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnGamepadDisable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				index = this.__cbOnceGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnceGamepadDisable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDisable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = null;
			}
			this.__cbOnGamepadDisable = null;
			this.__cbOnceGamepadDisable = null;
		}
	}
	,listensGamepadDisable: function() {
		if(!(this.__cbOnGamepadDisable != null && this.__cbOnGamepadDisable.length > 0)) {
			if(this.__cbOnceGamepadDisable != null) {
				return this.__cbOnceGamepadDisable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willEmitKeyDown: function(key) {
		var _gthis = this;
		var value = this.pressedScanCodes.h[key.scanCode | 0];
		var prevScan = value != null ? value : 0;
		var value = this.pressedKeyCodes.h[key.keyCode | 0];
		var prevKey = value != null ? value : 0;
		if(prevScan == -1) {
			prevScan = 0;
			prevKey = 0;
		}
		var value = prevScan + 1;
		this.pressedScanCodes.h[key.scanCode | 0] = value;
		var value = prevKey + 1;
		this.pressedKeyCodes.h[key.keyCode | 0] = value;
		if(prevScan == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedScanCodes.h[key.scanCode | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedScanCodes.h[key.scanCode | 0] = 2;
				}
				var value = _gthis.pressedKeyCodes.h[key.keyCode | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedKeyCodes.h[key.keyCode | 0] = 2;
				}
			});
		}
	}
	,willEmitKeyUp: function(key) {
		var _gthis = this;
		this.pressedScanCodes.h[key.scanCode | 0] = -1;
		this.pressedKeyCodes.h[key.keyCode | 0] = -1;
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedScanCodes.h[key.scanCode | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedScanCodes.h[key.scanCode | 0] = 0;
			}
			var value = _gthis.pressedKeyCodes.h[key.keyCode | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedKeyCodes.h[key.keyCode | 0] = 0;
			}
		});
	}
	,keyPressed: function(keyCode) {
		var value = this.pressedKeyCodes.h[keyCode | 0];
		return (value != null ? value : 0) > 0;
	}
	,keyJustPressed: function(keyCode) {
		var value = this.pressedKeyCodes.h[keyCode | 0];
		return (value != null ? value : 0) == 1;
	}
	,keyJustReleased: function(keyCode) {
		var value = this.pressedKeyCodes.h[keyCode | 0];
		return (value != null ? value : 0) == -1;
	}
	,scanPressed: function(scanCode) {
		var value = this.pressedScanCodes.h[scanCode | 0];
		return (value != null ? value : 0) > 0;
	}
	,scanJustPressed: function(scanCode) {
		var value = this.pressedScanCodes.h[scanCode | 0];
		return (value != null ? value : 0) == 1;
	}
	,scanJustReleased: function(scanCode) {
		var value = this.pressedScanCodes.h[scanCode | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitGamepadEnable: function(gamepadId,name) {
		var key = gamepadId * 32;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var k = key + i;
			this.pressedGamepadButtons.h[k | 0] = 0;
			this.gamepadAxisValues.h[k | 0] = 0.0;
		}
		if(this.activeGamepads.indexOf(gamepadId) == -1) {
			this.activeGamepads.push(gamepadId);
		}
	}
	,willEmitGamepadDisable: function(gamepadId) {
		var index = this.activeGamepads.indexOf(gamepadId);
		if(index != -1) {
			this.activeGamepads.splice(index,1);
		}
	}
	,willEmitGamepadDown: function(gamepadId,button) {
		var _gthis = this;
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.h[key | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		var value = prevValue + 1;
		this.pressedGamepadButtons.h[key | 0] = value;
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedGamepadButtons.h[key | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedGamepadButtons.h[key | 0] = 2;
				}
			});
		}
	}
	,willEmitGamepadUp: function(gamepadId,button) {
		var _gthis = this;
		var key = gamepadId * 32 + button;
		this.pressedGamepadButtons.h[key | 0] = -1;
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedGamepadButtons.h[key | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedGamepadButtons.h[key | 0] = 0;
			}
		});
	}
	,gamepadPressed: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.h[key | 0];
		return (value != null ? value : 0) > 0;
	}
	,gamepadJustPressed: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.h[key | 0];
		return (value != null ? value : 0) == 1;
	}
	,gamepadJustReleased: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.h[key | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitGamepadAxis: function(gamepadId,axis,value) {
		var key = gamepadId * 32 + axis;
		this.gamepadAxisValues.h[key | 0] = value;
	}
	,gamepadAxisValue: function(gamepadId,axis) {
		var key = gamepadId * 32 + axis;
		return this.gamepadAxisValues.h[key | 0];
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offKeyDown();
		this.offKeyUp();
		this.offGamepadAxis();
		this.offGamepadDown();
		this.offGamepadUp();
		this.offGamepadEnable();
		this.offGamepadDisable();
	}
	,__class__: ceramic_Input
});
var ceramic_IntBoolMap = {};
ceramic_IntBoolMap.__properties__ = {get_iterableKeys:"get_iterableKeys",get_size:"get_size"};
ceramic_IntBoolMap._new = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	var this1 = new haxe_ds_IntMap();
	return this1;
};
ceramic_IntBoolMap.get_size = function(this1) {
	return Lambda.count(this1);
};
ceramic_IntBoolMap.get_iterableKeys = function(this1) {
	var keys = [];
	var k = this1.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		keys.push(k1);
	}
	return keys;
};
ceramic_IntBoolMap.exists = function(this1,key) {
	return this1.h.hasOwnProperty(key | 0);
};
ceramic_IntBoolMap.set = function(this1,key,value) {
	this1.h[key | 0] = value;
	return value;
};
ceramic_IntBoolMap.get = function(this1,key) {
	return this1.h[key | 0];
};
ceramic_IntBoolMap.remove = function(this1,key) {
	return this1.remove(key | 0);
};
ceramic_IntBoolMap.getInline = function(this1,key) {
	return this1.h[key];
};
ceramic_IntBoolMap.existsInline = function(this1,key) {
	return this1.h.hasOwnProperty(key);
};
ceramic_IntBoolMap.copy = function(this1) {
	return this1.copy();
};
var ceramic_IntFloatMap = {};
ceramic_IntFloatMap.__properties__ = {get_iterableKeys:"get_iterableKeys",get_size:"get_size"};
ceramic_IntFloatMap._new = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	var this1 = new haxe_ds_IntMap();
	return this1;
};
ceramic_IntFloatMap.get_size = function(this1) {
	return Lambda.count(this1);
};
ceramic_IntFloatMap.get_iterableKeys = function(this1) {
	var keys = [];
	var k = this1.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		keys.push(k1);
	}
	return keys;
};
ceramic_IntFloatMap.exists = function(this1,key) {
	return this1.h.hasOwnProperty(key | 0);
};
ceramic_IntFloatMap.set = function(this1,key,value) {
	this1.h[key | 0] = value;
	return value;
};
ceramic_IntFloatMap.get = function(this1,key) {
	return this1.h[key | 0];
};
ceramic_IntFloatMap.remove = function(this1,key) {
	this1.remove(key | 0);
};
ceramic_IntFloatMap.getInline = function(this1,key) {
	return this1.h[key];
};
ceramic_IntFloatMap.existsInline = function(this1,key) {
	return this1.h.hasOwnProperty(key);
};
ceramic_IntFloatMap.copy = function(this1) {
	return this1.copy();
};
var ceramic_IntIntMap = {};
ceramic_IntIntMap.__properties__ = {get_iterableKeys:"get_iterableKeys",get_size:"get_size"};
ceramic_IntIntMap._new = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	var this1 = new haxe_ds_IntMap();
	return this1;
};
ceramic_IntIntMap.clear = function(this1) {
	this1.h = { };
};
ceramic_IntIntMap.get_size = function(this1) {
	return Lambda.count(this1);
};
ceramic_IntIntMap.get_iterableKeys = function(this1) {
	var keys = [];
	var k = this1.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		keys.push(k1);
	}
	return keys;
};
ceramic_IntIntMap.exists = function(this1,key) {
	return this1.h.hasOwnProperty(key | 0);
};
ceramic_IntIntMap.set = function(this1,key,value) {
	this1.h[key | 0] = value;
	return value;
};
ceramic_IntIntMap.get = function(this1,key) {
	var value = this1.h[key | 0];
	if(value != null) {
		return value;
	} else {
		return 0;
	}
};
ceramic_IntIntMap.remove = function(this1,key) {
	if(this1.remove(key | 0)) {
		return 1;
	} else {
		return 0;
	}
};
ceramic_IntIntMap.getInline = function(this1,key) {
	var value = this1.h[key | 0];
	if(value != null) {
		return value;
	} else {
		return 0;
	}
};
ceramic_IntIntMap.existsInline = function(this1,key) {
	return this1.h.hasOwnProperty(key | 0);
};
ceramic_IntIntMap.copy = function(this1) {
	return this1.copy();
};
var ceramic_IntMap = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	this.iterableKeys = null;
	this.nextFreeIndex = 0;
	var size1 = size;
	var fillFactor1 = fillFactor;
	var this1 = new haxe_ds_IntMap();
	this.keys = this1;
	var this1 = new Array(size);
	this.values = this1;
	if(iterable) {
		this.iterableKeys = [];
	}
};
$hxClasses["ceramic.IntMap"] = ceramic_IntMap;
ceramic_IntMap.__name__ = "ceramic.IntMap";
ceramic_IntMap.prototype = {
	get: function(key) {
		var value = this.keys.h[key | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return this.values[index - 2];
		} else {
			return null;
		}
	}
	,getInline: function(key) {
		var value = this.keys.h[key | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return this.values[index - 2];
		} else {
			return null;
		}
	}
	,exists: function(key) {
		return this.keys.h.hasOwnProperty(key | 0);
	}
	,existsInline: function(key) {
		return this.keys.h.hasOwnProperty(key | 0);
	}
	,set: function(key,value) {
		var value1 = this.keys.h[key | 0];
		var index = value1 != null ? value1 : 0;
		if(index >= 2) {
			index -= 2;
			if(value != null) {
				this.values[index] = value;
			} else {
				this.values[index] = null;
				if(this.nextFreeIndex > index) {
					this.nextFreeIndex = index;
				}
				this.keys.h[key | 0] = 1;
			}
		} else if(value == null) {
			if(index != 1) {
				this.keys.h[key | 0] = 1;
				if(this.iterableKeys != null) {
					this.iterableKeys.push(key);
				}
			}
		} else {
			var valuesLen = this.values.length;
			if(this.nextFreeIndex >= valuesLen) {
				this.resizeValues(this.values.length * 2);
			}
			this.values[this.nextFreeIndex] = value;
			var value = this.nextFreeIndex + 2;
			this.keys.h[key | 0] = value;
			if(index != 1 && this.iterableKeys != null) {
				this.iterableKeys.push(key);
			}
			while(true) {
				this.nextFreeIndex++;
				if(!(this.nextFreeIndex < valuesLen && this.values[this.nextFreeIndex] != null)) {
					break;
				}
			}
		}
	}
	,remove: function(key) {
		var value = this.keys.h[key | 0];
		var index = value != null ? value : 0;
		if(index != 0) {
			if(index != 1) {
				index -= 2;
				this.values[index] = null;
				if(this.nextFreeIndex > index) {
					this.nextFreeIndex = index;
				}
			}
			var tmp = this.keys.remove(key | 0);
			if(this.iterableKeys != null) {
				this.iterableKeys.splice(this.iterableKeys.indexOf(key),1);
			}
		}
	}
	,copy: function() {
		var map = new ceramic_IntMap();
		map.keys = this.keys.copy();
		map.nextFreeIndex = this.nextFreeIndex;
		map.iterableKeys = this.iterableKeys != null ? this.iterableKeys.slice() : null;
		var this1 = this.values;
		var this2 = new Array(this1.length);
		var r = this2;
		haxe_ds_Vector.blit(this1,0,r,0,this1.length);
		map.values = r;
		return map;
	}
	,resizeValues: function(targetSize) {
		var prevValues = this.values;
		var this1 = new Array(targetSize);
		this.values = this1;
		var _g = 0;
		var _g1 = prevValues.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] = prevValues[i];
		}
	}
	,__class__: ceramic_IntMap
};
var ceramic_Key = function(keyCode,scanCode) {
	this.keyCode = keyCode;
	this.scanCode = scanCode;
};
$hxClasses["ceramic.Key"] = ceramic_Key;
ceramic_Key.__name__ = "ceramic.Key";
ceramic_Key.prototype = {
	get_keyCodeName: function() {
		return ceramic_KeyCode.$name(this.keyCode);
	}
	,get_scanCodeName: function() {
		return ceramic_ScanCode.$name(this.scanCode);
	}
	,toString: function() {
		return "Key(" + this.keyCode + " " + ceramic_KeyCode.$name(this.keyCode) + " / " + this.scanCode + " " + ceramic_ScanCode.$name(this.scanCode) + ")";
	}
	,__class__: ceramic_Key
	,__properties__: {get_scanCodeName:"get_scanCodeName",get_keyCodeName:"get_keyCodeName"}
};
var ceramic_KeyCode = {};
ceramic_KeyCode.$name = function(keyCode) {
	if((keyCode & ceramic_ScanCode.MASK) != 0) {
		return ceramic_ScanCode.$name(keyCode & ~ceramic_ScanCode.MASK);
	}
	switch(keyCode) {
	case 8:
		return ceramic_ScanCode.$name(42);
	case 9:
		return ceramic_ScanCode.$name(43);
	case 13:
		return ceramic_ScanCode.$name(40);
	case 27:
		return ceramic_ScanCode.$name(41);
	case 32:
		return ceramic_ScanCode.$name(44);
	case 97:
		return ceramic_ScanCode.$name(4);
	case 98:
		return ceramic_ScanCode.$name(5);
	case 99:
		return ceramic_ScanCode.$name(6);
	case 100:
		return ceramic_ScanCode.$name(7);
	case 101:
		return ceramic_ScanCode.$name(8);
	case 102:
		return ceramic_ScanCode.$name(9);
	case 103:
		return ceramic_ScanCode.$name(10);
	case 104:
		return ceramic_ScanCode.$name(11);
	case 105:
		return ceramic_ScanCode.$name(12);
	case 106:
		return ceramic_ScanCode.$name(13);
	case 107:
		return ceramic_ScanCode.$name(14);
	case 108:
		return ceramic_ScanCode.$name(15);
	case 109:
		return ceramic_ScanCode.$name(16);
	case 110:
		return ceramic_ScanCode.$name(17);
	case 111:
		return ceramic_ScanCode.$name(18);
	case 112:
		return ceramic_ScanCode.$name(19);
	case 113:
		return ceramic_ScanCode.$name(20);
	case 114:
		return ceramic_ScanCode.$name(21);
	case 115:
		return ceramic_ScanCode.$name(22);
	case 116:
		return ceramic_ScanCode.$name(23);
	case 117:
		return ceramic_ScanCode.$name(24);
	case 118:
		return ceramic_ScanCode.$name(25);
	case 119:
		return ceramic_ScanCode.$name(26);
	case 120:
		return ceramic_ScanCode.$name(27);
	case 121:
		return ceramic_ScanCode.$name(28);
	case 122:
		return ceramic_ScanCode.$name(29);
	case 127:
		return ceramic_ScanCode.$name(76);
	default:
		return String.fromCodePoint(keyCode);
	}
};
ceramic_KeyCode.toString = function(this1) {
	return "KeyCode(" + this1 + " " + ceramic_KeyCode.$name(this1) + ")";
};
var ceramic_Logger = function() {
	this.indentPrefix = "";
	ceramic_Entity.call(this);
	if(!ceramic_Logger.didInitOnce) {
		ceramic_Logger.didInitOnce = true;
	}
};
$hxClasses["ceramic.Logger"] = ceramic_Logger;
ceramic_Logger.__name__ = "ceramic.Logger";
ceramic_Logger.__super__ = ceramic_Entity;
ceramic_Logger.prototype = $extend(ceramic_Entity.prototype,{
	emitInfo: function(value,pos) {
		var len = 0;
		if(this.__cbOnInfo != null) {
			len += this.__cbOnInfo.length;
		}
		if(this.__cbOnceInfo != null) {
			len += this.__cbOnceInfo.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnInfo.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnInfo[ii];
					++i;
				}
			}
			if(this.__cbOnceInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnceInfo.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceInfo[ii];
					var unbind = this.__cbOnceOwnerUnbindInfo[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceInfo = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onInfo: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "info" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offInfo(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindInfo == null) {
				this.__cbOnOwnerUnbindInfo = [];
			}
			this.__cbOnOwnerUnbindInfo.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindInfo == null) {
				this.__cbOnOwnerUnbindInfo = [];
			}
			this.__cbOnOwnerUnbindInfo.push(null);
		}
		if(this.__cbOnInfo == null) {
			this.__cbOnInfo = [];
		}
		this.__cbOnInfo.push(handleValuePos);
	}
	,onceInfo: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "info" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offInfo(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindInfo == null) {
				this.__cbOnceOwnerUnbindInfo = [];
			}
			this.__cbOnceOwnerUnbindInfo.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindInfo == null) {
				this.__cbOnceOwnerUnbindInfo = [];
			}
			this.__cbOnceOwnerUnbindInfo.push(null);
		}
		if(this.__cbOnceInfo == null) {
			this.__cbOnceInfo = [];
		}
		this.__cbOnceInfo.push(handleValuePos);
	}
	,offInfo: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnInfo != null) {
				index = this.__cbOnInfo.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnInfo.splice(index,1);
					unbind = this.__cbOnOwnerUnbindInfo[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindInfo.splice(index,1);
				}
			}
			if(this.__cbOnceInfo != null) {
				index = this.__cbOnceInfo.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceInfo.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindInfo[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindInfo.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindInfo.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindInfo[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindInfo = null;
			}
			if(this.__cbOnceOwnerUnbindInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindInfo.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindInfo[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindInfo = null;
			}
			this.__cbOnInfo = null;
			this.__cbOnceInfo = null;
		}
	}
	,listensInfo: function() {
		if(!(this.__cbOnInfo != null && this.__cbOnInfo.length > 0)) {
			if(this.__cbOnceInfo != null) {
				return this.__cbOnceInfo.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitDebug: function(value,pos) {
		var len = 0;
		if(this.__cbOnDebug != null) {
			len += this.__cbOnDebug.length;
		}
		if(this.__cbOnceDebug != null) {
			len += this.__cbOnceDebug.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnDebug.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDebug[ii];
					++i;
				}
			}
			if(this.__cbOnceDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDebug.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDebug[ii];
					var unbind = this.__cbOnceOwnerUnbindDebug[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDebug = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDebug: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "debug" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offDebug(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDebug == null) {
				this.__cbOnOwnerUnbindDebug = [];
			}
			this.__cbOnOwnerUnbindDebug.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDebug == null) {
				this.__cbOnOwnerUnbindDebug = [];
			}
			this.__cbOnOwnerUnbindDebug.push(null);
		}
		if(this.__cbOnDebug == null) {
			this.__cbOnDebug = [];
		}
		this.__cbOnDebug.push(handleValuePos);
	}
	,onceDebug: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "debug" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offDebug(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDebug == null) {
				this.__cbOnceOwnerUnbindDebug = [];
			}
			this.__cbOnceOwnerUnbindDebug.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDebug == null) {
				this.__cbOnceOwnerUnbindDebug = [];
			}
			this.__cbOnceOwnerUnbindDebug.push(null);
		}
		if(this.__cbOnceDebug == null) {
			this.__cbOnceDebug = [];
		}
		this.__cbOnceDebug.push(handleValuePos);
	}
	,offDebug: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnDebug != null) {
				index = this.__cbOnDebug.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnDebug.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDebug[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDebug.splice(index,1);
				}
			}
			if(this.__cbOnceDebug != null) {
				index = this.__cbOnceDebug.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceDebug.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDebug[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDebug.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDebug.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDebug[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDebug = null;
			}
			if(this.__cbOnceOwnerUnbindDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDebug.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDebug[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDebug = null;
			}
			this.__cbOnDebug = null;
			this.__cbOnceDebug = null;
		}
	}
	,listensDebug: function() {
		if(!(this.__cbOnDebug != null && this.__cbOnDebug.length > 0)) {
			if(this.__cbOnceDebug != null) {
				return this.__cbOnceDebug.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitSuccess: function(value,pos) {
		var len = 0;
		if(this.__cbOnSuccess != null) {
			len += this.__cbOnSuccess.length;
		}
		if(this.__cbOnceSuccess != null) {
			len += this.__cbOnceSuccess.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnSuccess.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnSuccess[ii];
					++i;
				}
			}
			if(this.__cbOnceSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnceSuccess.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceSuccess[ii];
					var unbind = this.__cbOnceOwnerUnbindSuccess[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceSuccess = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSuccess: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "success" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offSuccess(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSuccess == null) {
				this.__cbOnOwnerUnbindSuccess = [];
			}
			this.__cbOnOwnerUnbindSuccess.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSuccess == null) {
				this.__cbOnOwnerUnbindSuccess = [];
			}
			this.__cbOnOwnerUnbindSuccess.push(null);
		}
		if(this.__cbOnSuccess == null) {
			this.__cbOnSuccess = [];
		}
		this.__cbOnSuccess.push(handleValuePos);
	}
	,onceSuccess: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "success" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offSuccess(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSuccess == null) {
				this.__cbOnceOwnerUnbindSuccess = [];
			}
			this.__cbOnceOwnerUnbindSuccess.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSuccess == null) {
				this.__cbOnceOwnerUnbindSuccess = [];
			}
			this.__cbOnceOwnerUnbindSuccess.push(null);
		}
		if(this.__cbOnceSuccess == null) {
			this.__cbOnceSuccess = [];
		}
		this.__cbOnceSuccess.push(handleValuePos);
	}
	,offSuccess: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnSuccess != null) {
				index = this.__cbOnSuccess.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnSuccess.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSuccess[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSuccess.splice(index,1);
				}
			}
			if(this.__cbOnceSuccess != null) {
				index = this.__cbOnceSuccess.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceSuccess.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSuccess[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSuccess.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSuccess.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSuccess[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSuccess = null;
			}
			if(this.__cbOnceOwnerUnbindSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSuccess.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSuccess[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSuccess = null;
			}
			this.__cbOnSuccess = null;
			this.__cbOnceSuccess = null;
		}
	}
	,listensSuccess: function() {
		if(!(this.__cbOnSuccess != null && this.__cbOnSuccess.length > 0)) {
			if(this.__cbOnceSuccess != null) {
				return this.__cbOnceSuccess.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitWarning: function(value,pos) {
		var len = 0;
		if(this.__cbOnWarning != null) {
			len += this.__cbOnWarning.length;
		}
		if(this.__cbOnceWarning != null) {
			len += this.__cbOnceWarning.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnWarning.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnWarning[ii];
					++i;
				}
			}
			if(this.__cbOnceWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnceWarning.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceWarning[ii];
					var unbind = this.__cbOnceOwnerUnbindWarning[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceWarning = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWarning: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "warning" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offWarning(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWarning == null) {
				this.__cbOnOwnerUnbindWarning = [];
			}
			this.__cbOnOwnerUnbindWarning.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWarning == null) {
				this.__cbOnOwnerUnbindWarning = [];
			}
			this.__cbOnOwnerUnbindWarning.push(null);
		}
		if(this.__cbOnWarning == null) {
			this.__cbOnWarning = [];
		}
		this.__cbOnWarning.push(handleValuePos);
	}
	,onceWarning: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "warning" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offWarning(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWarning == null) {
				this.__cbOnceOwnerUnbindWarning = [];
			}
			this.__cbOnceOwnerUnbindWarning.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWarning == null) {
				this.__cbOnceOwnerUnbindWarning = [];
			}
			this.__cbOnceOwnerUnbindWarning.push(null);
		}
		if(this.__cbOnceWarning == null) {
			this.__cbOnceWarning = [];
		}
		this.__cbOnceWarning.push(handleValuePos);
	}
	,offWarning: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnWarning != null) {
				index = this.__cbOnWarning.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnWarning.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWarning[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWarning.splice(index,1);
				}
			}
			if(this.__cbOnceWarning != null) {
				index = this.__cbOnceWarning.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceWarning.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWarning[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWarning.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWarning.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWarning[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWarning = null;
			}
			if(this.__cbOnceOwnerUnbindWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWarning.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWarning[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWarning = null;
			}
			this.__cbOnWarning = null;
			this.__cbOnceWarning = null;
		}
	}
	,listensWarning: function() {
		if(!(this.__cbOnWarning != null && this.__cbOnWarning.length > 0)) {
			if(this.__cbOnceWarning != null) {
				return this.__cbOnceWarning.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitError: function(value,pos) {
		var len = 0;
		if(this.__cbOnError != null) {
			len += this.__cbOnError.length;
		}
		if(this.__cbOnceError != null) {
			len += this.__cbOnceError.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnError != null) {
				var _g = 0;
				var _g1 = this.__cbOnError.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnError[ii];
					++i;
				}
			}
			if(this.__cbOnceError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceError.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceError[ii];
					var unbind = this.__cbOnceOwnerUnbindError[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceError = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onError: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "error" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offError(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindError == null) {
				this.__cbOnOwnerUnbindError = [];
			}
			this.__cbOnOwnerUnbindError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindError == null) {
				this.__cbOnOwnerUnbindError = [];
			}
			this.__cbOnOwnerUnbindError.push(null);
		}
		if(this.__cbOnError == null) {
			this.__cbOnError = [];
		}
		this.__cbOnError.push(handleValuePos);
	}
	,onceError: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "error" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offError(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindError == null) {
				this.__cbOnceOwnerUnbindError = [];
			}
			this.__cbOnceOwnerUnbindError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindError == null) {
				this.__cbOnceOwnerUnbindError = [];
			}
			this.__cbOnceOwnerUnbindError.push(null);
		}
		if(this.__cbOnceError == null) {
			this.__cbOnceError = [];
		}
		this.__cbOnceError.push(handleValuePos);
	}
	,offError: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnError != null) {
				index = this.__cbOnError.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnError.splice(index,1);
					unbind = this.__cbOnOwnerUnbindError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindError.splice(index,1);
				}
			}
			if(this.__cbOnceError != null) {
				index = this.__cbOnceError.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceError.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindError.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindError != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindError = null;
			}
			if(this.__cbOnceOwnerUnbindError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindError = null;
			}
			this.__cbOnError = null;
			this.__cbOnceError = null;
		}
	}
	,listensError: function() {
		if(!(this.__cbOnError != null && this.__cbOnError.length > 0)) {
			if(this.__cbOnceError != null) {
				return this.__cbOnceError.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,debug: function(value,pos) {
		var _gthis = this;
		this.emitDebug(value,pos);
		haxe_Log.trace(this.prefixLines("[debug] ",value),pos);
	}
	,info: function(value,pos) {
		var _gthis = this;
		this.emitInfo(value,pos);
		haxe_Log.trace(this.prefixLines("[info] ",value),pos);
	}
	,success: function(value,pos) {
		var _gthis = this;
		this.emitSuccess(value,pos);
		haxe_Log.trace(this.prefixLines("[success] ",value),pos);
	}
	,warning: function(value,pos) {
		var _gthis = this;
		this.emitWarning(value,pos);
		if(ceramic_Logger._hasElectronRunner) {
			haxe_Log.trace(this.prefixLines("[warning] ",value),pos);
		} else {
			console.warn(value);
		}
	}
	,error: function(value,pos) {
		var _gthis = this;
		this.emitError(value,pos);
		if(ceramic_Logger._hasElectronRunner) {
			haxe_Log.trace(this.prefixLines("[error] ",value),pos);
		} else {
			console.error(value);
		}
	}
	,pushIndent: function() {
		this.indentPrefix += "    ";
	}
	,popIndent: function() {
		this.indentPrefix = this.indentPrefix.substring(0,this.indentPrefix.length - 4);
	}
	,prefixLines: function(prefix,input) {
		var result = [];
		var _g = 0;
		var _g1 = Std.string(input).split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			result.push(prefix + this.indentPrefix + line);
		}
		return result.join("\n");
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offInfo();
		this.offDebug();
		this.offSuccess();
		this.offWarning();
		this.offError();
	}
	,__class__: ceramic_Logger
});
var ceramic_Mesh = function() {
	this.uvs = [];
	this.texture = null;
	this.colors = [];
	this.indices = [];
	this.vertices = [];
	this.complexHit = false;
	this.customFloatAttributesSize = 0;
	this.colorMapping = 0;
	ceramic_Visual.call(this);
	this.asMesh = this;
};
$hxClasses["ceramic.Mesh"] = ceramic_Mesh;
ceramic_Mesh.__name__ = "ceramic.Mesh";
ceramic_Mesh.__super__ = ceramic_Visual;
ceramic_Mesh.prototype = $extend(ceramic_Visual.prototype,{
	destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		var texture = null;
		if(this.texture != texture) {
			if(this.texture != null) {
				this.texture.offDestroy($bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.release();
				}
			}
			this.texture = texture;
			if(this.texture != null) {
				this.texture.onDestroy(this,$bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.retain();
				}
			}
		}
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
	}
	,get_color: function() {
		if(this.colors == null || this.colors.length == 0) {
			return 16777215;
		}
		var this1 = this.colors[0];
		var red = this1 >> 16 & 255;
		var green = this1 >> 8 & 255;
		var blue = this1 & 255;
		var color = ceramic_Color._new();
		color &= 65535;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= 16711935;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= 16776960;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		return color;
	}
	,set_color: function(color) {
		if(this.colors == null) {
			this.colors = [];
		}
		if(this.colors.length == 0) {
			var alpha = 255;
			if(alpha == null) {
				alpha = 255;
			}
			var value = (color | 0) + (-16777216);
			value &= 16777215;
			value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
			var this1 = value;
			this.colors.push(this1);
		} else {
			var alpha = 255;
			if(alpha == null) {
				alpha = 255;
			}
			var value = (color | 0) + (-16777216);
			value &= 16777215;
			value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
			var this1 = value;
			this.colors[0] = this1;
		}
		return color;
	}
	,set_texture: function(texture) {
		if(this.texture == texture) {
			return texture;
		}
		if(this.texture != null) {
			this.texture.offDestroy($bind(this,this.textureDestroyed));
			if(this.texture.asset != null) {
				this.texture.asset.release();
			}
		}
		this.texture = texture;
		if(this.texture != null) {
			this.texture.onDestroy(this,$bind(this,this.textureDestroyed));
			if(this.texture.asset != null) {
				this.texture.asset.retain();
			}
		}
		return texture;
	}
	,textureDestroyed: function(_) {
		var texture = null;
		if(this.texture != texture) {
			if(this.texture != null) {
				this.texture.offDestroy($bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.release();
				}
			}
			this.texture = texture;
			if(this.texture != null) {
				this.texture.onDestroy(this,$bind(this,this.textureDestroyed));
				if(this.texture.asset != null) {
					this.texture.asset.retain();
				}
			}
		}
	}
	,hitTest: function(x,y,matrix) {
		if(this.complexHit) {
			var testX = x * matrix.a + y * matrix.c + matrix.tx;
			var testY = x * matrix.b + y * matrix.d + matrix.ty;
			var floatsPerVertex = 2 + this.customFloatAttributesSize;
			var i = 0;
			var j = 0;
			var k;
			var numTriangles = this.indices.length / 3 | 0;
			var na;
			var nb;
			var nc;
			var ax;
			var ay;
			var bx;
			var by;
			var cx;
			var cy;
			while(i < numTriangles) {
				na = this.indices[j];
				++j;
				nb = this.indices[j];
				++j;
				nc = this.indices[j];
				++j;
				k = na * floatsPerVertex;
				ax = this.vertices[k];
				++k;
				ay = this.vertices[k];
				k = nb * floatsPerVertex;
				bx = this.vertices[k];
				++k;
				by = this.vertices[k];
				k = nc * floatsPerVertex;
				cx = this.vertices[k];
				++k;
				cy = this.vertices[k];
				var d1 = (testX - bx) * (ay - by) - (ax - bx) * (testY - by);
				var d2 = (testX - cx) * (by - cy) - (bx - cx) * (testY - cy);
				var d3 = (testX - ax) * (cy - ay) - (cx - ax) * (testY - ay);
				var hasNeg = d1 < 0 || d2 < 0 || d3 < 0;
				var hasPos = d1 > 0 || d2 > 0 || d3 > 0;
				if(!(hasNeg && hasPos)) {
					return true;
				}
				++i;
			}
			return false;
		} else {
			return ceramic_Visual.prototype.hitTest.call(this,x,y,matrix);
		}
	}
	,set_shader: function(shader) {
		this.shader = shader;
		if(shader != null) {
			this.customFloatAttributesSize = shader.customFloatAttributesSize;
		}
		return shader;
	}
	,computeSize: function() {
		if(this.vertices != null && this.vertices.length >= 2) {
			var maxX = 0;
			var maxY = 0;
			var i = 0;
			var lenMinus1 = this.vertices.length - 1;
			if(this.customFloatAttributesSize > 0) {
				while(i < lenMinus1) {
					var x = this.vertices[i];
					if(x > maxX) {
						maxX = x;
					}
					++i;
					var y = this.vertices[i];
					if(y > maxY) {
						maxY = y;
					}
					i += 1 + this.customFloatAttributesSize;
				}
			} else {
				while(i < lenMinus1) {
					var x = this.vertices[i];
					if(x > maxX) {
						maxX = x;
					}
					++i;
					var y = this.vertices[i];
					if(y > maxY) {
						maxY = y;
					}
					++i;
				}
			}
			var height = Math.round(maxY * 1000) / 1000;
			this.set_width(Math.round(maxX * 1000) / 1000);
			this.set_height(height);
		} else {
			this.set_width(0);
			this.set_height(0);
		}
	}
	,grid: function(cols,rows,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(width == -1) {
			width = this._width;
		}
		if(height == -1) {
			height = this._height;
		}
		var stepX = width / cols;
		var stepY = height / rows;
		var v = 0;
		var i = 0;
		var _g = 0;
		var _g1 = rows + 1;
		while(_g < _g1) {
			var r = _g++;
			var y = r * stepY;
			var _g2 = 0;
			var _g3 = cols + 1;
			while(_g2 < _g3) {
				var c = _g2++;
				this.vertices[v] = c * stepX;
				++v;
				this.vertices[v] = y;
				++v;
				if(r > 0 && c > 0) {
					var n = (r - 1) * (cols + 1) + c - 1;
					this.indices[i] = n;
					++i;
					this.indices[i] = n + 1;
					++i;
					this.indices[i] = n + (cols + 1);
					++i;
					this.indices[i] = n + 1;
					++i;
					this.indices[i] = n + (cols + 1);
					++i;
					this.indices[i] = n + (cols + 1) + 1;
					++i;
				}
			}
		}
		if(this.vertices.length > v) {
			var array = this.vertices;
			if(array.length != v) {
				if(array.length > v) {
					array.splice(v,array.length - v);
				} else {
					var dArray = array;
					dArray[v - 1] = null;
				}
			}
		}
		if(this.indices.length > i) {
			var array = this.indices;
			if(array.length != i) {
				if(array.length > i) {
					array.splice(i,array.length - i);
				} else {
					var dArray = array;
					dArray[i - 1] = null;
				}
			}
		}
	}
	,gridFromTexture: function(cols,rows,texture) {
		if(texture == null) {
			texture = this.texture;
		}
		this.grid(cols,rows,texture.width,texture.height);
		var u = 0;
		var stepX = 1.0 / cols;
		var stepY = 1.0 / rows;
		var _g = 0;
		var _g1 = rows + 1;
		while(_g < _g1) {
			var r = _g++;
			var y = r * stepY;
			this.uvs[u] = 0;
			++u;
			this.uvs[u] = y;
			++u;
			var _g2 = 1;
			var _g3 = cols + 1;
			while(_g2 < _g3) {
				var c = _g2++;
				this.uvs[u] = c * stepX;
				++u;
				this.uvs[u] = y;
				++u;
			}
		}
		if(this.uvs.length > u) {
			var array = this.uvs;
			if(array.length != u) {
				if(array.length > u) {
					array.splice(u,array.length - u);
				} else {
					var dArray = array;
					dArray[u - 1] = null;
				}
			}
		}
	}
	,__class__: ceramic_Mesh
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_texture:"set_texture",set_color:"set_color",get_color:"get_color"})
});
var ceramic_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["ceramic.Path"] = ceramic_Path;
ceramic_Path.__name__ = "ceramic.Path";
ceramic_Path.withoutExtension = function(path) {
	var s = new ceramic_Path(path);
	s.ext = null;
	return s.toString();
};
ceramic_Path.withoutDirectory = function(path) {
	var s = new ceramic_Path(path);
	s.dir = null;
	return s.toString();
};
ceramic_Path.directory = function(path) {
	var s = new ceramic_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
ceramic_Path.extension = function(path) {
	var s = new ceramic_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
ceramic_Path.withExtension = function(path,ext) {
	var s = new ceramic_Path(path);
	s.ext = ext;
	return s.toString();
};
ceramic_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = ceramic_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return ceramic_Path.normalize(path);
};
ceramic_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var doubleSlashIndex = -1;
	while(true) {
		doubleSlashIndex = tmp.indexOf("//");
		if(!(doubleSlashIndex != -1)) {
			break;
		}
		tmp = tmp.substring(0,doubleSlashIndex) + tmp.substring(doubleSlashIndex + 1);
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g = 0;
	var _g1 = tmp.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = tmp.charCodeAt(i);
		switch(_g2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i2);
		}
	}
	return acc_b;
};
ceramic_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
ceramic_Path.removeTrailingSlashes = function(path) {
	_hx_loop1: while(true) {
		var _g = HxOverrides.cca(path,path.length - 1);
		if(_g == null) {
			break;
		} else {
			switch(_g) {
			case 47:case 92:
				path = HxOverrides.substr(path,0,-1);
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	return path;
};
ceramic_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
ceramic_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: ceramic_Path
};
var ceramic_PersistentData = function(id) {
	this.id = id;
	var rawData = ceramic_App.app.backend.io.readString("persistent_" + id);
	if(rawData != null) {
		try {
			var unserializer = new haxe_Unserializer(rawData);
			this.internalData = unserializer.unserialize();
		} catch( _g ) {
			ceramic_App.app.logger.warning("Failed to read persistent data with id " + id,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/PersistentData.hx", lineNumber : 22, className : "ceramic.PersistentData", methodName : "new"});
		}
	}
	if(this.internalData == null) {
		this.internalData = { };
	}
};
$hxClasses["ceramic.PersistentData"] = ceramic_PersistentData;
ceramic_PersistentData.__name__ = "ceramic.PersistentData";
ceramic_PersistentData.prototype = {
	get: function(key) {
		return this.internalData[key];
	}
	,set: function(key,value) {
		this.internalData[key] = value;
	}
	,remove: function(key) {
		Reflect.deleteField(this.internalData,key);
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.internalData,key);
	}
	,keys: function() {
		return Reflect.fields(this.internalData);
	}
	,save: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this.internalData);
		var rawData = serializer.toString();
		ceramic_App.app.backend.io.saveString("persistent_" + this.id,rawData);
	}
	,__class__: ceramic_PersistentData
};
var ceramic_PlatformSpecific = function() { };
$hxClasses["ceramic.PlatformSpecific"] = ceramic_PlatformSpecific;
ceramic_PlatformSpecific.__name__ = "ceramic.PlatformSpecific";
ceramic_PlatformSpecific.postAppInit = function() {
};
ceramic_PlatformSpecific.readStringFromAsset = function(assetPath) {
	return null;
};
ceramic_PlatformSpecific.readBytesFromAsset = function(assetPath) {
	return null;
};
ceramic_PlatformSpecific.getAssetsPath = function() {
	return null;
};
ceramic_PlatformSpecific.getRtti = function(c) {
	return haxe_rtti_Rtti.getRtti(c);
};
ceramic_PlatformSpecific.nodeRequire = function(module) {
	return null;
};
var ceramic_ReadOnlyArray = {};
ceramic_ReadOnlyArray.__properties__ = {get_length:"get_length",get_original:"get_original"};
ceramic_ReadOnlyArray.get_original = function(this1) {
	return this1;
};
ceramic_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
ceramic_ReadOnlyArray.unsafeGet = function(this1,index) {
	return this1[index];
};
var ceramic_ReadOnlyMap = {};
ceramic_ReadOnlyMap.__properties__ = {get_original:"get_original"};
ceramic_ReadOnlyMap.get_original = function(this1) {
	return this1;
};
ceramic_ReadOnlyMap.iterator = function(this1) {
	return this1.iterator();
};
ceramic_ReadOnlyMap.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
var ceramic_Texture = function(backendItem,density) {
	if(density == null) {
		density = -1;
	}
	this.filter = ceramic_TextureFilter.LINEAR;
	this.isRenderTexture = false;
	this.index = ceramic_Texture._nextIndex++;
	ceramic_Entity.call(this);
	if(density == -1) {
		density = ceramic_App.app.screen.get_texturesDensity();
	}
	this.backendItem = backendItem;
	this.set_density(density);
};
$hxClasses["ceramic.Texture"] = ceramic_Texture;
ceramic_Texture.__name__ = "ceramic.Texture";
ceramic_Texture.fromPixels = function(width,height,pixels,density) {
	if(density == null) {
		density = -1;
	}
	var backendItem = ceramic_App.app.backend.textures.createTexture(width,height,pixels);
	return new ceramic_Texture(backendItem,density);
};
ceramic_Texture.__super__ = ceramic_Entity;
ceramic_Texture.prototype = $extend(ceramic_Entity.prototype,{
	get_textureId: function() {
		return this.backendItem.textureId;
	}
	,get_nativeWidth: function() {
		return this.backendItem.width;
	}
	,get_nativeHeight: function() {
		return this.backendItem.height;
	}
	,get_nativeWidthActual: function() {
		return this.backendItem.widthActual;
	}
	,get_nativeHeightActual: function() {
		return this.backendItem.heightActual;
	}
	,set_density: function(density) {
		if(this.density == density) {
			return density;
		}
		this.density = density;
		this.width = this.backendItem.width / density;
		this.height = this.backendItem.height / density;
		return density;
	}
	,set_filter: function(filter) {
		if(this.filter == filter) {
			return filter;
		}
		this.filter = filter;
		var _this = ceramic_App.app.backend.textures;
		var texture = this.backendItem;
		switch(filter._hx_index) {
		case 0:
			texture.set_filterMin(9729);
			texture.set_filterMag(9729);
			break;
		case 1:
			texture.set_filterMin(9728);
			texture.set_filterMag(9728);
			break;
		}
		return filter;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		ceramic_App.app.backend.textures.destroyTexture(this.backendItem);
		this.backendItem = null;
	}
	,fetchPixels: function(result) {
		return ceramic_App.app.backend.textures.fetchTexturePixels(this.backendItem,result);
	}
	,submitPixels: function(pixels) {
		ceramic_App.app.backend.textures.submitTexturePixels(this.backendItem,pixels);
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"texture:")) {
				name = HxOverrides.substr(name,8,null);
			}
			return "Texture(" + name + " " + this.width + " " + this.height + " " + this.density + " #" + this.index + ")";
		} else {
			return "Texture(" + this.width + " " + this.height + " " + this.density + " #" + this.index + ")";
		}
	}
	,__class__: ceramic_Texture
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_filter:"set_filter",set_density:"set_density",get_nativeHeightActual:"get_nativeHeightActual",get_nativeWidthActual:"get_nativeWidthActual",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_textureId:"get_textureId"})
});
var ceramic_RenderTexture = function(width,height,density) {
	if(density == null) {
		density = -1;
	}
	this.priority = 0;
	this.dependingTextures = null;
	this.renderDirty = false;
	this.clearOnRender = true;
	this.autoRender = true;
	if(density == -1) {
		density = ceramic_App.app.screen.get_texturesDensity();
	}
	var _this = ceramic_App.app.backend.textures;
	var width1 = Math.round(width * density);
	var height1 = Math.round(height * density);
	var id = "render:" + _this.nextRenderIndex++;
	var renderTexture = new clay_graphics_RenderTexture();
	renderTexture.id = id;
	renderTexture.width = width1;
	renderTexture.height = height1;
	renderTexture.stencil = true;
	renderTexture.init();
	_this.loadedTexturesRetainCount.h[id] = 1;
	var backendItem = renderTexture;
	ceramic_Texture.call(this,backendItem,density);
	this.isRenderTexture = true;
	ceramic_App.app.renderTextures.push(this);
};
$hxClasses["ceramic.RenderTexture"] = ceramic_RenderTexture;
ceramic_RenderTexture.__name__ = "ceramic.RenderTexture";
ceramic_RenderTexture.__super__ = ceramic_Texture;
ceramic_RenderTexture.prototype = $extend(ceramic_Texture.prototype,{
	destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Texture.prototype.destroy.call(this);
		HxOverrides.remove(ceramic_App.app.renderTextures,this);
	}
	,stamp: function(visual,done) {
		var _gthis = this;
		var visualParent = visual.parent;
		var visualRenderTarget = visual.renderTarget;
		var visualVisible = visual.visible;
		if(visualParent != null) {
			visualParent.remove(visual);
		}
		visual.set_renderTarget(this);
		visual.set_visible(true);
		var _this = ceramic_App.app;
		if(_this.inUpdate) {
			_this.shouldUpdateAndDrawAgain = true;
		}
		ceramic_App.app.onceUpdate(this,function(_) {
			_gthis.renderDirty = true;
			ceramic_App.app.onceFinishDraw(_gthis,function() {
				visual.set_visible(visualVisible);
				visual.set_renderTarget(visualRenderTarget);
				if(visualParent != null) {
					visualParent.add(visual);
					visualParent = null;
				}
				visual = null;
				visualRenderTarget = null;
				done();
				done = null;
			});
		});
	}
	,clear: function(color,alpha,clipX,clipY,clipWidth,clipHeight,done) {
		if(clipHeight == null) {
			clipHeight = -1;
		}
		if(clipWidth == null) {
			clipWidth = -1;
		}
		if(clipY == null) {
			clipY = -1;
		}
		if(clipX == null) {
			clipX = -1;
		}
		if(alpha == null) {
			alpha = 0;
		}
		if(color == null) {
			color = 16777215;
		}
		if(ceramic_RenderTexture._clearQuad == null) {
			ceramic_RenderTexture._clearQuad = new ceramic_Quad();
			ceramic_RenderTexture._clearQuad.set_active(false);
			ceramic_RenderTexture._clearQuad.set_blending(4);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_anchorX(0);
			_this.set_anchorY(0);
		}
		ceramic_RenderTexture._clearQuad.color = color;
		ceramic_RenderTexture._clearQuad.set_alpha(alpha);
		ceramic_RenderTexture._clearQuad.set_depth(-1);
		if(clipX != -1 && clipY != -1 && clipWidth != -1 && clipHeight != -1) {
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_width(clipWidth);
			_this.set_height(clipHeight);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_x(clipX);
			_this.set_y(clipY);
		} else {
			var _this = ceramic_RenderTexture._clearQuad;
			var height = this.height;
			_this.set_width(this.width);
			_this.set_height(height);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_x(0);
			_this.set_y(0);
		}
		this.stamp(ceramic_RenderTexture._clearQuad,done);
	}
	,dependsOnTexture: function(texture) {
		if(this.dependingTextures != null) {
			var value = this.dependingTextures.h[texture.index | 0];
			return (value != null ? value : 0) > 0;
		} else {
			return false;
		}
	}
	,incrementDependingTextureCount: function(texture) {
		if(this.dependingTextures == null) {
			var this1 = new haxe_ds_IntMap();
			this.dependingTextures = this1;
		}
		var value = this.dependingTextures.h[texture.index | 0];
		var prevValue = value != null ? value : 0;
		var value = prevValue + 1;
		this.dependingTextures.h[texture.index | 0] = value;
	}
	,resetDependingTextureCounts: function() {
		if(this.dependingTextures != null) {
			this.dependingTextures.h = { };
		}
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"texture:")) {
				name = HxOverrides.substr(name,8,null);
			}
			return "RenderTexture(" + name + " " + this.width + " " + this.height + " " + this.density + " #" + this.index + "/" + this.priority + ")";
		} else {
			return "RenderTexture(" + this.width + " " + this.height + " " + this.density + " #" + this.index + "/" + this.priority + ")";
		}
	}
	,__class__: ceramic_RenderTexture
});
var ceramic_Renderer = function() {
	this.activeShaderCanBatchMultipleTextures = false;
	this.maxUsableTexturesInBatch = -1;
	this.usedTextures = 0;
	this.usedTextureIndexes = [];
	this.z = 0;
	this.stateDirty = true;
	this.mesh = null;
	this.quad = null;
	this.defaultWhiteTexture = null;
	this.defaultTexturedShader = null;
	this.texHeightActual = 0;
	this.texWidthActual = 0;
	this.texHeight = 0;
	this.texWidth = 0;
	this.activeTextureSlot = 0;
	this.lastClip = null;
	this.lastComputedBlending = 1;
	this.lastRenderTarget = null;
	this.lastShader = null;
	this.lastTextureId = null;
	this.lastTexture = null;
	this.stencilClip = false;
	this.customFloatAttributesSize = 0;
	this.activeShader = null;
	this.drawCalls = 0;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Renderer"] = ceramic_Renderer;
ceramic_Renderer.__name__ = "ceramic.Renderer";
ceramic_Renderer.__super__ = ceramic_Entity;
ceramic_Renderer.prototype = $extend(ceramic_Entity.prototype,{
	render: function(isMainRender,ceramicVisuals) {
		var draw = ceramic_App.app.backend.draw;
		this.backendTextures = ceramic_App.app.backend.textures;
		this.backendShaders = ceramic_App.app.backend.shaders;
		this.defaultTexturedShader = ceramic_App.app.defaultTexturedShader.backendItem;
		this.defaultWhiteTexture = ceramic_App.app.defaultWhiteTexture;
		this.maxUsableTexturesInBatch = Math.min(this.backendTextures.maxTexturesByBatch(),this.backendShaders.maxIfStatementsByFragmentShader()) | 0;
		while(this.usedTextureIndexes.length < this.maxUsableTexturesInBatch) this.usedTextureIndexes.push(0);
		this.drawCalls = 0;
		backend_Draw._activeTextureSlot = 0;
		backend_Draw._buffersIndex = -1;
		draw.prepareNextBuffers();
		this.quad = null;
		this.mesh = null;
		this.lastTexture = null;
		this.lastTextureId = null;
		this.lastShader = null;
		this.lastRenderTarget = null;
		this.lastComputedBlending = 1;
		this.lastClip = null;
		this.usedTextures = 0;
		this.texWidth = 0;
		this.texHeight = 0;
		this.texWidthActual = 0;
		this.texHeightActual = 0;
		this.stencilClip = false;
		this.z = 0;
		this.stateDirty = true;
		var defaultTexturedShader = ceramic_App.app.defaultTexturedShader.backendItem;
		var allRenderTextures = ceramic_App.app.renderTextures;
		var _g = 0;
		var _g1 = allRenderTextures.length;
		while(_g < _g1) {
			var ii = _g++;
			var renderTexture = allRenderTextures[ii];
			if(renderTexture.autoRender) {
				renderTexture.renderDirty = true;
			}
		}
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		this.usedTextures = this.maxUsableTexturesInBatch;
		this.unbindUsedTextures(draw);
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		var renderTarget = null;
		var force = true;
		if(force == null) {
			force = false;
		}
		if(backend_Draw._currentRenderTarget != renderTarget || force) {
			backend_Draw._currentRenderTarget = renderTarget;
			if(renderTarget != null) {
				var renderTexture = renderTarget.backendItem;
				var renderTarget1 = renderTexture.renderTarget;
				if(renderTarget1 != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = renderTarget.width;
				var bottom = renderTarget.height;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var _this = backend_Draw._renderTargetTransform;
				_this.a = 1;
				_this.b = 0;
				_this.c = 0;
				_this.d = 1;
				_this.tx = 0;
				_this.ty = 0;
				_this.changedDirty = true;
				var _this = backend_Draw._renderTargetTransform;
				var x = renderTarget.density;
				var y = renderTarget.density;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
				var density = renderTarget.density;
				var width = renderTarget.width;
				var height = renderTarget.height;
				var transform = backend_Draw._renderTargetTransform;
				var flipY = -1;
				if(flipY == null) {
					flipY = 1;
				}
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				if(flipY == -1) {
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -width * 0.5;
					_this.ty += -height * 0.5;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= 1;
					_this.b *= -1;
					_this.c *= 1;
					_this.d *= -1;
					_this.tx *= 1;
					_this.ty *= -1;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += width * 0.5;
					_this.ty += height * 0.5;
					_this.changedDirty = true;
				}
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
				if(renderTarget.clearOnRender) {
					clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
				}
			} else {
				var renderTarget = null;
				if(renderTarget != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = clay_Clay.app.screenWidth;
				var bottom = clay_Clay.app.screenHeight;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var density = clay_Clay.app.screenDensity;
				var width = clay_Clay.app.screenWidth;
				var height = clay_Clay.app.screenHeight;
				var transform = ceramic_App.app.screen.matrix;
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
			}
		}
		var background = ceramic_App.app.settings.get_background();
		clay_opengl_web_GL.gl.clearColor((background >> 16 & 255) / 255,(background >> 8 & 255) / 255,(background & 255) / 255,1);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
		clay_opengl_web_GL.gl.enable(3042);
		this.activeShader = null;
		this.lastShader = null;
		this.useShader(draw,null);
		clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
		this.lastComputedBlending = 1;
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.disable(2960);
		if(ceramicVisuals != null) {
			var _g = 0;
			var _g1 = ceramicVisuals.length;
			while(_g < _g1) {
				var ii = _g++;
				var visual = ceramicVisuals[ii];
				var quad = visual.asQuad;
				var mesh = visual.asMesh;
				if(visual.computedVisible) {
					if(visual.computedRenderTarget == null || visual.computedRenderTarget.renderDirty) {
						var clip;
						if(visual.computedClip) {
							var clippingVisual = visual;
							while(clippingVisual != null && clippingVisual.clip == null) clippingVisual = clippingVisual.parent;
							clip = clippingVisual != null ? clippingVisual.clip : null;
						} else {
							clip = null;
						}
						if(clip != this.lastClip) {
							this.flush(draw);
							this.unbindUsedTextures(draw);
							this.stateDirty = true;
							if(this.lastClip != null) {
								this.lastRenderTarget = this.lastClip.computedRenderTarget;
								this.useRenderTarget(draw,this.lastRenderTarget);
								clay_opengl_web_GL.gl.stencilFunc(519,1,255);
								clay_opengl_web_GL.gl.stencilMask(255);
								clay_opengl_web_GL.gl.colorMask(true,true,true,true);
								clay_opengl_web_GL.gl.disable(2960);
							}
							this.lastClip = clip;
							if(this.lastClip != null) {
								this.lastRenderTarget = this.lastClip.computedRenderTarget;
								this.useRenderTarget(draw,this.lastRenderTarget);
								backend_Draw._drawingInStencilBuffer = true;
								clay_opengl_web_GL.gl.stencilMask(255);
								clay_opengl_web_GL.gl.clearStencil(255);
								clay_opengl_web_GL.gl.clear(1024);
								clay_opengl_web_GL.gl.enable(2960);
								clay_opengl_web_GL.gl.stencilOp(7680,7680,7681);
								clay_opengl_web_GL.gl.stencilFunc(519,1,255);
								clay_opengl_web_GL.gl.stencilMask(255);
								clay_opengl_web_GL.gl.colorMask(false,false,false,false);
								if(this.lastClip.asQuad != null) {
									quad = this.lastClip.asQuad;
									this.stencilClip = true;
									this.drawQuad(draw,quad);
									this.stencilClip = false;
									quad = visual.asQuad;
								} else if(this.lastClip.asMesh != null) {
									mesh = this.lastClip.asMesh;
									this.stencilClip = true;
									this.drawMesh(draw,mesh);
									this.stencilClip = false;
									mesh = visual.asMesh;
								}
								this.flush(draw);
								this.unbindUsedTextures(draw);
								this.stateDirty = true;
								backend_Draw._drawingInStencilBuffer = false;
								clay_opengl_web_GL.gl.stencilFunc(514,1,255);
								clay_opengl_web_GL.gl.stencilMask(0);
								clay_opengl_web_GL.gl.colorMask(true,true,true,true);
								clay_opengl_web_GL.gl.enable(2960);
							}
						}
						if(quad != null && !quad.transparent) {
							this.drawQuad(draw,quad);
						} else if(mesh != null) {
							this.drawMesh(draw,mesh);
						}
					}
				}
			}
			this.flush(draw);
			this.unbindUsedTextures(draw);
			this.stateDirty = true;
		}
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		var renderTarget = null;
		var force = true;
		if(force == null) {
			force = false;
		}
		if(backend_Draw._currentRenderTarget != renderTarget || force) {
			backend_Draw._currentRenderTarget = renderTarget;
			if(renderTarget != null) {
				var renderTexture = renderTarget.backendItem;
				var renderTarget1 = renderTexture.renderTarget;
				if(renderTarget1 != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = renderTarget.width;
				var bottom = renderTarget.height;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var _this = backend_Draw._renderTargetTransform;
				_this.a = 1;
				_this.b = 0;
				_this.c = 0;
				_this.d = 1;
				_this.tx = 0;
				_this.ty = 0;
				_this.changedDirty = true;
				var _this = backend_Draw._renderTargetTransform;
				var x = renderTarget.density;
				var y = renderTarget.density;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
				var density = renderTarget.density;
				var width = renderTarget.width;
				var height = renderTarget.height;
				var transform = backend_Draw._renderTargetTransform;
				var flipY = -1;
				if(flipY == null) {
					flipY = 1;
				}
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				if(flipY == -1) {
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -width * 0.5;
					_this.ty += -height * 0.5;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= 1;
					_this.b *= -1;
					_this.c *= 1;
					_this.d *= -1;
					_this.tx *= 1;
					_this.ty *= -1;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += width * 0.5;
					_this.ty += height * 0.5;
					_this.changedDirty = true;
				}
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
				if(renderTarget.clearOnRender) {
					clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
				}
			} else {
				var renderTarget = null;
				if(renderTarget != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(null);
					clay_opengl_GLGraphics.bindRenderbuffer(null);
				}
				var left = 0.0;
				var top = 0.0;
				var right = clay_Clay.app.screenWidth;
				var bottom = clay_Clay.app.screenHeight;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var density = clay_Clay.app.screenDensity;
				var width = clay_Clay.app.screenWidth;
				var height = clay_Clay.app.screenHeight;
				var transform = ceramic_App.app.screen.matrix;
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
			}
		}
		clay_opengl_web_GL.gl.enable(3042);
		this.activeShader = null;
		this.lastShader = null;
		this.useShader(draw,null);
		clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
	}
	,drawQuad: function(draw,quad) {
		var _gthis = this;
		if(this.stencilClip) {
			this.unbindUsedTextures(draw);
			this.useFirstTextureInBatch(draw,null);
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			this.lastComputedBlending = 1;
			this.lastRenderTarget = quad.computedRenderTarget;
			this.useRenderTarget(draw,this.lastRenderTarget);
			this.lastShader = null;
			this.useShader(draw,null);
			this.stateDirty = false;
		} else {
			var textureToUseInSameBatch = null;
			if(!this.stateDirty) {
				var newComputedBlending = this.computeQuadBlending(quad);
				this.stateDirty = !this.isSameShader(quad.shader,this.lastShader) || newComputedBlending != this.lastComputedBlending || quad.computedRenderTarget != this.lastRenderTarget;
				if(!this.stateDirty) {
					if(quad.texture != this.lastTexture) {
						if(quad.texture != null && this.lastTexture != null) {
							if(quad.texture.backendItem.textureId != this.lastTextureId) {
								if(!this.canUseTextureInSameBatch(draw,quad.texture)) {
									this.stateDirty = true;
								} else {
									textureToUseInSameBatch = quad.texture;
								}
							}
						} else if(!this.canUseTextureInSameBatch(draw,quad.texture)) {
							this.stateDirty = true;
						} else {
							textureToUseInSameBatch = quad.texture != null ? quad.texture : this.defaultWhiteTexture;
						}
					}
				}
			}
			if(this.stateDirty) {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = quad.texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(quad.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = quad.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
				}
				_gthis.lastShader = quad.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeQuadBlending(quad);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
			} else if(textureToUseInSameBatch != null) {
				this.useTextureInSameBatch(draw,textureToUseInSameBatch);
			}
		}
		if(backend_Draw._numPos + 4 > backend_Draw._maxVerts || backend_Draw._numIndices + 6 > 16384) {
			_gthis.flush(draw);
			_gthis.unbindUsedTextures(draw);
			_gthis.lastTexture = quad.texture;
			_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
			if(quad.computedRenderTarget != _gthis.lastRenderTarget) {
				_gthis.lastRenderTarget = quad.computedRenderTarget;
				_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
			}
			_gthis.lastShader = quad.shader;
			_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
			_gthis.lastComputedBlending = _gthis.computeQuadBlending(quad);
			_gthis.useBlending(draw,_gthis.lastComputedBlending);
			_gthis.stateDirty = false;
		}
		var w = quad.get_width();
		var h = quad.get_height();
		var matA = quad.matA;
		var matB = quad.matB;
		var matC = quad.matC;
		var matD = quad.matD;
		var matTX = quad.matTX;
		var matTY = quad.matTY;
		var z = this.z;
		var textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
		var quadDrawsRenderTexture = quad.texture != null && quad.texture.isRenderTexture;
		if(this.customFloatAttributesSize == 0) {
			if(textureSlot != -1) {
				var numPos = backend_Draw._numPos;
				backend_Draw._posList[backend_Draw._posIndex] = matTX;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				var n8 = matTX + matA * w + matC * h;
				var n9 = matTY + matB * w + matD * h;
				backend_Draw._posList[backend_Draw._posIndex] = n8;
				backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
				backend_Draw._numIndices++;
			} else {
				var numPos = backend_Draw._numPos;
				backend_Draw._posList[backend_Draw._posIndex] = matTX;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				var n8 = matTX + matA * w + matC * h;
				var n9 = matTY + matB * w + matD * h;
				backend_Draw._posList[backend_Draw._posIndex] = n8;
				backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
				backend_Draw._numIndices++;
			}
		} else if(textureSlot != -1) {
			var numPos = backend_Draw._numPos;
			backend_Draw._posList[backend_Draw._posIndex] = matTX;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			var n8 = matTX + matA * w + matC * h;
			var n9 = matTY + matB * w + matD * h;
			backend_Draw._posList[backend_Draw._posIndex] = n8;
			backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
			backend_Draw._numIndices++;
		} else {
			var numPos = backend_Draw._numPos;
			backend_Draw._posList[backend_Draw._posIndex] = matTX;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			var n8 = matTX + matA * w + matC * h;
			var n9 = matTY + matB * w + matD * h;
			backend_Draw._posList[backend_Draw._posIndex] = n8;
			backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
			backend_Draw._numIndices++;
		}
		var r;
		var g;
		var b;
		var a;
		if(this.stencilClip) {
			a = 1;
			r = 1;
			g = 0;
			b = 0;
		} else if(quadDrawsRenderTexture || this.lastComputedBlending == 3) {
			a = quad.computedAlpha;
			r = (quad.color >> 16 & 255) / 255;
			g = (quad.color >> 8 & 255) / 255;
			b = (quad.color & 255) / 255;
			if(quad.blending == 2 && this.lastComputedBlending != 2) {
				a = 0;
			}
		} else {
			a = quad.computedAlpha;
			r = (quad.color >> 16 & 255) / 255 * a;
			g = (quad.color >> 8 & 255) / 255 * a;
			b = (quad.color & 255) / 255 * a;
			if(quad.blending == 2 && this.lastComputedBlending != 2) {
				a = 0;
			}
		}
		var i = 0;
		while(i < 4) {
			backend_Draw._colorList[backend_Draw._colorIndex] = r;
			backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
			backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
			backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
			backend_Draw._colorIndex += 4;
			backend_Draw._numColors++;
			++i;
		}
		var uvX = 0;
		var uvY = 0;
		var uvW = 0;
		var uvH = 0;
		if(quad.texture != null) {
			var texWidthActual = this.texWidthActual;
			var texHeightActual = this.texHeightActual;
			var texDensity = quad.texture.density;
			uvX = quad.frameX * texDensity / texWidthActual;
			uvY = quad.frameY * texDensity / texHeightActual;
			uvW = quad.frameWidth * texDensity / texWidthActual;
			uvH = quad.frameHeight * texDensity / texHeightActual;
			backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
		} else {
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
		}
		this.z = z + 0.001;
	}
	,drawMesh: function(draw,mesh) {
		var _gthis = this;
		if(this.stencilClip) {
			this.unbindUsedTextures(draw);
			this.useFirstTextureInBatch(draw,null);
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			this.lastComputedBlending = 1;
			this.lastRenderTarget = this.quad.computedRenderTarget;
			this.useRenderTarget(draw,this.lastRenderTarget);
			this.lastShader = null;
			this.useShader(draw,null);
			this.stateDirty = false;
		} else {
			var textureToUseInSameBatch = null;
			if(!this.stateDirty) {
				var newComputedBlending = this.computeMeshBlending(mesh);
				this.stateDirty = !this.isSameShader(mesh.shader,this.lastShader) || newComputedBlending != this.lastComputedBlending || mesh.computedRenderTarget != this.lastRenderTarget;
				if(!this.stateDirty) {
					if(mesh.texture != this.lastTexture) {
						if(mesh.texture != null && this.lastTexture != null) {
							if(mesh.texture.backendItem.textureId != this.lastTextureId) {
								if(!this.canUseTextureInSameBatch(draw,mesh.texture)) {
									this.stateDirty = true;
								} else {
									textureToUseInSameBatch = mesh.texture;
								}
							}
						} else if(!this.canUseTextureInSameBatch(draw,mesh.texture)) {
							this.stateDirty = true;
						} else {
							textureToUseInSameBatch = mesh.texture != null ? mesh.texture : this.defaultWhiteTexture;
						}
					}
				}
			}
			if(this.stateDirty) {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = mesh.texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = mesh.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
				}
				_gthis.lastShader = mesh.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
			} else if(textureToUseInSameBatch != null) {
				this.useTextureInSameBatch(draw,textureToUseInSameBatch);
			}
		}
		var matA = mesh.matA;
		var matB = mesh.matB;
		var matC = mesh.matC;
		var matD = mesh.matD;
		var matTX = mesh.matTX;
		var matTY = mesh.matTY;
		var z = this.z;
		var textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
		var meshColors = mesh.colors;
		var meshSingleColor = this.stencilClip || mesh.colorMapping == 0;
		var meshIndicesColor = !this.stencilClip && mesh.colorMapping == 1;
		var meshUvs = mesh.uvs;
		var meshVertices = mesh.vertices;
		var meshIndices = mesh.indices;
		var visualNumVertices = meshIndices.length;
		var customFloatAttributesSize = this.customFloatAttributesSize;
		var meshCustomFloatAttributesSize = mesh.customFloatAttributesSize;
		var startVertices = 0;
		var meshDrawsRenderTexture = mesh.texture != null && mesh.texture.isRenderTexture;
		var endVertices = visualNumVertices;
		if(backend_Draw._numPos + visualNumVertices > backend_Draw._maxVerts || backend_Draw._numIndices + visualNumVertices > 16384) {
			_gthis.flush(draw);
			_gthis.unbindUsedTextures(draw);
			_gthis.lastTexture = mesh.texture;
			_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
			if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
				_gthis.lastRenderTarget = mesh.computedRenderTarget;
				_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
			}
			_gthis.lastShader = mesh.shader;
			_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
			_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
			_gthis.useBlending(draw,_gthis.lastComputedBlending);
			_gthis.stateDirty = false;
			textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
			if(visualNumVertices > backend_Draw._maxVerts - backend_Draw._numPos || visualNumVertices > 16384 - backend_Draw._numIndices) {
				endVertices = Math.min(backend_Draw._maxVerts - backend_Draw._numPos,16384 - backend_Draw._numIndices) | 0;
				endVertices = (endVertices / 3 | 0) * 3;
			}
		}
		var texture = mesh.texture;
		var uvFactorX = 0;
		var uvFactorY = 0;
		if(texture != null) {
			uvFactorX = this.texWidth / this.texWidthActual;
			uvFactorY = this.texHeight / this.texHeightActual;
		}
		while(true) {
			var a = 0;
			var r = 0;
			var g = 0;
			var b = 0;
			if(meshSingleColor) {
				if(_gthis.stencilClip) {
					a = 1;
					r = 1;
					g = 0;
					b = 0;
				} else if(meshDrawsRenderTexture || _gthis.lastComputedBlending == 3) {
					var meshAlphaColor = meshColors[0];
					a = mesh.computedAlpha * ((meshAlphaColor >> 24 & 255) / 255);
					r = (meshAlphaColor >> 16 & 255) / 255;
					g = (meshAlphaColor >> 8 & 255) / 255;
					b = (meshAlphaColor & 255) / 255;
					if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
						a = 0;
					}
				} else {
					var meshAlphaColor1 = meshColors[0];
					a = mesh.computedAlpha * ((meshAlphaColor1 >> 24 & 255) / 255);
					r = (meshAlphaColor1 >> 16 & 255) / 255 * a;
					g = (meshAlphaColor1 >> 8 & 255) / 255 * a;
					b = (meshAlphaColor1 & 255) / 255 * a;
					if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
						a = 0;
					}
				}
			}
			var i = startVertices;
			var numPos = backend_Draw._numPos;
			while(i < endVertices) {
				var j = meshIndices[i];
				var k = j * 2;
				var l = j * (2 + meshCustomFloatAttributesSize);
				var x = meshVertices[l++];
				var y = meshVertices[l++];
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				++numPos;
				if(textureSlot != -1) {
					backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * x + matC * y;
					backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * x + matD * y;
					backend_Draw._posList[backend_Draw._posIndex + 2] = z;
					backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
					backend_Draw._posIndex += 4;
					backend_Draw._numPos++;
				} else {
					backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * x + matC * y;
					backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * x + matD * y;
					backend_Draw._posList[backend_Draw._posIndex + 2] = z;
					backend_Draw._posIndex += 3;
					backend_Draw._numPos++;
				}
				if(!meshSingleColor) {
					var meshAlphaColor2 = meshIndicesColor ? meshColors[i] : meshColors[j];
					if(meshDrawsRenderTexture || _gthis.lastComputedBlending == 3) {
						a = mesh.computedAlpha * ((meshAlphaColor2 >> 24 & 255) / 255);
						r = (meshAlphaColor2 >> 16 & 255) / 255;
						g = (meshAlphaColor2 >> 8 & 255) / 255;
						b = (meshAlphaColor2 & 255) / 255;
						if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
							a = 0;
						}
					} else {
						a = mesh.computedAlpha * ((meshAlphaColor2 >> 24 & 255) / 255);
						r = (meshAlphaColor2 >> 16 & 255) / 255 * a;
						g = (meshAlphaColor2 >> 8 & 255) / 255 * a;
						b = (meshAlphaColor2 & 255) / 255 * a;
						if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
							a = 0;
						}
					}
				}
				backend_Draw._colorList[backend_Draw._colorIndex] = r;
				backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
				backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
				backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
				backend_Draw._colorIndex += 4;
				backend_Draw._numColors++;
				if(texture != null) {
					var uvX = meshUvs[k] * uvFactorX;
					var uvY = meshUvs[k + 1] * uvFactorY;
					backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
					backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
					backend_Draw._uvIndex += 2;
					backend_Draw._numUVs++;
				} else {
					backend_Draw._uvList[backend_Draw._uvIndex] = 0;
					backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
					backend_Draw._uvIndex += 2;
					backend_Draw._numUVs++;
				}
				if(customFloatAttributesSize != 0) {
					var _g = 0;
					var _g1 = customFloatAttributesSize;
					while(_g < _g1) {
						var n = _g++;
						if(n < meshCustomFloatAttributesSize) {
							backend_Draw._posList[backend_Draw._posIndex + n] = meshVertices[l++];
						} else {
							backend_Draw._posList[backend_Draw._posIndex + n] = 0.0;
						}
					}
					backend_Draw._posIndex += backend_Draw._floatAttributesSize;
				}
				++i;
			}
			if(endVertices == visualNumVertices) {
				break;
			} else {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = mesh.texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = mesh.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
				}
				_gthis.lastShader = mesh.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
				textureSlot = _gthis.activeShaderCanBatchMultipleTextures ? _gthis.activeTextureSlot : -1;
				startVertices = endVertices;
				endVertices = startVertices + (Math.min(backend_Draw._maxVerts - backend_Draw._numPos,16384 - backend_Draw._numIndices) | 0);
				endVertices = (endVertices / 3 | 0) * 3;
				if(endVertices > visualNumVertices) {
					endVertices = visualNumVertices;
				}
			}
		}
		this.z = z + 0.001;
	}
	,flush: function(draw) {
		if(backend_Draw._numPos <= 0) {
			return false;
		}
		var batchMultiTexture = backend_Draw._batchMultiTexture;
		var pos = new Float32Array(backend_Draw._posList.buffer,0,backend_Draw._posIndex * 4 / 4 | 0);
		var uvs = new Float32Array(backend_Draw._uvList.buffer,0,backend_Draw._uvIndex * 4 / 4 | 0);
		var colors = new Float32Array(backend_Draw._colorList.buffer,0,backend_Draw._colorIndex * 4 / 4 | 0);
		var indices = new Uint16Array(backend_Draw._indiceList.buffer,0,backend_Draw._numIndices * 2 / 2 | 0);
		var pb = clay_opengl_web_GL.gl.createBuffer();
		var cb = clay_opengl_web_GL.gl.createBuffer();
		var tb = clay_opengl_web_GL.gl.createBuffer();
		var ib = clay_opengl_web_GL.gl.createBuffer();
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		clay_opengl_web_GL.gl.bindBuffer(34962,pb);
		clay_opengl_web_GL.gl.vertexAttribPointer(0,3,5126,false,backend_Draw._posSize * 4,0);
		clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,tb);
		clay_opengl_web_GL.gl.vertexAttribPointer(1,2,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,uvs,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,cb);
		clay_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,colors,35040);
		var offset = 3;
		var n = 3;
		var customGLBuffersLen = 0;
		if(batchMultiTexture) {
			var b = clay_opengl_web_GL.gl.createBuffer();
			backend_Draw._customGLBuffers[customGLBuffersLen++] = b;
			clay_opengl_web_GL.gl.enableVertexAttribArray(n);
			clay_opengl_web_GL.gl.bindBuffer(34962,b);
			clay_opengl_web_GL.gl.vertexAttribPointer(n,1,5126,false,backend_Draw._posSize * 4,offset * 4);
			clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
			++n;
			++offset;
		}
		if(backend_Draw._activeShader != null && backend_Draw._activeShader.customAttributes != null) {
			var allAttrs = backend_Draw._activeShader.customAttributes;
			var start = customGLBuffersLen;
			var end = start + allAttrs.length;
			customGLBuffersLen += allAttrs.length;
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var ii = _g++;
				var attrIndex = ii - start;
				var attr = allAttrs[attrIndex];
				var b = clay_opengl_web_GL.gl.createBuffer();
				backend_Draw._customGLBuffers[ii] = b;
				clay_opengl_web_GL.gl.enableVertexAttribArray(n);
				clay_opengl_web_GL.gl.bindBuffer(34962,b);
				clay_opengl_web_GL.gl.vertexAttribPointer(n,attr.size,5126,false,backend_Draw._posSize * 4,offset * 4);
				clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
				++n;
				offset += attr.size;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,ib);
		clay_opengl_web_GL.gl.bufferData(34963,indices,35040);
		clay_opengl_web_GL.gl.drawElements(4,backend_Draw._numIndices,5123,0);
		clay_opengl_web_GL.gl.deleteBuffer(pb);
		clay_opengl_web_GL.gl.deleteBuffer(cb);
		clay_opengl_web_GL.gl.deleteBuffer(tb);
		if(customGLBuffersLen > 0) {
			var n = 3;
			var _g = 0;
			var _g1 = customGLBuffersLen;
			while(_g < _g1) {
				var ii = _g++;
				var b = backend_Draw._customGLBuffers[ii];
				clay_opengl_web_GL.gl.deleteBuffer(b);
				clay_opengl_web_GL.gl.disableVertexAttribArray(n);
				++n;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,null);
		clay_opengl_web_GL.gl.deleteBuffer(ib);
		pos = null;
		uvs = null;
		colors = null;
		indices = null;
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
		draw.prepareNextBuffers();
		this.drawCalls++;
		return true;
	}
	,computeQuadBlending: function(quad) {
		var blending = quad.blending;
		if(blending == 0 || blending == 2) {
			if(quad.computedRenderTarget != null) {
				blending = 5;
			} else {
				blending = 1;
			}
		}
		return blending;
	}
	,computeMeshBlending: function(mesh) {
		var blending = mesh.blending;
		if(blending == 0 || blending == 2) {
			if(mesh.computedRenderTarget != null) {
				blending = 5;
			} else {
				blending = 1;
			}
		}
		return blending;
	}
	,isSameShader: function(shaderA,shaderB) {
		var backendItemA = shaderA != null ? shaderA.backendItem : this.defaultTexturedShader;
		var backendItemB = shaderB != null ? shaderB.backendItem : this.defaultTexturedShader;
		return backendItemA == backendItemB;
	}
	,useShader: function(draw,shader) {
		if(shader == null) {
			shader = this.defaultTexturedShader;
		}
		this.activeShader = shader;
		backend_Draw._activeShader = shader;
		shader.uniforms.setMatrix4("projectionMatrix",backend_Draw._projectionMatrix);
		shader.uniforms.setMatrix4("modelViewMatrix",backend_Draw._modelViewMatrix);
		var shadersBackend = ceramic_App.app.backend.shaders;
		var customFloatAttributesSize = 0;
		var allAttrs = backend_Draw._activeShader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		backend_Draw._floatAttributesSize = customFloatAttributesSize;
		backend_Draw._batchMultiTexture = shadersBackend.canBatchWithMultipleTextures(backend_Draw._activeShader);
		backend_Draw._vertexSize = 3 + backend_Draw._floatAttributesSize + (backend_Draw._batchMultiTexture ? 1 : 0);
		backend_Draw._posSize = backend_Draw._vertexSize;
		if(backend_Draw._vertexSize < 4) {
			backend_Draw._vertexSize = 4;
		}
		backend_Draw._maxVerts = Math.floor(65536 / backend_Draw._vertexSize) | 0;
		shader.activate();
		if(backend_Draw._numPos == 0) {
			backend_Draw._numIndices = 0;
			backend_Draw._numPos = 0;
			backend_Draw._numUVs = 0;
			backend_Draw._numColors = 0;
			backend_Draw._posIndex = 0;
			backend_Draw._uvIndex = 0;
			backend_Draw._colorIndex = 0;
		}
		this.activeShaderCanBatchMultipleTextures = this.backendShaders.canBatchWithMultipleTextures(shader);
		var _this = this.backendShaders;
		var customFloatAttributesSize = 0;
		var allAttrs = shader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		this.customFloatAttributesSize = customFloatAttributesSize;
	}
	,useBlending: function(draw,blending) {
		switch(blending) {
		case 0:
			throw haxe_Exception.thrown("Cannot apply AUTO blending. Needs to be computed to an actual blending function.");
		case 1:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			break;
		case 2:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,1,1,1);
			break;
		case 3:
			clay_opengl_web_GL.gl.blendFuncSeparate(770,771,1,771);
			break;
		case 4:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,770,1,770);
			break;
		case 5:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,773,1);
			break;
		}
	}
	,useRenderTarget: function(draw,renderTarget) {
		if(renderTarget != null) {
			if(backend_Draw._currentRenderTarget != renderTarget) {
				backend_Draw._currentRenderTarget = renderTarget;
				if(renderTarget != null) {
					var renderTexture = renderTarget.backendItem;
					var renderTarget1 = renderTexture.renderTarget;
					if(renderTarget1 != null) {
						clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
						clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
					} else {
						clay_opengl_GLGraphics.bindFramebuffer(null);
						clay_opengl_GLGraphics.bindRenderbuffer(null);
					}
					var left = 0.0;
					var top = 0.0;
					var right = renderTarget.width;
					var bottom = renderTarget.height;
					var near = 1000.0;
					var far = -1000.0;
					var w = right - left;
					var h = top - bottom;
					var p = far - near;
					var tx = (right + left) / w;
					var ty = (top + bottom) / h;
					var tz = (far + near) / p;
					var m = backend_Draw._projectionMatrix;
					m[0] = 2 / w;
					m[4] = 0;
					m[8] = 0;
					m[12] = -tx;
					m[1] = 0;
					m[5] = 2 / h;
					m[9] = 0;
					m[13] = -ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = -2 / p;
					m[14] = -tz;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					var _this = backend_Draw._renderTargetTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
					var _this = backend_Draw._renderTargetTransform;
					var x = renderTarget.density;
					var y = renderTarget.density;
					_this.a *= x;
					_this.b *= y;
					_this.c *= x;
					_this.d *= y;
					_this.tx *= x;
					_this.ty *= y;
					_this.changedDirty = true;
					var density = renderTarget.density;
					var width = renderTarget.width;
					var height = renderTarget.height;
					var transform = backend_Draw._renderTargetTransform;
					var flipY = -1;
					if(flipY == null) {
						flipY = 1;
					}
					if(transform != null) {
						var _this = backend_Draw._modelViewTransform;
						_this.a = transform.a;
						_this.b = transform.b;
						_this.c = transform.c;
						_this.d = transform.d;
						_this.tx = transform.tx;
						_this.ty = transform.ty;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						var norm = _this.a * _this.d - _this.b * _this.c;
						if(norm == 0) {
							_this.a = _this.b = _this.c = _this.d = 0;
							_this.tx = -_this.tx;
							_this.ty = -_this.ty;
						} else {
							norm = 1.0 / norm;
							var a1 = _this.d * norm;
							_this.d = _this.a * norm;
							_this.a = a1;
							_this.b *= -norm;
							_this.c *= -norm;
							var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
							_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
							_this.tx = tx1;
						}
						_this.changedDirty = true;
					} else {
						var _this = backend_Draw._modelViewTransform;
						_this.a = 1;
						_this.b = 0;
						_this.c = 0;
						_this.d = 1;
						_this.tx = 0;
						_this.ty = 0;
						_this.changedDirty = true;
					}
					var tx = backend_Draw._modelViewTransform.tx;
					var ty = backend_Draw._modelViewTransform.ty;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -tx;
					_this.ty += -ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= density;
					_this.b *= density;
					_this.c *= density;
					_this.d *= density;
					_this.tx *= density;
					_this.ty *= density;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += tx;
					_this.ty += ty;
					_this.changedDirty = true;
					if(flipY == -1) {
						var _this = backend_Draw._modelViewTransform;
						_this.tx += -width * 0.5;
						_this.ty += -height * 0.5;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						_this.a *= 1;
						_this.b *= -1;
						_this.c *= 1;
						_this.d *= -1;
						_this.tx *= 1;
						_this.ty *= -1;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						_this.tx += width * 0.5;
						_this.ty += height * 0.5;
						_this.changedDirty = true;
					}
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
					var m = backend_Draw._modelViewMatrix;
					var transform = backend_Draw._modelViewTransform;
					m[0] = transform.a;
					m[4] = transform.c;
					m[8] = 0;
					m[12] = transform.tx;
					m[1] = transform.b;
					m[5] = transform.d;
					m[9] = 0;
					m[13] = transform.ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = 1;
					m[14] = 0;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
					if(renderTarget.clearOnRender) {
						clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
					}
				} else {
					var renderTarget = null;
					if(renderTarget != null) {
						clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
						clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
					} else {
						clay_opengl_GLGraphics.bindFramebuffer(null);
						clay_opengl_GLGraphics.bindRenderbuffer(null);
					}
					var left = 0.0;
					var top = 0.0;
					var right = clay_Clay.app.screenWidth;
					var bottom = clay_Clay.app.screenHeight;
					var near = 1000.0;
					var far = -1000.0;
					var w = right - left;
					var h = top - bottom;
					var p = far - near;
					var tx = (right + left) / w;
					var ty = (top + bottom) / h;
					var tz = (far + near) / p;
					var m = backend_Draw._projectionMatrix;
					m[0] = 2 / w;
					m[4] = 0;
					m[8] = 0;
					m[12] = -tx;
					m[1] = 0;
					m[5] = 2 / h;
					m[9] = 0;
					m[13] = -ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = -2 / p;
					m[14] = -tz;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					var density = clay_Clay.app.screenDensity;
					var width = clay_Clay.app.screenWidth;
					var height = clay_Clay.app.screenHeight;
					var transform = ceramic_App.app.screen.matrix;
					if(transform != null) {
						var _this = backend_Draw._modelViewTransform;
						_this.a = transform.a;
						_this.b = transform.b;
						_this.c = transform.c;
						_this.d = transform.d;
						_this.tx = transform.tx;
						_this.ty = transform.ty;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						var norm = _this.a * _this.d - _this.b * _this.c;
						if(norm == 0) {
							_this.a = _this.b = _this.c = _this.d = 0;
							_this.tx = -_this.tx;
							_this.ty = -_this.ty;
						} else {
							norm = 1.0 / norm;
							var a1 = _this.d * norm;
							_this.d = _this.a * norm;
							_this.a = a1;
							_this.b *= -norm;
							_this.c *= -norm;
							var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
							_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
							_this.tx = tx1;
						}
						_this.changedDirty = true;
					} else {
						var _this = backend_Draw._modelViewTransform;
						_this.a = 1;
						_this.b = 0;
						_this.c = 0;
						_this.d = 1;
						_this.tx = 0;
						_this.ty = 0;
						_this.changedDirty = true;
					}
					var tx = backend_Draw._modelViewTransform.tx;
					var ty = backend_Draw._modelViewTransform.ty;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -tx;
					_this.ty += -ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= density;
					_this.b *= density;
					_this.c *= density;
					_this.d *= density;
					_this.tx *= density;
					_this.ty *= density;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += tx;
					_this.ty += ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
					var m = backend_Draw._modelViewMatrix;
					var transform = backend_Draw._modelViewTransform;
					m[0] = transform.a;
					m[4] = transform.c;
					m[8] = 0;
					m[12] = transform.tx;
					m[1] = transform.b;
					m[5] = transform.d;
					m[9] = 0;
					m[13] = transform.ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = 1;
					m[14] = 0;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
				}
			}
		} else {
			var renderTarget = null;
			if(backend_Draw._currentRenderTarget != renderTarget) {
				backend_Draw._currentRenderTarget = renderTarget;
				if(renderTarget != null) {
					var renderTexture = renderTarget.backendItem;
					var renderTarget1 = renderTexture.renderTarget;
					if(renderTarget1 != null) {
						clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
						clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
					} else {
						clay_opengl_GLGraphics.bindFramebuffer(null);
						clay_opengl_GLGraphics.bindRenderbuffer(null);
					}
					var left = 0.0;
					var top = 0.0;
					var right = renderTarget.width;
					var bottom = renderTarget.height;
					var near = 1000.0;
					var far = -1000.0;
					var w = right - left;
					var h = top - bottom;
					var p = far - near;
					var tx = (right + left) / w;
					var ty = (top + bottom) / h;
					var tz = (far + near) / p;
					var m = backend_Draw._projectionMatrix;
					m[0] = 2 / w;
					m[4] = 0;
					m[8] = 0;
					m[12] = -tx;
					m[1] = 0;
					m[5] = 2 / h;
					m[9] = 0;
					m[13] = -ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = -2 / p;
					m[14] = -tz;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					var _this = backend_Draw._renderTargetTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
					var _this = backend_Draw._renderTargetTransform;
					var x = renderTarget.density;
					var y = renderTarget.density;
					_this.a *= x;
					_this.b *= y;
					_this.c *= x;
					_this.d *= y;
					_this.tx *= x;
					_this.ty *= y;
					_this.changedDirty = true;
					var density = renderTarget.density;
					var width = renderTarget.width;
					var height = renderTarget.height;
					var transform = backend_Draw._renderTargetTransform;
					var flipY = -1;
					if(flipY == null) {
						flipY = 1;
					}
					if(transform != null) {
						var _this = backend_Draw._modelViewTransform;
						_this.a = transform.a;
						_this.b = transform.b;
						_this.c = transform.c;
						_this.d = transform.d;
						_this.tx = transform.tx;
						_this.ty = transform.ty;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						var norm = _this.a * _this.d - _this.b * _this.c;
						if(norm == 0) {
							_this.a = _this.b = _this.c = _this.d = 0;
							_this.tx = -_this.tx;
							_this.ty = -_this.ty;
						} else {
							norm = 1.0 / norm;
							var a1 = _this.d * norm;
							_this.d = _this.a * norm;
							_this.a = a1;
							_this.b *= -norm;
							_this.c *= -norm;
							var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
							_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
							_this.tx = tx1;
						}
						_this.changedDirty = true;
					} else {
						var _this = backend_Draw._modelViewTransform;
						_this.a = 1;
						_this.b = 0;
						_this.c = 0;
						_this.d = 1;
						_this.tx = 0;
						_this.ty = 0;
						_this.changedDirty = true;
					}
					var tx = backend_Draw._modelViewTransform.tx;
					var ty = backend_Draw._modelViewTransform.ty;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -tx;
					_this.ty += -ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= density;
					_this.b *= density;
					_this.c *= density;
					_this.d *= density;
					_this.tx *= density;
					_this.ty *= density;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += tx;
					_this.ty += ty;
					_this.changedDirty = true;
					if(flipY == -1) {
						var _this = backend_Draw._modelViewTransform;
						_this.tx += -width * 0.5;
						_this.ty += -height * 0.5;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						_this.a *= 1;
						_this.b *= -1;
						_this.c *= 1;
						_this.d *= -1;
						_this.tx *= 1;
						_this.ty *= -1;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						_this.tx += width * 0.5;
						_this.ty += height * 0.5;
						_this.changedDirty = true;
					}
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
					var m = backend_Draw._modelViewMatrix;
					var transform = backend_Draw._modelViewTransform;
					m[0] = transform.a;
					m[4] = transform.c;
					m[8] = 0;
					m[12] = transform.tx;
					m[1] = transform.b;
					m[5] = transform.d;
					m[9] = 0;
					m[13] = transform.ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = 1;
					m[14] = 0;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
					if(renderTarget.clearOnRender) {
						clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
					}
				} else {
					var renderTarget = null;
					if(renderTarget != null) {
						clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
						clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
					} else {
						clay_opengl_GLGraphics.bindFramebuffer(null);
						clay_opengl_GLGraphics.bindRenderbuffer(null);
					}
					var left = 0.0;
					var top = 0.0;
					var right = clay_Clay.app.screenWidth;
					var bottom = clay_Clay.app.screenHeight;
					var near = 1000.0;
					var far = -1000.0;
					var w = right - left;
					var h = top - bottom;
					var p = far - near;
					var tx = (right + left) / w;
					var ty = (top + bottom) / h;
					var tz = (far + near) / p;
					var m = backend_Draw._projectionMatrix;
					m[0] = 2 / w;
					m[4] = 0;
					m[8] = 0;
					m[12] = -tx;
					m[1] = 0;
					m[5] = 2 / h;
					m[9] = 0;
					m[13] = -ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = -2 / p;
					m[14] = -tz;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					var density = clay_Clay.app.screenDensity;
					var width = clay_Clay.app.screenWidth;
					var height = clay_Clay.app.screenHeight;
					var transform = ceramic_App.app.screen.matrix;
					if(transform != null) {
						var _this = backend_Draw._modelViewTransform;
						_this.a = transform.a;
						_this.b = transform.b;
						_this.c = transform.c;
						_this.d = transform.d;
						_this.tx = transform.tx;
						_this.ty = transform.ty;
						_this.changedDirty = true;
						var _this = backend_Draw._modelViewTransform;
						var norm = _this.a * _this.d - _this.b * _this.c;
						if(norm == 0) {
							_this.a = _this.b = _this.c = _this.d = 0;
							_this.tx = -_this.tx;
							_this.ty = -_this.ty;
						} else {
							norm = 1.0 / norm;
							var a1 = _this.d * norm;
							_this.d = _this.a * norm;
							_this.a = a1;
							_this.b *= -norm;
							_this.c *= -norm;
							var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
							_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
							_this.tx = tx1;
						}
						_this.changedDirty = true;
					} else {
						var _this = backend_Draw._modelViewTransform;
						_this.a = 1;
						_this.b = 0;
						_this.c = 0;
						_this.d = 1;
						_this.tx = 0;
						_this.ty = 0;
						_this.changedDirty = true;
					}
					var tx = backend_Draw._modelViewTransform.tx;
					var ty = backend_Draw._modelViewTransform.ty;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -tx;
					_this.ty += -ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= density;
					_this.b *= density;
					_this.c *= density;
					_this.d *= density;
					_this.tx *= density;
					_this.ty *= density;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += tx;
					_this.ty += ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
					var m = backend_Draw._modelViewMatrix;
					var transform = backend_Draw._modelViewTransform;
					m[0] = transform.a;
					m[4] = transform.c;
					m[8] = 0;
					m[12] = transform.tx;
					m[1] = transform.b;
					m[5] = transform.d;
					m[9] = 0;
					m[13] = transform.ty;
					m[2] = 0;
					m[6] = 0;
					m[10] = 1;
					m[14] = 0;
					m[3] = 0;
					m[7] = 0;
					m[11] = 0;
					m[15] = 1;
					clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
				}
			}
		}
	}
	,useFirstTextureInBatch: function(draw,texture) {
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		this.usedTextures = 1;
		var textureIndex = texture.backendItem.index;
		this.usedTextureIndexes[0] = textureIndex;
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		this.useTexture(draw,texture,false);
	}
	,useTexture: function(draw,texture,reusing) {
		if(texture != null) {
			this.lastTexture = texture;
			this.lastTextureId = texture.backendItem.textureId;
			this.texWidth = texture.backendItem.width;
			this.texHeight = texture.backendItem.height;
			this.texWidthActual = texture.backendItem.widthActual;
			this.texHeightActual = texture.backendItem.heightActual;
			if(!reusing) {
				var textureId = texture.backendItem.textureId;
				if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
					clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
					clay_opengl_web_GL.gl.bindTexture(3553,textureId);
				}
			}
		} else {
			this.lastTexture = null;
			this.lastTextureId = null;
			var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
			var textureId = backendItem.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
	}
	,canUseTextureInSameBatch: function(draw,texture) {
		var canKeepSameState = false;
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		if(this.usedTextures > 0) {
			if(this.activeShaderCanBatchMultipleTextures) {
				var textureIndex = texture.backendItem.index;
				var _g = 0;
				var _g1 = this.usedTextures;
				while(_g < _g1) {
					var slot = _g++;
					if(textureIndex == this.usedTextureIndexes[slot]) {
						canKeepSameState = true;
						break;
					}
				}
				if(!canKeepSameState && this.usedTextures < this.maxUsableTexturesInBatch) {
					canKeepSameState = true;
				}
			} else if(this.lastTexture == texture) {
				canKeepSameState = true;
			}
		}
		return canKeepSameState;
	}
	,useTextureInSameBatch: function(draw,texture) {
		var alreadyUsed = false;
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		if(this.activeShaderCanBatchMultipleTextures) {
			var textureIndex = texture.backendItem.index;
			var _g = 0;
			var _g1 = this.usedTextures;
			while(_g < _g1) {
				var slot = _g++;
				if(textureIndex == this.usedTextureIndexes[slot]) {
					backend_Draw._activeTextureSlot = slot;
					if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
						clay_opengl_GLGraphics._activeTextureSlot = slot;
						while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
						clay_opengl_web_GL.gl.activeTexture(33984 + slot);
					}
					this.activeTextureSlot = slot;
					this.useTexture(draw,texture,true);
					alreadyUsed = true;
					break;
				}
			}
			if(!alreadyUsed && this.usedTextures < this.maxUsableTexturesInBatch) {
				var slot = this.usedTextures++;
				this.usedTextureIndexes[slot] = textureIndex;
				backend_Draw._activeTextureSlot = slot;
				if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
					clay_opengl_GLGraphics._activeTextureSlot = slot;
					while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
					clay_opengl_web_GL.gl.activeTexture(33984 + slot);
				}
				this.activeTextureSlot = slot;
				this.useTexture(draw,texture,false);
			}
		}
	}
	,unbindUsedTextures: function(draw) {
		while(this.usedTextures > 0) {
			this.usedTextures--;
			var slot = this.usedTextures;
			backend_Draw._activeTextureSlot = slot;
			if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
				clay_opengl_GLGraphics._activeTextureSlot = slot;
				while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
				clay_opengl_web_GL.gl.activeTexture(33984 + slot);
			}
			var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
			var textureId = backendItem.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		this.useTexture(draw,null,false);
	}
	,__class__: ceramic_Renderer
});
var ceramic_ReusableArray = function(length) {
	this._poolIndex = -1;
	this.set_length(length);
};
$hxClasses["ceramic.ReusableArray"] = ceramic_ReusableArray;
ceramic_ReusableArray.__name__ = "ceramic.ReusableArray";
ceramic_ReusableArray.prototype = {
	set_length: function(length) {
		if(this.vector == null) {
			var this1 = new Array(length);
			this.vector = this1;
			this.length = length;
			return length;
		}
		if(length == this.length) {
			return length;
		}
		if(length > this.vector.length) {
			var this1 = new Array(length);
			var newVector = this1;
			var _g = 0;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				newVector[i] = this.vector[i];
				this.vector[i] = null;
			}
			this.vector = newVector;
			var _g = this.length;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		} else {
			var _g = length;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		}
		this.length = length;
		return length;
	}
	,get: function(index) {
		return this.vector[index];
	}
	,set: function(index,value) {
		this.vector[index] = value;
	}
	,__class__: ceramic_ReusableArray
	,__properties__: {set_length:"set_length"}
};
var ceramic_Runner = function() { };
$hxClasses["ceramic.Runner"] = ceramic_Runner;
ceramic_Runner.__name__ = "ceramic.Runner";
ceramic_Runner.currentIsMainThread = function() {
	return true;
};
ceramic_Runner.init = function() {
};
ceramic_Runner.tick = function() {
};
ceramic_Runner.isEmulatingBackgroundWithMain = function() {
	return true;
};
ceramic_Runner.runInMain = function(_fn) {
	ceramic_App.app.onceImmediate(_fn);
};
ceramic_Runner.runInBackground = function(fn) {
	ceramic_App.app.onceImmediate(fn);
};
var ceramic_RuntimeAssets = function(allAssets,path) {
	this.path = null;
	this.cachedLists = null;
	this.cachedNames = new haxe_ds_StringMap();
	this.assetDirsByBaseName = null;
	this.assetsByBaseName = null;
	this.allAssetDirs = null;
	this.allAssets = null;
	this.allAssets = allAssets;
	this.path = path;
	this.initData();
};
$hxClasses["ceramic.RuntimeAssets"] = ceramic_RuntimeAssets;
ceramic_RuntimeAssets.__name__ = "ceramic.RuntimeAssets";
ceramic_RuntimeAssets.fromPath = function(path) {
	return null;
};
ceramic_RuntimeAssets.toAssetConstName = function(input) {
	var res_b = "";
	var len = input.length;
	var i = 0;
	var canAddSpace = false;
	while(i < len) {
		var c = input.charAt(i);
		if(c == "/") {
			res_b += "__";
			canAddSpace = false;
		} else if(c == ".") {
			res_b += "_";
			canAddSpace = false;
		} else if(ceramic_RuntimeAssets.isAsciiChar(c)) {
			var uc = c.toUpperCase();
			var isUpperCase = c == uc;
			if(canAddSpace && isUpperCase) {
				res_b += "_";
				canAddSpace = false;
			}
			res_b += uc == null ? "null" : "" + uc;
			canAddSpace = !isUpperCase;
		} else {
			res_b += "_";
			canAddSpace = false;
		}
		++i;
	}
	var str = res_b;
	if(StringTools.endsWith(str,"_")) {
		str = HxOverrides.substr(str,0,str.length - 1);
	}
	return str;
};
ceramic_RuntimeAssets.isAsciiChar = function(c) {
	var code = HxOverrides.cca(c,0);
	if(!(code >= 48 && code <= 57 || code >= 65 && code <= 90)) {
		if(code >= 97) {
			return code <= 122;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ceramic_RuntimeAssets.prototype = {
	reset: function(allAssets,path) {
		this.allAssets = allAssets;
		this.path = path;
		this.allAssetDirs = null;
		this.assetsByBaseName = null;
		this.assetDirsByBaseName = null;
		this.cachedNames = new haxe_ds_StringMap();
		this.cachedLists = null;
		this.initData();
	}
	,getNames: function(kind,extensions,dir) {
		if(dir == null) {
			dir = false;
		}
		var cacheKey = kind + "|" + (extensions != null ? extensions.join(",") : "") + (dir ? "|1" : "|0");
		var cached = this.cachedNames.h[cacheKey];
		if(cached != null) {
			return cached;
		}
		var entries = [];
		if(extensions == null) {
			extensions = [];
		}
		var extensions1;
		switch(kind) {
		case "database":
			extensions1 = ["csv"];
			break;
		case "font":
			extensions1 = ["fnt"];
			break;
		case "fragments":
			extensions1 = ["fragments"];
			break;
		case "image":
			extensions1 = ["png","jpg","jpeg"];
			break;
		case "shader":
			extensions1 = ["frag","vert"];
			break;
		case "sound":
			extensions1 = ["ogg","wav"];
			break;
		case "text":
			extensions1 = ["txt","json","fnt"];
			break;
		default:
			extensions1 = [];
		}
		extensions = extensions.concat(extensions1);
		if(extensions.length == 0) {
			return entries;
		}
		var used_h = Object.create(null);
		var fileList = dir ? this.allAssetDirs : this.allAssets;
		var _g = 0;
		while(_g < extensions.length) {
			var ext = extensions[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < fileList.length) {
				var name = fileList[_g1];
				++_g1;
				var lowerName = name.toLowerCase();
				var dotIndex = lowerName.lastIndexOf(".");
				var fileExt = null;
				var baseName = null;
				var fieldName = null;
				if(dotIndex != -1) {
					fileExt = HxOverrides.substr(lowerName,dotIndex + 1,null);
					if(fileExt == ext) {
						var truncatedName = HxOverrides.substr(name,0,dotIndex);
						var baseAtIndex = truncatedName.lastIndexOf("@");
						if(baseAtIndex == -1) {
							baseAtIndex = dotIndex;
						}
						baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
						fieldName = ceramic_RuntimeAssets.toAssetConstName(baseName);
						if(fieldName != null && !Object.prototype.hasOwnProperty.call(used_h,fieldName) && fileExt != null) {
							used_h[fieldName] = baseName;
						}
					}
				}
			}
		}
		var byBaseName = dir ? this.assetDirsByBaseName : this.assetsByBaseName;
		var h = used_h;
		var fieldName_h = h;
		var fieldName_keys = Object.keys(h);
		var fieldName_length = fieldName_keys.length;
		var fieldName_current = 0;
		while(fieldName_current < fieldName_length) {
			var fieldName = fieldName_keys[fieldName_current++];
			var value = kind + ":" + used_h[fieldName];
			var fieldDoc = [];
			var files = byBaseName.h[used_h[fieldName]];
			var _g = 0;
			while(_g < files.length) {
				var file = files[_g];
				++_g;
				var _g1 = 0;
				while(_g1 < extensions.length) {
					var ext = extensions[_g1];
					++_g1;
					if(StringTools.endsWith(file,"." + ext)) {
						fieldDoc.push(file);
						break;
					}
				}
			}
			var entry = { name : used_h[fieldName], constName : fieldName, paths : fieldDoc};
			entries.push(entry);
		}
		this.cachedNames.h[cacheKey] = entries;
		return entries;
	}
	,getLists: function() {
		if(this.cachedLists != null) {
			return this.cachedLists;
		}
		var result = { all : [], allDirs : [], allByName : new haxe_ds_StringMap(), allDirsByName : new haxe_ds_StringMap()};
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result.all.push(name);
		}
		var _g = 0;
		var _g1 = this.allAssetDirs;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result.allDirs.push(name);
		}
		var h = this.assetsByBaseName.h;
		var baseName_h = h;
		var baseName_keys = Object.keys(h);
		var baseName_length = baseName_keys.length;
		var baseName_current = 0;
		while(baseName_current < baseName_length) {
			var baseName = baseName_keys[baseName_current++];
			var list = [].concat(this.assetsByBaseName.h[baseName]);
			result.allByName.h[baseName] = list;
		}
		var h = this.assetDirsByBaseName.h;
		var baseName_h = h;
		var baseName_keys = Object.keys(h);
		var baseName_length = baseName_keys.length;
		var baseName_current = 0;
		while(baseName_current < baseName_length) {
			var baseName = baseName_keys[baseName_current++];
			var list = [].concat(this.assetDirsByBaseName.h[baseName]);
			result.allDirsByName.h[baseName] = list;
		}
		this.cachedLists = result;
		return result;
	}
	,getEncodableLists: function() {
		var lists = this.getLists();
		var allByNameEncodable = { };
		var h = lists.allByName.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			allByNameEncodable[key] = lists.allByName.h[key];
		}
		var allDirsByNameEncodable = { };
		var h = lists.allDirsByName.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			allDirsByNameEncodable[key] = lists.allDirsByName.h[key];
		}
		return { all : lists.all, allDirs : lists.allDirs, allByName : allByNameEncodable, allDirsByName : allDirsByNameEncodable};
	}
	,initData: function() {
		var usedPaths_h = Object.create(null);
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			usedPaths_h[asset] = true;
		}
		var usedDirs_h = Object.create(null);
		this.allAssetDirs = [];
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			var lastSlash = asset.lastIndexOf("/");
			if(lastSlash != -1) {
				var dir = HxOverrides.substr(asset,0,lastSlash);
				while(!Object.prototype.hasOwnProperty.call(usedDirs_h,dir)) {
					this.allAssetDirs.push(dir);
					usedDirs_h[dir] = true;
					lastSlash = dir.lastIndexOf("/");
					if(lastSlash == -1) {
						break;
					}
					dir = HxOverrides.substr(dir,0,lastSlash);
				}
			}
		}
		if(this.assetsByBaseName == null) {
			this.assetsByBaseName = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = this.allAssets;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var dotIndex = name.lastIndexOf(".");
				var truncatedName = HxOverrides.substr(name,0,dotIndex);
				var baseAtIndex = truncatedName.lastIndexOf("@");
				if(baseAtIndex == -1) {
					baseAtIndex = dotIndex;
				}
				var baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
				if(!Object.prototype.hasOwnProperty.call(this.assetsByBaseName.h,baseName)) {
					this.assetsByBaseName.h[baseName] = [];
				}
				var list = this.assetsByBaseName.h[baseName];
				list.push(name);
			}
		}
		if(this.assetDirsByBaseName == null) {
			this.assetDirsByBaseName = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = this.allAssetDirs;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var dotIndex = name.lastIndexOf(".");
				var truncatedName = HxOverrides.substr(name,0,dotIndex);
				var baseAtIndex = truncatedName.lastIndexOf("@");
				if(baseAtIndex == -1) {
					baseAtIndex = dotIndex;
				}
				var baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
				if(!Object.prototype.hasOwnProperty.call(this.assetDirsByBaseName.h,baseName)) {
					this.assetDirsByBaseName.h[baseName] = [];
				}
				var list = this.assetDirsByBaseName.h[baseName];
				list.push(name);
			}
		}
	}
	,__class__: ceramic_RuntimeAssets
};
var ceramic_ScanCode = {};
ceramic_ScanCode.$name = function(scanCode) {
	var res = null;
	if(scanCode >= 0 && scanCode < ceramic_ScanCode.scanCodeNames.length) {
		res = ceramic_ScanCode.scanCodeNames[scanCode];
	}
	if(res != null) {
		return res;
	} else {
		return "";
	}
};
ceramic_ScanCode.toString = function(this1) {
	return "ScanCode(" + this1 + " " + ceramic_ScanCode.$name(this1) + ")";
};
var ceramic_System = function() {
	this.lateUpdateOrder = 0;
	this.earlyUpdateOrder = 0;
	this.autoUpdate = true;
	this.name = null;
	ceramic_Entity.call(this);
	ceramic_App.app.systems.addSystem(this);
};
$hxClasses["ceramic.System"] = ceramic_System;
ceramic_System.__name__ = "ceramic.System";
ceramic_System.__super__ = ceramic_Entity;
ceramic_System.prototype = $extend(ceramic_Entity.prototype,{
	emitBeginEarlyUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnBeginEarlyUpdate != null) {
			len += this.__cbOnBeginEarlyUpdate.length;
		}
		if(this.__cbOnceBeginEarlyUpdate != null) {
			len += this.__cbOnceBeginEarlyUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginEarlyUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginEarlyUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginEarlyUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginEarlyUpdate.push(null);
		}
		if(this.__cbOnBeginEarlyUpdate == null) {
			this.__cbOnBeginEarlyUpdate = [];
		}
		this.__cbOnBeginEarlyUpdate.push(handleDelta);
	}
	,onceBeginEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginEarlyUpdate.push(null);
		}
		if(this.__cbOnceBeginEarlyUpdate == null) {
			this.__cbOnceBeginEarlyUpdate = [];
		}
		this.__cbOnceBeginEarlyUpdate.push(handleDelta);
	}
	,offBeginEarlyUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEarlyUpdate != null) {
				index = this.__cbOnBeginEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnBeginEarlyUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEarlyUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEarlyUpdate != null) {
				index = this.__cbOnceBeginEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceBeginEarlyUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEarlyUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEarlyUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = null;
			}
			this.__cbOnBeginEarlyUpdate = null;
			this.__cbOnceBeginEarlyUpdate = null;
		}
	}
	,listensBeginEarlyUpdate: function() {
		if(!(this.__cbOnBeginEarlyUpdate != null && this.__cbOnBeginEarlyUpdate.length > 0)) {
			if(this.__cbOnceBeginEarlyUpdate != null) {
				return this.__cbOnceBeginEarlyUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitEndEarlyUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnEndEarlyUpdate != null) {
			len += this.__cbOnEndEarlyUpdate.length;
		}
		if(this.__cbOnceEndEarlyUpdate != null) {
			len += this.__cbOnceEndEarlyUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnEndEarlyUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceEndEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceEndEarlyUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceEndEarlyUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEndEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindEndEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindEndEarlyUpdate.push(null);
		}
		if(this.__cbOnEndEarlyUpdate == null) {
			this.__cbOnEndEarlyUpdate = [];
		}
		this.__cbOnEndEarlyUpdate.push(handleDelta);
	}
	,onceEndEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndEarlyUpdate.push(null);
		}
		if(this.__cbOnceEndEarlyUpdate == null) {
			this.__cbOnceEndEarlyUpdate = [];
		}
		this.__cbOnceEndEarlyUpdate.push(handleDelta);
	}
	,offEndEarlyUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnEndEarlyUpdate != null) {
				index = this.__cbOnEndEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnEndEarlyUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndEarlyUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceEndEarlyUpdate != null) {
				index = this.__cbOnceEndEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceEndEarlyUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndEarlyUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndEarlyUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndEarlyUpdate = null;
			}
			this.__cbOnEndEarlyUpdate = null;
			this.__cbOnceEndEarlyUpdate = null;
		}
	}
	,listensEndEarlyUpdate: function() {
		if(!(this.__cbOnEndEarlyUpdate != null && this.__cbOnEndEarlyUpdate.length > 0)) {
			if(this.__cbOnceEndEarlyUpdate != null) {
				return this.__cbOnceEndEarlyUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBeginLateUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnBeginLateUpdate != null) {
			len += this.__cbOnBeginLateUpdate.length;
		}
		if(this.__cbOnceBeginLateUpdate != null) {
			len += this.__cbOnceBeginLateUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBeginLateUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBeginLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBeginLateUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBeginLateUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginLateUpdate.push(null);
		}
		if(this.__cbOnBeginLateUpdate == null) {
			this.__cbOnBeginLateUpdate = [];
		}
		this.__cbOnBeginLateUpdate.push(handleDelta);
	}
	,onceBeginLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnceOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnceOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginLateUpdate.push(null);
		}
		if(this.__cbOnceBeginLateUpdate == null) {
			this.__cbOnceBeginLateUpdate = [];
		}
		this.__cbOnceBeginLateUpdate.push(handleDelta);
	}
	,offBeginLateUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginLateUpdate != null) {
				index = this.__cbOnBeginLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnBeginLateUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginLateUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceBeginLateUpdate != null) {
				index = this.__cbOnceBeginLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceBeginLateUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginLateUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginLateUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginLateUpdate = null;
			}
			this.__cbOnBeginLateUpdate = null;
			this.__cbOnceBeginLateUpdate = null;
		}
	}
	,listensBeginLateUpdate: function() {
		if(!(this.__cbOnBeginLateUpdate != null && this.__cbOnBeginLateUpdate.length > 0)) {
			if(this.__cbOnceBeginLateUpdate != null) {
				return this.__cbOnceBeginLateUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitEndLateUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnEndLateUpdate != null) {
			len += this.__cbOnEndLateUpdate.length;
		}
		if(this.__cbOnceEndLateUpdate != null) {
			len += this.__cbOnceEndLateUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnEndLateUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceEndLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceEndLateUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindEndLateUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceEndLateUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEndLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndLateUpdate == null) {
				this.__cbOnOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnOwnerUnbindEndLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndLateUpdate == null) {
				this.__cbOnOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnOwnerUnbindEndLateUpdate.push(null);
		}
		if(this.__cbOnEndLateUpdate == null) {
			this.__cbOnEndLateUpdate = [];
		}
		this.__cbOnEndLateUpdate.push(handleDelta);
	}
	,onceEndLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndLateUpdate == null) {
				this.__cbOnceOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndLateUpdate == null) {
				this.__cbOnceOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndLateUpdate.push(null);
		}
		if(this.__cbOnceEndLateUpdate == null) {
			this.__cbOnceEndLateUpdate = [];
		}
		this.__cbOnceEndLateUpdate.push(handleDelta);
	}
	,offEndLateUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnEndLateUpdate != null) {
				index = this.__cbOnEndLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnEndLateUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndLateUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceEndLateUpdate != null) {
				index = this.__cbOnceEndLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceEndLateUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndLateUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndLateUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndLateUpdate = null;
			}
			this.__cbOnEndLateUpdate = null;
			this.__cbOnceEndLateUpdate = null;
		}
	}
	,listensEndLateUpdate: function() {
		if(!(this.__cbOnEndLateUpdate != null && this.__cbOnEndLateUpdate.length > 0)) {
			if(this.__cbOnceEndLateUpdate != null) {
				return this.__cbOnceEndLateUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_earlyUpdateOrder: function(earlyUpdateOrder) {
		if(this.earlyUpdateOrder != earlyUpdateOrder) {
			this.earlyUpdateOrder = earlyUpdateOrder;
			ceramic_App.app.systems.earlyUpdateOrderDirty = true;
		}
		return earlyUpdateOrder;
	}
	,set_lateUpdateOrder: function(lateUpdateOrder) {
		if(this.lateUpdateOrder != lateUpdateOrder) {
			this.lateUpdateOrder = lateUpdateOrder;
			ceramic_App.app.systems.lateUpdateOrderDirty = true;
		}
		return lateUpdateOrder;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		ceramic_App.app.systems.removeSystem(this);
	}
	,earlyUpdate: function(delta) {
	}
	,lateUpdate: function(delta) {
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offBeginEarlyUpdate();
		this.offEndEarlyUpdate();
		this.offBeginLateUpdate();
		this.offEndLateUpdate();
	}
	,__class__: ceramic_System
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_lateUpdateOrder:"set_lateUpdateOrder",set_earlyUpdateOrder:"set_earlyUpdateOrder"})
});
var ceramic_SceneSystem = function() {
	this.currentScene = null;
	this._updatingScenes = [];
	this.scenes = [];
	ceramic_System.call(this);
	this.set_lateUpdateOrder(5000);
};
$hxClasses["ceramic.SceneSystem"] = ceramic_SceneSystem;
ceramic_SceneSystem.__name__ = "ceramic.SceneSystem";
ceramic_SceneSystem.__properties__ = {set_shared:"set_shared",get_shared:"get_shared"};
ceramic_SceneSystem.get_shared = function() {
	if(ceramic_SceneSystem.lazyShared) {
		ceramic_SceneSystem.lazyShared = false;
		ceramic_SceneSystem.shared = new ceramic_SceneSystem();
	}
	return ceramic_SceneSystem.shared;
};
ceramic_SceneSystem.set_shared = function(shared_) {
	return ceramic_SceneSystem.shared = shared_;
};
ceramic_SceneSystem.__super__ = ceramic_System;
ceramic_SceneSystem.prototype = $extend(ceramic_System.prototype,{
	setCurrentScene: function(scene,keepAssets) {
		if(keepAssets == null) {
			keepAssets = false;
		}
		if(this.currentScene != scene) {
			var prevScene = this.currentScene;
			if(scene == null) {
				this.currentScene = null;
				prevScene.destroy();
			} else {
				var prevAssets = null;
				if(prevScene != null) {
					if(keepAssets) {
						prevAssets = prevScene._assets;
						prevScene._assets = null;
					}
					this.currentScene = null;
					prevScene.destroy();
				}
				scene._assets = prevAssets;
				scene.bindToScreenSize();
				scene._boot();
			}
		}
	}
	,lateUpdate: function(delta) {
		var len = this.scenes.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._updatingScenes[i] = this.scenes[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var scene = this._updatingScenes[i];
			if(!scene.paused && scene.autoUpdate && scene.didCreate) {
				scene.update(delta);
			}
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._updatingScenes[i] = null;
		}
	}
	,__class__: ceramic_SceneSystem
});
var ceramic_Screen = function() {
	this.hitVisuals = [];
	this.matchedOverListeners = new haxe_ds_IntMap();
	this.matchedDownListeners = new haxe_ds_IntMap();
	this.maxTouchIndex = -1;
	this.prevMouseY = 0;
	this.prevMouseX = 0;
	this.prevTouchPositions = new haxe_ds_IntMap();
	this.pressedTouches = new haxe_ds_IntMap();
	this.pressedMouseButtons = new haxe_ds_IntMap();
	this._numPointerDown = 0;
	this.resizing = false;
	this.reverseMatrix = new ceramic_Transform();
	this.matrix = new ceramic_Transform();
	this.unobservedTexturesDensity = 1.0;
	this.texturesDensityAutoruns = null;
	this.focusedVisual = null;
	this.touches = new ceramic_IntMap(8,0.5,false);
	this.mouseWheelDeltaY = 0;
	this.mouseWheelDeltaX = 0;
	this.mouseDeltaY = 0;
	this.mouseDeltaX = 0;
	this.mouseY = 0;
	this.mouseX = 0;
	this.pointerDeltaY = 0;
	this.pointerDeltaX = 0;
	this.pointerY = 0;
	this.pointerX = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.actualHeight = 0;
	this.actualWidth = 0;
	this.height = 0;
	this.width = 0;
	this.density = 1.0;
	this.observedDirty = false;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Screen"] = ceramic_Screen;
ceramic_Screen.__name__ = "ceramic.Screen";
ceramic_Screen.__interfaces__ = [tracker_Observable];
ceramic_Screen.__super__ = ceramic_Entity;
ceramic_Screen.prototype = $extend(ceramic_Entity.prototype,{
	emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnObservedDirty[ii];
					++i;
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceObservedDirty = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_nativeWidth: function() {
		return clay_Clay.app.screenWidth;
	}
	,get_nativeHeight: function() {
		return clay_Clay.app.screenHeight;
	}
	,get_nativeDensity: function() {
		return clay_Clay.app.screenDensity;
	}
	,set_focusedVisual: function(focusedVisual) {
		if(this.focusedVisual == focusedVisual) {
			return focusedVisual;
		}
		var prevFocused = this.focusedVisual;
		this.focusedVisual = focusedVisual;
		if(prevFocused != null) {
			this.emitBlur(prevFocused);
			prevFocused.emitBlur();
		}
		if(focusedVisual != null) {
			this.emitFocus(focusedVisual);
			focusedVisual.emitFocus();
		}
		return focusedVisual;
	}
	,get_texturesDensity: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.texturesDensityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.texturesDensityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTexturesDensity;
	}
	,set_texturesDensity: function(texturesDensity) {
		var prevValue = this.unobservedTexturesDensity;
		this.unobservedTexturesDensity = texturesDensity;
		if(prevValue == texturesDensity) {
			return texturesDensity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTexturesDensityChange(texturesDensity,prevValue);
		var fieldAutoruns = this.texturesDensityAutoruns;
		if(fieldAutoruns != null) {
			this.texturesDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return texturesDensity;
	}
	,invalidateTexturesDensity: function() {
		var value = this.unobservedTexturesDensity;
		this.emitTexturesDensityChange(value,value);
		var fieldAutoruns = this.texturesDensityAutoruns;
		if(fieldAutoruns != null) {
			this.texturesDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTexturesDensityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTexturesDensityChange != null) {
			len += this.__cbOnTexturesDensityChange.length;
		}
		if(this.__cbOnceTexturesDensityChange != null) {
			len += this.__cbOnceTexturesDensityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTexturesDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTexturesDensityChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTexturesDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTexturesDensityChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTexturesDensityChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTexturesDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "texturesDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTexturesDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnOwnerUnbindTexturesDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnOwnerUnbindTexturesDensityChange.push(null);
		}
		if(this.__cbOnTexturesDensityChange == null) {
			this.__cbOnTexturesDensityChange = [];
		}
		this.__cbOnTexturesDensityChange.push(handleCurrentPrevious);
	}
	,onceTexturesDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "texturesDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTexturesDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnceOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTexturesDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnceOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTexturesDensityChange.push(null);
		}
		if(this.__cbOnceTexturesDensityChange == null) {
			this.__cbOnceTexturesDensityChange = [];
		}
		this.__cbOnceTexturesDensityChange.push(handleCurrentPrevious);
	}
	,offTexturesDensityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTexturesDensityChange != null) {
				index = this.__cbOnTexturesDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTexturesDensityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTexturesDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTexturesDensityChange.splice(index,1);
				}
			}
			if(this.__cbOnceTexturesDensityChange != null) {
				index = this.__cbOnceTexturesDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTexturesDensityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTexturesDensityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTexturesDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTexturesDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTexturesDensityChange = null;
			}
			if(this.__cbOnceOwnerUnbindTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTexturesDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTexturesDensityChange = null;
			}
			this.__cbOnTexturesDensityChange = null;
			this.__cbOnceTexturesDensityChange = null;
		}
	}
	,listensTexturesDensityChange: function() {
		if(!(this.__cbOnTexturesDensityChange != null && this.__cbOnTexturesDensityChange.length > 0)) {
			if(this.__cbOnceTexturesDensityChange != null) {
				return this.__cbOnceTexturesDensityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_isPointerDown: function() {
		return this._numPointerDown > 0;
	}
	,emitResize: function() {
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnResize[ii];
					++i;
				}
			}
			if(this.__cbOnceResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceResize[ii];
					var unbind = this.__cbOnceOwnerUnbindResize[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceResize = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handle);
	}
	,onceResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handle);
	}
	,offResize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseDown: function(buttonId,x,y) {
		this.willEmitMouseDown(buttonId,x,y);
		var len = 0;
		if(this.__cbOnMouseDown != null) {
			len += this.__cbOnMouseDown.length;
		}
		if(this.__cbOnceMouseDown != null) {
			len += this.__cbOnceMouseDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseDown[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseDown[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var matched = this.matchFirstDownListener(x,y,-1,buttonId);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(-1,buttonId,x,y,true));
			}
		}
		var id = 10000 + buttonId;
		this.matchedDownListeners.h[id] = matched;
	}
	,onMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnMouseDown == null) {
			this.__cbOnMouseDown = [];
		}
		this.__cbOnMouseDown.push(handleButtonIdXY);
	}
	,onceMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnceMouseDown == null) {
			this.__cbOnceMouseDown = [];
		}
		this.__cbOnceMouseDown.push(handleButtonIdXY);
	}
	,offMouseDown: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseDown != null) {
				index = this.__cbOnMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseDown.splice(index,1);
				}
			}
			if(this.__cbOnceMouseDown != null) {
				index = this.__cbOnceMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseDown = null;
			}
			if(this.__cbOnceOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = null;
			}
			this.__cbOnMouseDown = null;
			this.__cbOnceMouseDown = null;
		}
	}
	,listensMouseDown: function() {
		if(!(this.__cbOnMouseDown != null && this.__cbOnMouseDown.length > 0)) {
			if(this.__cbOnceMouseDown != null) {
				return this.__cbOnceMouseDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseUp: function(buttonId,x,y) {
		this.willEmitMouseUp(buttonId,x,y);
		var len = 0;
		if(this.__cbOnMouseUp != null) {
			len += this.__cbOnMouseUp.length;
		}
		if(this.__cbOnceMouseUp != null) {
			len += this.__cbOnceMouseUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseUp[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseUp[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var id = 10000 + buttonId;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(-1,buttonId,x,y,matched.hits(x,y)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,onMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnMouseUp == null) {
			this.__cbOnMouseUp = [];
		}
		this.__cbOnMouseUp.push(handleButtonIdXY);
	}
	,onceMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnceMouseUp == null) {
			this.__cbOnceMouseUp = [];
		}
		this.__cbOnceMouseUp.push(handleButtonIdXY);
	}
	,offMouseUp: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseUp != null) {
				index = this.__cbOnMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseUp.splice(index,1);
				}
			}
			if(this.__cbOnceMouseUp != null) {
				index = this.__cbOnceMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseUp = null;
			}
			if(this.__cbOnceOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = null;
			}
			this.__cbOnMouseUp = null;
			this.__cbOnceMouseUp = null;
		}
	}
	,listensMouseUp: function() {
		if(!(this.__cbOnMouseUp != null && this.__cbOnMouseUp.length > 0)) {
			if(this.__cbOnceMouseUp != null) {
				return this.__cbOnceMouseUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseWheel: function(x,y) {
		this.willEmitMouseWheel(x,y);
		var len = 0;
		if(this.__cbOnMouseWheel != null) {
			len += this.__cbOnMouseWheel.length;
		}
		if(this.__cbOnceMouseWheel != null) {
			len += this.__cbOnceMouseWheel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseWheel[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseWheel[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseWheel = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnMouseWheel == null) {
			this.__cbOnMouseWheel = [];
		}
		this.__cbOnMouseWheel.push(handleXY);
	}
	,onceMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnceMouseWheel == null) {
			this.__cbOnceMouseWheel = [];
		}
		this.__cbOnceMouseWheel.push(handleXY);
	}
	,offMouseWheel: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseWheel != null) {
				index = this.__cbOnMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseWheel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseWheel.splice(index,1);
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				index = this.__cbOnceMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseWheel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseWheel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseWheel = null;
			}
			if(this.__cbOnceOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = null;
			}
			this.__cbOnMouseWheel = null;
			this.__cbOnceMouseWheel = null;
		}
	}
	,listensMouseWheel: function() {
		if(!(this.__cbOnMouseWheel != null && this.__cbOnMouseWheel.length > 0)) {
			if(this.__cbOnceMouseWheel != null) {
				return this.__cbOnceMouseWheel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMouseMove: function(x,y) {
		this.willEmitMouseMove(x,y);
		var len = 0;
		if(this.__cbOnMouseMove != null) {
			len += this.__cbOnMouseMove.length;
		}
		if(this.__cbOnceMouseMove != null) {
			len += this.__cbOnceMouseMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMouseMove[ii];
					++i;
				}
			}
			if(this.__cbOnceMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMouseMove[ii];
					var unbind = this.__cbOnceOwnerUnbindMouseMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMouseMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnMouseMove == null) {
			this.__cbOnMouseMove = [];
		}
		this.__cbOnMouseMove.push(handleXY);
	}
	,onceMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnceMouseMove == null) {
			this.__cbOnceMouseMove = [];
		}
		this.__cbOnceMouseMove.push(handleXY);
	}
	,offMouseMove: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseMove != null) {
				index = this.__cbOnMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseMove.splice(index,1);
				}
			}
			if(this.__cbOnceMouseMove != null) {
				index = this.__cbOnceMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseMove = null;
			}
			if(this.__cbOnceOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = null;
			}
			this.__cbOnMouseMove = null;
			this.__cbOnceMouseMove = null;
		}
	}
	,listensMouseMove: function() {
		if(!(this.__cbOnMouseMove != null && this.__cbOnMouseMove.length > 0)) {
			if(this.__cbOnceMouseMove != null) {
				return this.__cbOnceMouseMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchDown: function(touchIndex,x,y) {
		this.willEmitTouchDown(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchDown != null) {
			len += this.__cbOnTouchDown.length;
		}
		if(this.__cbOnceTouchDown != null) {
			len += this.__cbOnceTouchDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchDown[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchDown[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var matched = this.matchFirstDownListener(x,y,touchIndex,-1);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(touchIndex,-1,x,y,true));
			}
		}
		var id = 20000 + touchIndex;
		this.matchedDownListeners.h[id] = matched;
	}
	,onTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnTouchDown == null) {
			this.__cbOnTouchDown = [];
		}
		this.__cbOnTouchDown.push(handleTouchIndexXY);
	}
	,onceTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnceTouchDown == null) {
			this.__cbOnceTouchDown = [];
		}
		this.__cbOnceTouchDown.push(handleTouchIndexXY);
	}
	,offTouchDown: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchDown != null) {
				index = this.__cbOnTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchDown.splice(index,1);
				}
			}
			if(this.__cbOnceTouchDown != null) {
				index = this.__cbOnceTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchDown = null;
			}
			if(this.__cbOnceOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = null;
			}
			this.__cbOnTouchDown = null;
			this.__cbOnceTouchDown = null;
		}
	}
	,listensTouchDown: function() {
		if(!(this.__cbOnTouchDown != null && this.__cbOnTouchDown.length > 0)) {
			if(this.__cbOnceTouchDown != null) {
				return this.__cbOnceTouchDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchUp: function(touchIndex,x,y) {
		this.willEmitTouchUp(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchUp != null) {
			len += this.__cbOnTouchUp.length;
		}
		if(this.__cbOnceTouchUp != null) {
			len += this.__cbOnceTouchUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchUp[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchUp[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var id = 20000 + touchIndex;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(touchIndex,-1,x,y,matched.hits(x,y)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,onTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnTouchUp == null) {
			this.__cbOnTouchUp = [];
		}
		this.__cbOnTouchUp.push(handleTouchIndexXY);
	}
	,onceTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnceTouchUp == null) {
			this.__cbOnceTouchUp = [];
		}
		this.__cbOnceTouchUp.push(handleTouchIndexXY);
	}
	,offTouchUp: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchUp != null) {
				index = this.__cbOnTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchUp.splice(index,1);
				}
			}
			if(this.__cbOnceTouchUp != null) {
				index = this.__cbOnceTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchUp = null;
			}
			if(this.__cbOnceOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = null;
			}
			this.__cbOnTouchUp = null;
			this.__cbOnceTouchUp = null;
		}
	}
	,listensTouchUp: function() {
		if(!(this.__cbOnTouchUp != null && this.__cbOnTouchUp.length > 0)) {
			if(this.__cbOnceTouchUp != null) {
				return this.__cbOnceTouchUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitTouchMove: function(touchIndex,x,y) {
		this.willEmitTouchMove(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchMove != null) {
			len += this.__cbOnTouchMove.length;
		}
		if(this.__cbOnceTouchMove != null) {
			len += this.__cbOnceTouchMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTouchMove[ii];
					++i;
				}
			}
			if(this.__cbOnceTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTouchMove[ii];
					var unbind = this.__cbOnceOwnerUnbindTouchMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTouchMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnTouchMove == null) {
			this.__cbOnTouchMove = [];
		}
		this.__cbOnTouchMove.push(handleTouchIndexXY);
	}
	,onceTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnceTouchMove == null) {
			this.__cbOnceTouchMove = [];
		}
		this.__cbOnceTouchMove.push(handleTouchIndexXY);
	}
	,offTouchMove: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchMove != null) {
				index = this.__cbOnTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchMove.splice(index,1);
				}
			}
			if(this.__cbOnceTouchMove != null) {
				index = this.__cbOnceTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchMove = null;
			}
			if(this.__cbOnceOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = null;
			}
			this.__cbOnTouchMove = null;
			this.__cbOnceTouchMove = null;
		}
	}
	,listensTouchMove: function() {
		if(!(this.__cbOnTouchMove != null && this.__cbOnTouchMove.length > 0)) {
			if(this.__cbOnceTouchMove != null) {
				return this.__cbOnceTouchMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnPointerDown != null) {
			len += this.__cbOnPointerDown.length;
		}
		if(this.__cbOncePointerDown != null) {
			len += this.__cbOncePointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerDown[ii];
					++i;
				}
			}
			if(this.__cbOncePointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerDown[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOnPointerDown == null) {
			this.__cbOnPointerDown = [];
		}
		this.__cbOnPointerDown.push(handleInfo);
	}
	,oncePointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOncePointerDown == null) {
			this.__cbOncePointerDown = [];
		}
		this.__cbOncePointerDown.push(handleInfo);
	}
	,offPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerDown != null) {
				index = this.__cbOnPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerDown.splice(index,1);
				}
			}
			if(this.__cbOncePointerDown != null) {
				index = this.__cbOncePointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = null;
			}
			this.__cbOnPointerDown = null;
			this.__cbOncePointerDown = null;
		}
	}
	,listensPointerDown: function() {
		if(!(this.__cbOnPointerDown != null && this.__cbOnPointerDown.length > 0)) {
			if(this.__cbOncePointerDown != null) {
				return this.__cbOncePointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnPointerUp != null) {
			len += this.__cbOnPointerUp.length;
		}
		if(this.__cbOncePointerUp != null) {
			len += this.__cbOncePointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerUp[ii];
					++i;
				}
			}
			if(this.__cbOncePointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerUp[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOnPointerUp == null) {
			this.__cbOnPointerUp = [];
		}
		this.__cbOnPointerUp.push(handleInfo);
	}
	,oncePointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOncePointerUp == null) {
			this.__cbOncePointerUp = [];
		}
		this.__cbOncePointerUp.push(handleInfo);
	}
	,offPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerUp != null) {
				index = this.__cbOnPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerUp.splice(index,1);
				}
			}
			if(this.__cbOncePointerUp != null) {
				index = this.__cbOncePointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = null;
			}
			this.__cbOnPointerUp = null;
			this.__cbOncePointerUp = null;
		}
	}
	,listensPointerUp: function() {
		if(!(this.__cbOnPointerUp != null && this.__cbOnPointerUp.length > 0)) {
			if(this.__cbOncePointerUp != null) {
				return this.__cbOncePointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitPointerMove: function(info) {
		var len = 0;
		if(this.__cbOnPointerMove != null) {
			len += this.__cbOnPointerMove.length;
		}
		if(this.__cbOncePointerMove != null) {
			len += this.__cbOncePointerMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnPointerMove[ii];
					++i;
				}
			}
			if(this.__cbOncePointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOncePointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOncePointerMove[ii];
					var unbind = this.__cbOnceOwnerUnbindPointerMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOncePointerMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerMove == null) {
				this.__cbOnOwnerUnbindPointerMove = [];
			}
			this.__cbOnOwnerUnbindPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerMove == null) {
				this.__cbOnOwnerUnbindPointerMove = [];
			}
			this.__cbOnOwnerUnbindPointerMove.push(null);
		}
		if(this.__cbOnPointerMove == null) {
			this.__cbOnPointerMove = [];
		}
		this.__cbOnPointerMove.push(handleInfo);
	}
	,oncePointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerMove == null) {
				this.__cbOnceOwnerUnbindPointerMove = [];
			}
			this.__cbOnceOwnerUnbindPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerMove == null) {
				this.__cbOnceOwnerUnbindPointerMove = [];
			}
			this.__cbOnceOwnerUnbindPointerMove.push(null);
		}
		if(this.__cbOncePointerMove == null) {
			this.__cbOncePointerMove = [];
		}
		this.__cbOncePointerMove.push(handleInfo);
	}
	,offPointerMove: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerMove != null) {
				index = this.__cbOnPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerMove.splice(index,1);
				}
			}
			if(this.__cbOncePointerMove != null) {
				index = this.__cbOncePointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerMove = null;
			}
			if(this.__cbOnceOwnerUnbindPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerMove = null;
			}
			this.__cbOnPointerMove = null;
			this.__cbOncePointerMove = null;
		}
	}
	,listensPointerMove: function() {
		if(!(this.__cbOnPointerMove != null && this.__cbOnPointerMove.length > 0)) {
			if(this.__cbOncePointerMove != null) {
				return this.__cbOncePointerMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMultiTouchPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerDown != null) {
			len += this.__cbOnMultiTouchPointerDown.length;
		}
		if(this.__cbOnceMultiTouchPointerDown != null) {
			len += this.__cbOnceMultiTouchPointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMultiTouchPointerDown[ii];
					++i;
				}
			}
			if(this.__cbOnceMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMultiTouchPointerDown[ii];
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMultiTouchPointerDown = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerDown.push(null);
		}
		if(this.__cbOnMultiTouchPointerDown == null) {
			this.__cbOnMultiTouchPointerDown = [];
		}
		this.__cbOnMultiTouchPointerDown.push(handleInfo);
	}
	,onceMultiTouchPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerDown.push(null);
		}
		if(this.__cbOnceMultiTouchPointerDown == null) {
			this.__cbOnceMultiTouchPointerDown = [];
		}
		this.__cbOnceMultiTouchPointerDown.push(handleInfo);
	}
	,offMultiTouchPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerDown != null) {
				index = this.__cbOnMultiTouchPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerDown.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerDown != null) {
				index = this.__cbOnceMultiTouchPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = null;
			}
			this.__cbOnMultiTouchPointerDown = null;
			this.__cbOnceMultiTouchPointerDown = null;
		}
	}
	,listensMultiTouchPointerDown: function() {
		if(!(this.__cbOnMultiTouchPointerDown != null && this.__cbOnMultiTouchPointerDown.length > 0)) {
			if(this.__cbOnceMultiTouchPointerDown != null) {
				return this.__cbOnceMultiTouchPointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMultiTouchPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerUp != null) {
			len += this.__cbOnMultiTouchPointerUp.length;
		}
		if(this.__cbOnceMultiTouchPointerUp != null) {
			len += this.__cbOnceMultiTouchPointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMultiTouchPointerUp[ii];
					++i;
				}
			}
			if(this.__cbOnceMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMultiTouchPointerUp[ii];
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMultiTouchPointerUp = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerUp.push(null);
		}
		if(this.__cbOnMultiTouchPointerUp == null) {
			this.__cbOnMultiTouchPointerUp = [];
		}
		this.__cbOnMultiTouchPointerUp.push(handleInfo);
	}
	,onceMultiTouchPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerUp.push(null);
		}
		if(this.__cbOnceMultiTouchPointerUp == null) {
			this.__cbOnceMultiTouchPointerUp = [];
		}
		this.__cbOnceMultiTouchPointerUp.push(handleInfo);
	}
	,offMultiTouchPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerUp != null) {
				index = this.__cbOnMultiTouchPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerUp.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerUp != null) {
				index = this.__cbOnceMultiTouchPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = null;
			}
			this.__cbOnMultiTouchPointerUp = null;
			this.__cbOnceMultiTouchPointerUp = null;
		}
	}
	,listensMultiTouchPointerUp: function() {
		if(!(this.__cbOnMultiTouchPointerUp != null && this.__cbOnMultiTouchPointerUp.length > 0)) {
			if(this.__cbOnceMultiTouchPointerUp != null) {
				return this.__cbOnceMultiTouchPointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitMultiTouchPointerMove: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerMove != null) {
			len += this.__cbOnMultiTouchPointerMove.length;
		}
		if(this.__cbOnceMultiTouchPointerMove != null) {
			len += this.__cbOnceMultiTouchPointerMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMultiTouchPointerMove[ii];
					++i;
				}
			}
			if(this.__cbOnceMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMultiTouchPointerMove[ii];
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMultiTouchPointerMove = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerMove.push(null);
		}
		if(this.__cbOnMultiTouchPointerMove == null) {
			this.__cbOnMultiTouchPointerMove = [];
		}
		this.__cbOnMultiTouchPointerMove.push(handleInfo);
	}
	,onceMultiTouchPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerMove.push(null);
		}
		if(this.__cbOnceMultiTouchPointerMove == null) {
			this.__cbOnceMultiTouchPointerMove = [];
		}
		this.__cbOnceMultiTouchPointerMove.push(handleInfo);
	}
	,offMultiTouchPointerMove: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerMove != null) {
				index = this.__cbOnMultiTouchPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerMove.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerMove != null) {
				index = this.__cbOnceMultiTouchPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerMove = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = null;
			}
			this.__cbOnMultiTouchPointerMove = null;
			this.__cbOnceMultiTouchPointerMove = null;
		}
	}
	,listensMultiTouchPointerMove: function() {
		if(!(this.__cbOnMultiTouchPointerMove != null && this.__cbOnMultiTouchPointerMove.length > 0)) {
			if(this.__cbOnceMultiTouchPointerMove != null) {
				return this.__cbOnceMultiTouchPointerMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitFocus: function(visual) {
		var len = 0;
		if(this.__cbOnFocus != null) {
			len += this.__cbOnFocus.length;
		}
		if(this.__cbOnceFocus != null) {
			len += this.__cbOnceFocus.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFocus[ii];
					++i;
				}
			}
			if(this.__cbOnceFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFocus[ii];
					var unbind = this.__cbOnceOwnerUnbindFocus[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFocus = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(visual);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFocus: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offFocus(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnFocus == null) {
			this.__cbOnFocus = [];
		}
		this.__cbOnFocus.push(handleVisual);
	}
	,onceFocus: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offFocus(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnceFocus == null) {
			this.__cbOnceFocus = [];
		}
		this.__cbOnceFocus.push(handleVisual);
	}
	,offFocus: function(handleVisual) {
		if(handleVisual != null) {
			var index;
			var unbind;
			if(this.__cbOnFocus != null) {
				index = this.__cbOnFocus.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnFocus.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFocus.splice(index,1);
				}
			}
			if(this.__cbOnceFocus != null) {
				index = this.__cbOnceFocus.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnceFocus.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFocus.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFocus = null;
			}
			if(this.__cbOnceOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFocus = null;
			}
			this.__cbOnFocus = null;
			this.__cbOnceFocus = null;
		}
	}
	,listensFocus: function() {
		if(!(this.__cbOnFocus != null && this.__cbOnFocus.length > 0)) {
			if(this.__cbOnceFocus != null) {
				return this.__cbOnceFocus.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBlur: function(visual) {
		var len = 0;
		if(this.__cbOnBlur != null) {
			len += this.__cbOnBlur.length;
		}
		if(this.__cbOnceBlur != null) {
			len += this.__cbOnceBlur.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBlur[ii];
					++i;
				}
			}
			if(this.__cbOnceBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBlur[ii];
					var unbind = this.__cbOnceOwnerUnbindBlur[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBlur = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(visual);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBlur: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offBlur(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnBlur == null) {
			this.__cbOnBlur = [];
		}
		this.__cbOnBlur.push(handleVisual);
	}
	,onceBlur: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offBlur(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnceBlur == null) {
			this.__cbOnceBlur = [];
		}
		this.__cbOnceBlur.push(handleVisual);
	}
	,offBlur: function(handleVisual) {
		if(handleVisual != null) {
			var index;
			var unbind;
			if(this.__cbOnBlur != null) {
				index = this.__cbOnBlur.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnBlur.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBlur.splice(index,1);
				}
			}
			if(this.__cbOnceBlur != null) {
				index = this.__cbOnceBlur.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnceBlur.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBlur.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBlur = null;
			}
			if(this.__cbOnceOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBlur = null;
			}
			this.__cbOnBlur = null;
			this.__cbOnceBlur = null;
		}
	}
	,listensBlur: function() {
		if(!(this.__cbOnBlur != null && this.__cbOnBlur.length > 0)) {
			if(this.__cbOnceBlur != null) {
				return this.__cbOnceBlur.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,backendReady: function() {
		var _gthis = this;
		ceramic_App.app.backend.screen.onResize(this,$bind(this,this.resize));
		this.resize();
		ceramic_App.app.settings.onBackgroundChange(this,function(background,prevBackground) {
			ceramic_App.app.backend.screen.setBackground(background);
		});
		ceramic_App.app.settings.onTitleChange(this,function(title,prevTitle) {
			ceramic_App.app.backend.screen.setWindowTitle(title);
		});
		ceramic_App.app.settings.onFullscreenChange(this,function(fullscreen,prevFullscreen) {
			ceramic_App.app.backend.screen.setWindowFullscreen(fullscreen);
		});
		ceramic_App.app.settings.onScalingChange(this,function(scaling,prevScaling) {
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetWidthChange(this,function(targetWidth,prevTargetWidth) {
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetHeightChange(this,function(targetHeight,prevTargetWidth) {
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetDensityChange(this,function(targetDensity,prevTargetDensity) {
			_gthis.updateTexturesDensity();
		});
		this.matrix.onChange(this,function() {
			var _this = _gthis.reverseMatrix;
			_this.a = 1;
			_this.b = 0;
			_this.c = 0;
			_this.d = 1;
			_this.tx = 0;
			_this.ty = 0;
			_this.changedDirty = true;
			var _this = _gthis.reverseMatrix;
			var m = _gthis.matrix;
			var a1 = _this.a * m.a + _this.b * m.c;
			_this.b = _this.a * m.b + _this.b * m.d;
			_this.a = a1;
			var c1 = _this.c * m.a + _this.d * m.c;
			_this.d = _this.c * m.b + _this.d * m.d;
			_this.c = c1;
			var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
			_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
			_this.tx = tx1;
			_this.changedDirty = true;
			var _this = _gthis.reverseMatrix;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
			_gthis.reverseMatrix.emitChange();
		});
		ceramic_App.app.backend.screen.onMouseDown(this,function(buttonId,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,buttonId,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitMouseDown(buttonId,x1,y1);
				_gthis._numPointerDown++;
				_gthis.emitMultiTouchPointerDown(info);
				if(_gthis._numPointerDown == 1) {
					_gthis.emitPointerDown(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onMouseUp(this,function(buttonId,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,buttonId,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				if(info.touchIndex != -1) {
					_gthis.touches.set(info.touchIndex,null);
				}
				_gthis.emitMouseUp(buttonId,x1,y1);
				_gthis._numPointerDown--;
				_gthis.emitMultiTouchPointerUp(info);
				if(_gthis._numPointerDown == 0) {
					_gthis.emitPointerUp(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onMouseMove(this,function(x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,0,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitMouseMove(x1,y1);
				_gthis.emitMultiTouchPointerMove(info);
				_gthis.emitPointerMove(info);
			});
		});
		ceramic_App.app.backend.screen.onMouseWheel(this,function(x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				_gthis.emitMouseWheel(x,y);
			});
		});
		ceramic_App.app.backend.screen.onTouchDown(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitTouchDown(touchIndex,x1,y1);
				_gthis._numPointerDown++;
				_gthis.emitMultiTouchPointerDown(info);
				if(_gthis._numPointerDown == 1) {
					_gthis.emitPointerDown(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onTouchUp(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				if(info.touchIndex != -1) {
					_gthis.touches.set(info.touchIndex,null);
				}
				_gthis.emitTouchUp(touchIndex,x1,y1);
				_gthis._numPointerDown--;
				_gthis.emitMultiTouchPointerUp(info);
				if(_gthis._numPointerDown == 0) {
					_gthis.emitPointerUp(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onTouchMove(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g = 0;
				var _g1 = _gthis.touches.values.length;
				while(_g < _g1) {
					var i = _g++;
					var pointer = _gthis.touches.values[i];
					if(pointer == null) {
						continue;
					}
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitTouchMove(touchIndex,x1,y1);
				_gthis.emitMultiTouchPointerMove(info);
				if(_gthis._numPointerDown > 0) {
					_gthis.emitPointerMove(info);
				}
			});
		});
	}
	,updatePointerOverState: function(delta) {
		var x = this.mouseX;
		var y = this.mouseY;
		var id = 10000;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
		var numTouches = this.touches.values.length;
		if(numTouches > 0) {
			var _g = 0;
			var _g1 = numTouches;
			while(_g < _g1) {
				var i = _g++;
				var touch = this.touches.get(i);
				if(touch == null) {
					continue;
				}
				var x = touch.x;
				var y = touch.y;
				var id = 20000 + touch.index;
				var prevMatched = this.matchedOverListeners.h[id];
				var matched = this.matchFirstOverListener(x,y);
				if(matched != prevMatched) {
					if(matched != null) {
						this.matchedOverListeners.h[id] = matched;
					} else {
						this.matchedOverListeners.remove(id);
					}
				}
				if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
					prevMatched._numPointerOver--;
					if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
						prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
					}
				}
				if(matched != null && prevMatched != matched) {
					matched._numPointerOver++;
					if(matched._numPointerOver == 1 || matched.multiTouch) {
						matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
					}
				}
			}
		}
	}
	,resize: function() {
		if(this.resizing) {
			return;
		}
		this.resizing = true;
		this.updateScaling();
		var prevScaling = ceramic_App.app.settings.get_scaling();
		var prevTargetWidth = ceramic_App.app.settings.get_targetWidth();
		var prevTargetHeight = ceramic_App.app.settings.get_targetHeight();
		this.emitResize();
		if(prevScaling != ceramic_App.app.settings.get_scaling() || prevTargetWidth != ceramic_App.app.settings.get_targetWidth() || prevTargetHeight != ceramic_App.app.settings.get_targetHeight()) {
			this.updateScaling();
		}
		this.updateTransform();
		this.updateTexturesDensity();
		this.resizing = false;
	}
	,updateTexturesDensity: function() {
		if(ceramic_App.app.settings.get_targetDensity() > 0) {
			this.set_texturesDensity(ceramic_App.app.settings.get_targetDensity());
		} else {
			var texturesDensity = this.density;
			if(texturesDensity < 1) {
				texturesDensity = 1;
			} else {
				texturesDensity = Math.round(texturesDensity);
			}
			this.set_texturesDensity(texturesDensity);
		}
	}
	,updateScaling: function() {
		var targetWidth = ceramic_App.app.settings.get_targetWidth() > 0 ? ceramic_App.app.settings.get_targetWidth() : clay_Clay.app.screenWidth;
		var targetHeight = ceramic_App.app.settings.get_targetHeight() > 0 ? ceramic_App.app.settings.get_targetHeight() : clay_Clay.app.screenHeight;
		var scale;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 0:
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 1:
			scale = Math.min(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 2:
			targetWidth = clay_Clay.app.screenWidth;
			targetHeight = clay_Clay.app.screenHeight;
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 3:
			var nativeRatio = clay_Clay.app.screenHeight / clay_Clay.app.screenWidth;
			var targetRatio = targetHeight / targetWidth;
			if(nativeRatio > targetRatio) {
				targetHeight = targetWidth * nativeRatio;
			} else if(nativeRatio < targetRatio) {
				targetWidth = targetHeight / nativeRatio;
			}
			targetWidth = Math.ceil(targetWidth);
			targetHeight = Math.ceil(targetHeight);
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		}
		this.actualWidth = Math.ceil(clay_Clay.app.screenWidth * clay_Clay.app.screenDensity * scale);
		this.actualHeight = Math.ceil(clay_Clay.app.screenHeight * clay_Clay.app.screenDensity * scale);
		this.density = 1.0 / scale;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 0:case 1:
			this.offsetX = (this.actualWidth - targetWidth) * 0.5;
			this.offsetY = (this.actualHeight - targetHeight) * 0.5;
			break;
		case 2:case 3:
			this.offsetX = 0;
			this.offsetY = 0;
			break;
		}
		this.width = targetWidth;
		this.height = targetHeight;
	}
	,updateTransform: function() {
		var targetWidth = ceramic_App.app.settings.get_targetWidth() > 0 ? ceramic_App.app.settings.get_targetWidth() * this.density : clay_Clay.app.screenWidth * clay_Clay.app.screenDensity;
		var targetHeight = ceramic_App.app.settings.get_targetHeight() > 0 ? ceramic_App.app.settings.get_targetHeight() * this.density : clay_Clay.app.screenHeight * clay_Clay.app.screenDensity;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 2:
			targetWidth = clay_Clay.app.screenWidth * clay_Clay.app.screenDensity;
			targetHeight = clay_Clay.app.screenHeight * clay_Clay.app.screenDensity;
			break;
		case 3:
			var nativeRatio = clay_Clay.app.screenHeight / clay_Clay.app.screenWidth;
			var targetRatio = targetHeight / targetWidth;
			if(nativeRatio > targetRatio) {
				targetHeight = targetWidth * nativeRatio;
			} else if(nativeRatio < targetRatio) {
				targetWidth = targetHeight / nativeRatio;
			}
			break;
		default:
		}
		var _this = this.matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		var _this = this.matrix;
		var x = this.density;
		var y = this.density;
		_this.a *= x;
		_this.b *= y;
		_this.c *= x;
		_this.d *= y;
		_this.tx *= x;
		_this.ty *= y;
		_this.changedDirty = true;
		var tx = (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity - targetWidth) * 0.5;
		var ty = (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity - targetHeight) * 0.5;
		var _this = this.matrix;
		_this.tx += tx;
		_this.ty += ty;
		_this.changedDirty = true;
	}
	,matchFirstDownListener: function(x,y,touchIndex,buttonId) {
		if(buttonId == null) {
			buttonId = -1;
		}
		if(touchIndex == null) {
			touchIndex = -1;
		}
		var _this = ceramic_App.app;
		if(_this.hierarchyDirty) {
			var _g = 0;
			var _g1 = _this.visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = _this.visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.parent == null) {
						visual.computedDepth = visual.depth * 2000000;
						if(visual.children != null) {
							visual.computeChildrenDepth();
						}
					}
				}
			}
			_this.hierarchyDirty = false;
		}
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			ceramic_Screen.matchedHitVisual = null;
			var testHitVisuals = i == 0;
			var visuals = ceramic_App.app.visuals;
			var i1 = visuals.length - 1;
			while(i1 >= 0) {
				var visual = visuals[i1];
				if(visual._lifecycleState >= 0 && visual.computedTouchable) {
					var visualListensPointerDown = visual.__cbOnPointerDown != null && visual.__cbOnPointerDown.length > 0 || visual.__cbOncePointerDown != null && visual.__cbOncePointerDown.length > 0;
					var visualHits = false;
					var visualIntercepts = false;
					if(visualListensPointerDown) {
						visualHits = visual.hits(x,y);
						if(visualHits) {
							visualIntercepts = visual.interceptPointerDown(visual,x,y,touchIndex,buttonId);
						}
					}
					if(visualHits && !visualIntercepts || testHitVisuals && this.isHitVisual(visual) && visual.hits(x,y)) {
						var intercepts = false;
						if(visualListensPointerDown) {
							var parent = visual.parent;
							while(parent != null) {
								intercepts = parent.interceptPointerDown(visual,x,y,touchIndex,buttonId);
								if(intercepts) {
									break;
								}
								parent = parent.parent;
							}
						}
						if(!intercepts) {
							if(!visualListensPointerDown && testHitVisuals && this.isHitVisual(visual)) {
								ceramic_Screen.matchedHitVisual = visual;
							} else {
								ceramic_Screen.matchedHitVisual = null;
								return visual;
							}
						}
					}
				}
				--i1;
			}
		}
		ceramic_Screen.matchedHitVisual = null;
		return null;
	}
	,matchFirstOverListener: function(x,y) {
		var _this = ceramic_App.app;
		if(_this.hierarchyDirty) {
			var _g = 0;
			var _g1 = _this.visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = _this.visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.parent == null) {
						visual.computedDepth = visual.depth * 2000000;
						if(visual.children != null) {
							visual.computeChildrenDepth();
						}
					}
				}
			}
			_this.hierarchyDirty = false;
		}
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			ceramic_Screen.matchedHitVisual = null;
			var testHitVisuals = i == 0;
			var visuals = ceramic_App.app.visuals;
			var i1 = visuals.length - 1;
			while(i1 >= 0) {
				var visual = visuals[i1];
				if(visual._lifecycleState >= 0 && visual.computedTouchable) {
					var visualListensPointerOver = visual.__cbOnPointerOver != null && visual.__cbOnPointerOver.length > 0 || visual.__cbOncePointerOver != null && visual.__cbOncePointerOver.length > 0;
					var visualHits = false;
					var visualIntercepts = false;
					if(visualListensPointerOver) {
						visualHits = visual.hits(x,y);
						if(visualHits) {
							visualIntercepts = visual.interceptPointerOver(visual,x,y);
						}
					}
					if(visualHits && !visualIntercepts || testHitVisuals && this.isHitVisual(visual) && visual.hits(x,y)) {
						var intercepts = false;
						if(visualListensPointerOver) {
							var parent = visual.parent;
							while(parent != null) {
								intercepts = parent.interceptPointerOver(visual,x,y);
								if(intercepts) {
									break;
								}
								parent = parent.parent;
							}
						}
						if(!intercepts) {
							if(!visualListensPointerOver && testHitVisuals && this.isHitVisual(visual)) {
								ceramic_Screen.matchedHitVisual = visual;
							} else {
								ceramic_Screen.matchedHitVisual = null;
								return visual;
							}
						}
					}
				}
				--i1;
			}
		}
		ceramic_Screen.matchedHitVisual = null;
		return null;
	}
	,prepareMultiTouchPointerDown: function(info) {
		if(info.buttonId != -1) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g = 0;
		var _g1 = this.touches.values.length;
		while(_g < _g1) {
			var i = _g++;
			var pointer = this.touches.values[i];
			if(pointer == null) {
				continue;
			}
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,prepareMultiTouchPointerUp: function(info) {
		if(info.buttonId != -1) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g = 0;
		var _g1 = this.touches.values.length;
		while(_g < _g1) {
			var i = _g++;
			var pointer = this.touches.values[i];
			if(pointer == null) {
				continue;
			}
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
		if(info.touchIndex != -1) {
			this.touches.set(info.touchIndex,null);
		}
	}
	,prepareMultiTouchPointerMove: function(info) {
		if(info.buttonId != -1) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g = 0;
		var _g1 = this.touches.values.length;
		while(_g < _g1) {
			var i = _g++;
			var pointer = this.touches.values[i];
			if(pointer == null) {
				continue;
			}
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,updatePointer: function() {
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g = 0;
		var _g1 = this.touches.values.length;
		while(_g < _g1) {
			var i = _g++;
			var pointer = this.touches.values[i];
			if(pointer == null) {
				continue;
			}
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,didEmitMouseDown: function(buttonId,x,y) {
		var matched = this.matchFirstDownListener(x,y,-1,buttonId);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(-1,buttonId,x,y,true));
			}
		}
		var id = 10000 + buttonId;
		this.matchedDownListeners.h[id] = matched;
	}
	,didEmitMouseUp: function(buttonId,x,y) {
		var id = 10000 + buttonId;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(-1,buttonId,x,y,matched.hits(x,y)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,updateMouseOver: function(x,y) {
		var id = 10000;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
	}
	,didEmitTouchDown: function(touchIndex,x,y) {
		var matched = this.matchFirstDownListener(x,y,touchIndex,-1);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(touchIndex,-1,x,y,true));
			}
		}
		var id = 20000 + touchIndex;
		this.matchedDownListeners.h[id] = matched;
	}
	,didEmitTouchUp: function(touchIndex,x,y) {
		var id = 20000 + touchIndex;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(touchIndex,-1,x,y,matched.hits(x,y)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,updateTouchOver: function(touchIndex,x,y) {
		var id = 20000 + touchIndex;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
	}
	,addHitVisual: function(visual) {
		var wasHitVisual = this.isHitVisual(visual);
		this.hitVisuals.push(visual);
		if(!wasHitVisual) {
			visual.flags = visual.flags | 8;
		}
	}
	,removeHitVisual: function(visual) {
		var index = this.hitVisuals.indexOf(visual);
		if(index == -1) {
			ceramic_App.app.logger.warning("Hit visual not removed from hitVisuals because it was not added at the first place",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Screen.hx", lineNumber : 1068, className : "ceramic.Screen", methodName : "removeHitVisual"});
		} else {
			this.hitVisuals.splice(index,1);
			if(this.hitVisuals.indexOf(visual) == -1) {
				visual.flags = visual.flags & -9;
			}
		}
	}
	,isHitVisual: function(visual) {
		var value = null;
		if(value != null) {
			visual.flags = value ? visual.flags | 8 : visual.flags & -9;
			return value;
		} else {
			var mask = 8;
			return (visual.flags & mask) == mask;
		}
	}
	,resetDeltas: function() {
		this.pointerDeltaX = 0;
		this.pointerDeltaY = 0;
		this.mouseDeltaX = 0;
		this.mouseDeltaY = 0;
		this.mouseWheelDeltaX = 0;
		this.mouseWheelDeltaY = 0;
		var i = 0;
		while(i <= this.maxTouchIndex) {
			var touch = this.touches.get(i);
			if(touch != null) {
				touch.deltaX = 0;
				touch.deltaY = 0;
			}
			++i;
		}
	}
	,willEmitMouseMove: function(x,y) {
		this.mouseDeltaX += x - this.prevMouseX;
		this.mouseDeltaY += y - this.prevMouseY;
		this.prevMouseX = x;
		this.prevMouseY = y;
	}
	,willEmitMouseDown: function(buttonId,x,y) {
		var _gthis = this;
		this.prevMouseX = x;
		this.prevMouseY = y;
		var value = this.pressedMouseButtons.h[buttonId | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		var value = prevValue + 1;
		this.pressedMouseButtons.h[buttonId | 0] = value;
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedMouseButtons.h[buttonId | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedMouseButtons.h[buttonId | 0] = 2;
				}
			});
		}
	}
	,willEmitMouseUp: function(buttonId,x,y) {
		var _gthis = this;
		this.pressedMouseButtons.h[buttonId | 0] = -1;
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedMouseButtons.h[buttonId | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedMouseButtons.h[buttonId | 0] = 0;
			}
		});
	}
	,willEmitMouseWheel: function(x,y) {
		this.mouseWheelDeltaX += x;
		this.mouseWheelDeltaY += y;
	}
	,mousePressed: function(buttonId) {
		var value = this.pressedMouseButtons.h[buttonId | 0];
		return (value != null ? value : 0) > 0;
	}
	,mouseJustPressed: function(buttonId) {
		var value = this.pressedMouseButtons.h[buttonId | 0];
		return (value != null ? value : 0) == 1;
	}
	,mouseJustReleased: function(buttonId) {
		var value = this.pressedMouseButtons.h[buttonId | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitTouchMove: function(touchIndex,x,y) {
		if(touchIndex > this.maxTouchIndex) {
			this.maxTouchIndex = touchIndex;
		}
		var keyX = touchIndex * 2;
		var keyY = keyX + 1;
		var prevX = this.prevTouchPositions.h[keyX | 0];
		var prevY = this.prevTouchPositions.h[keyY | 0];
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			touch.deltaX += x - prevX;
			touch.deltaY += y - prevY;
		}
	}
	,willEmitTouchDown: function(touchIndex,x,y) {
		var _gthis = this;
		var keyX = touchIndex * 2;
		var keyY = keyX + 1;
		this.prevTouchPositions.h[keyX | 0] = x;
		this.prevTouchPositions.h[keyY | 0] = y;
		var value = this.pressedTouches.h[touchIndex | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		var value = prevValue + 1;
		this.pressedTouches.h[touchIndex | 0] = value;
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedTouches.h[touchIndex | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedTouches.h[touchIndex | 0] = 2;
				}
			});
		}
	}
	,willEmitTouchUp: function(touchIndex,x,y) {
		var _gthis = this;
		this.pressedTouches.h[touchIndex | 0] = -1;
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedTouches.h[touchIndex | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedTouches.h[touchIndex | 0] = 0;
			}
		});
	}
	,touchPressed: function(touchIndex) {
		var value = this.pressedTouches.h[touchIndex | 0];
		return (value != null ? value : 0) > 0;
	}
	,touchJustPressed: function(touchIndex) {
		var value = this.pressedTouches.h[touchIndex | 0];
		return (value != null ? value : 0) == 1;
	}
	,touchJustReleased: function(touchIndex) {
		var value = this.pressedTouches.h[touchIndex | 0];
		return (value != null ? value : 0) == -1;
	}
	,touchDeltaX: function(touchIndex) {
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			return touch.deltaX;
		} else {
			return 0.0;
		}
	}
	,touchDeltaY: function(touchIndex) {
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			return touch.deltaY;
		} else {
			return 0.0;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offTexturesDensityChange();
		this.offResize();
		this.offMouseDown();
		this.offMouseUp();
		this.offMouseWheel();
		this.offMouseMove();
		this.offTouchDown();
		this.offTouchUp();
		this.offTouchMove();
		this.offPointerDown();
		this.offPointerUp();
		this.offPointerMove();
		this.offMultiTouchPointerDown();
		this.offMultiTouchPointerUp();
		this.offMultiTouchPointerMove();
		this.offFocus();
		this.offBlur();
	}
	,__class__: ceramic_Screen
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_isPointerDown:"get_isPointerDown",set_texturesDensity:"set_texturesDensity",get_texturesDensity:"get_texturesDensity",set_focusedVisual:"set_focusedVisual",get_nativeDensity:"get_nativeDensity",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth"})
});
var ceramic_ScreenScaling = $hxEnums["ceramic.ScreenScaling"] = { __ename__:"ceramic.ScreenScaling",__constructs__:null
	,FIT: {_hx_name:"FIT",_hx_index:0,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,FILL: {_hx_name:"FILL",_hx_index:1,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,RESIZE: {_hx_name:"RESIZE",_hx_index:2,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,FIT_RESIZE: {_hx_name:"FIT_RESIZE",_hx_index:3,__enum__:"ceramic.ScreenScaling",toString:$estr}
};
ceramic_ScreenScaling.__constructs__ = [ceramic_ScreenScaling.FIT,ceramic_ScreenScaling.FILL,ceramic_ScreenScaling.RESIZE,ceramic_ScreenScaling.FIT_RESIZE];
var ceramic_Settings = function() {
	this.defaultShader = "shader:textured";
	this.defaultFont = "font:RobotoMedium";
	this.backend = { };
	this.assetsPath = "assets";
	this.resizable = false;
	this.antialiasing = 0;
	this.appInfo = null;
	this.collections = null;
	this.orientation = 0;
	this.unobservedMaxDelta = 0.1;
	this.maxDeltaAutoruns = null;
	this.unobservedFullscreen = false;
	this.fullscreenAutoruns = null;
	this.unobservedTitle = "App";
	this.titleAutoruns = null;
	this.unobservedScaling = ceramic_ScreenScaling.FIT;
	this.scalingAutoruns = null;
	this.unobservedBackground = 0;
	this.backgroundAutoruns = null;
	this.unobservedTargetDensity = 0;
	this.targetDensityAutoruns = null;
	this.unobservedWindowHeight = 0;
	this.windowHeightAutoruns = null;
	this.unobservedWindowWidth = 0;
	this.windowWidthAutoruns = null;
	this.unobservedTargetHeight = 0;
	this.targetHeightAutoruns = null;
	this.unobservedTargetWidth = 0;
	this.targetWidthAutoruns = null;
	this.observedDirty = false;
};
$hxClasses["ceramic.Settings"] = ceramic_Settings;
ceramic_Settings.__name__ = "ceramic.Settings";
ceramic_Settings.__interfaces__ = [tracker_Observable];
ceramic_Settings.prototype = {
	emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnObservedDirty[ii];
					++i;
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceObservedDirty = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_targetWidth: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTargetWidth;
	}
	,set_targetWidth: function(targetWidth) {
		var prevValue = this.unobservedTargetWidth;
		this.unobservedTargetWidth = targetWidth;
		if(prevValue == targetWidth) {
			return targetWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetWidthChange(targetWidth,prevValue);
		var fieldAutoruns = this.targetWidthAutoruns;
		if(fieldAutoruns != null) {
			this.targetWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetWidth;
	}
	,invalidateTargetWidth: function() {
		var value = this.unobservedTargetWidth;
		this.emitTargetWidthChange(value,value);
		var fieldAutoruns = this.targetWidthAutoruns;
		if(fieldAutoruns != null) {
			this.targetWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTargetWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetWidthChange != null) {
			len += this.__cbOnTargetWidthChange.length;
		}
		if(this.__cbOnceTargetWidthChange != null) {
			len += this.__cbOnceTargetWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTargetWidthChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTargetWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTargetWidthChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTargetWidthChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTargetWidthChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetWidthChange == null) {
				this.__cbOnOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnOwnerUnbindTargetWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetWidthChange == null) {
				this.__cbOnOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnOwnerUnbindTargetWidthChange.push(null);
		}
		if(this.__cbOnTargetWidthChange == null) {
			this.__cbOnTargetWidthChange = [];
		}
		this.__cbOnTargetWidthChange.push(handleCurrentPrevious);
	}
	,onceTargetWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetWidthChange == null) {
				this.__cbOnceOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTargetWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetWidthChange == null) {
				this.__cbOnceOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTargetWidthChange.push(null);
		}
		if(this.__cbOnceTargetWidthChange == null) {
			this.__cbOnceTargetWidthChange = [];
		}
		this.__cbOnceTargetWidthChange.push(handleCurrentPrevious);
	}
	,offTargetWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetWidthChange != null) {
				index = this.__cbOnTargetWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetWidthChange != null) {
				index = this.__cbOnceTargetWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetWidthChange = null;
			}
			this.__cbOnTargetWidthChange = null;
			this.__cbOnceTargetWidthChange = null;
		}
	}
	,listensTargetWidthChange: function() {
		if(!(this.__cbOnTargetWidthChange != null && this.__cbOnTargetWidthChange.length > 0)) {
			if(this.__cbOnceTargetWidthChange != null) {
				return this.__cbOnceTargetWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_targetHeight: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTargetHeight;
	}
	,set_targetHeight: function(targetHeight) {
		var prevValue = this.unobservedTargetHeight;
		this.unobservedTargetHeight = targetHeight;
		if(prevValue == targetHeight) {
			return targetHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetHeightChange(targetHeight,prevValue);
		var fieldAutoruns = this.targetHeightAutoruns;
		if(fieldAutoruns != null) {
			this.targetHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetHeight;
	}
	,invalidateTargetHeight: function() {
		var value = this.unobservedTargetHeight;
		this.emitTargetHeightChange(value,value);
		var fieldAutoruns = this.targetHeightAutoruns;
		if(fieldAutoruns != null) {
			this.targetHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTargetHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetHeightChange != null) {
			len += this.__cbOnTargetHeightChange.length;
		}
		if(this.__cbOnceTargetHeightChange != null) {
			len += this.__cbOnceTargetHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTargetHeightChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTargetHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTargetHeightChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTargetHeightChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTargetHeightChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetHeightChange == null) {
				this.__cbOnOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnOwnerUnbindTargetHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetHeightChange == null) {
				this.__cbOnOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnOwnerUnbindTargetHeightChange.push(null);
		}
		if(this.__cbOnTargetHeightChange == null) {
			this.__cbOnTargetHeightChange = [];
		}
		this.__cbOnTargetHeightChange.push(handleCurrentPrevious);
	}
	,onceTargetHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetHeightChange == null) {
				this.__cbOnceOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTargetHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetHeightChange == null) {
				this.__cbOnceOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTargetHeightChange.push(null);
		}
		if(this.__cbOnceTargetHeightChange == null) {
			this.__cbOnceTargetHeightChange = [];
		}
		this.__cbOnceTargetHeightChange.push(handleCurrentPrevious);
	}
	,offTargetHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetHeightChange != null) {
				index = this.__cbOnTargetHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetHeightChange != null) {
				index = this.__cbOnceTargetHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetHeightChange = null;
			}
			this.__cbOnTargetHeightChange = null;
			this.__cbOnceTargetHeightChange = null;
		}
	}
	,listensTargetHeightChange: function() {
		if(!(this.__cbOnTargetHeightChange != null && this.__cbOnTargetHeightChange.length > 0)) {
			if(this.__cbOnceTargetHeightChange != null) {
				return this.__cbOnceTargetHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_windowWidth: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.windowWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.windowWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedWindowWidth;
	}
	,set_windowWidth: function(windowWidth) {
		var prevValue = this.unobservedWindowWidth;
		this.unobservedWindowWidth = windowWidth;
		if(prevValue == windowWidth) {
			return windowWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitWindowWidthChange(windowWidth,prevValue);
		var fieldAutoruns = this.windowWidthAutoruns;
		if(fieldAutoruns != null) {
			this.windowWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return windowWidth;
	}
	,invalidateWindowWidth: function() {
		var value = this.unobservedWindowWidth;
		this.emitWindowWidthChange(value,value);
		var fieldAutoruns = this.windowWidthAutoruns;
		if(fieldAutoruns != null) {
			this.windowWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitWindowWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWindowWidthChange != null) {
			len += this.__cbOnWindowWidthChange.length;
		}
		if(this.__cbOnceWindowWidthChange != null) {
			len += this.__cbOnceWindowWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWindowWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnWindowWidthChange[ii];
					++i;
				}
			}
			if(this.__cbOnceWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceWindowWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceWindowWidthChange[ii];
					var unbind = this.__cbOnceOwnerUnbindWindowWidthChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceWindowWidthChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWindowWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWindowWidthChange == null) {
				this.__cbOnOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnOwnerUnbindWindowWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWindowWidthChange == null) {
				this.__cbOnOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnOwnerUnbindWindowWidthChange.push(null);
		}
		if(this.__cbOnWindowWidthChange == null) {
			this.__cbOnWindowWidthChange = [];
		}
		this.__cbOnWindowWidthChange.push(handleCurrentPrevious);
	}
	,onceWindowWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWindowWidthChange == null) {
				this.__cbOnceOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWindowWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWindowWidthChange == null) {
				this.__cbOnceOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWindowWidthChange.push(null);
		}
		if(this.__cbOnceWindowWidthChange == null) {
			this.__cbOnceWindowWidthChange = [];
		}
		this.__cbOnceWindowWidthChange.push(handleCurrentPrevious);
	}
	,offWindowWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWindowWidthChange != null) {
				index = this.__cbOnWindowWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWindowWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWindowWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWindowWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceWindowWidthChange != null) {
				index = this.__cbOnceWindowWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWindowWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWindowWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWindowWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWindowWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWindowWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWindowWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWindowWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWindowWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWindowWidthChange = null;
			}
			this.__cbOnWindowWidthChange = null;
			this.__cbOnceWindowWidthChange = null;
		}
	}
	,listensWindowWidthChange: function() {
		if(!(this.__cbOnWindowWidthChange != null && this.__cbOnWindowWidthChange.length > 0)) {
			if(this.__cbOnceWindowWidthChange != null) {
				return this.__cbOnceWindowWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_windowHeight: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.windowHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.windowHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedWindowHeight;
	}
	,set_windowHeight: function(windowHeight) {
		var prevValue = this.unobservedWindowHeight;
		this.unobservedWindowHeight = windowHeight;
		if(prevValue == windowHeight) {
			return windowHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitWindowHeightChange(windowHeight,prevValue);
		var fieldAutoruns = this.windowHeightAutoruns;
		if(fieldAutoruns != null) {
			this.windowHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return windowHeight;
	}
	,invalidateWindowHeight: function() {
		var value = this.unobservedWindowHeight;
		this.emitWindowHeightChange(value,value);
		var fieldAutoruns = this.windowHeightAutoruns;
		if(fieldAutoruns != null) {
			this.windowHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitWindowHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWindowHeightChange != null) {
			len += this.__cbOnWindowHeightChange.length;
		}
		if(this.__cbOnceWindowHeightChange != null) {
			len += this.__cbOnceWindowHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWindowHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnWindowHeightChange[ii];
					++i;
				}
			}
			if(this.__cbOnceWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceWindowHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceWindowHeightChange[ii];
					var unbind = this.__cbOnceOwnerUnbindWindowHeightChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceWindowHeightChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWindowHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWindowHeightChange == null) {
				this.__cbOnOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnOwnerUnbindWindowHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWindowHeightChange == null) {
				this.__cbOnOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnOwnerUnbindWindowHeightChange.push(null);
		}
		if(this.__cbOnWindowHeightChange == null) {
			this.__cbOnWindowHeightChange = [];
		}
		this.__cbOnWindowHeightChange.push(handleCurrentPrevious);
	}
	,onceWindowHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWindowHeightChange == null) {
				this.__cbOnceOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnceOwnerUnbindWindowHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWindowHeightChange == null) {
				this.__cbOnceOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnceOwnerUnbindWindowHeightChange.push(null);
		}
		if(this.__cbOnceWindowHeightChange == null) {
			this.__cbOnceWindowHeightChange = [];
		}
		this.__cbOnceWindowHeightChange.push(handleCurrentPrevious);
	}
	,offWindowHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWindowHeightChange != null) {
				index = this.__cbOnWindowHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWindowHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWindowHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWindowHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceWindowHeightChange != null) {
				index = this.__cbOnceWindowHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWindowHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWindowHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWindowHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWindowHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWindowHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWindowHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWindowHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWindowHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWindowHeightChange = null;
			}
			this.__cbOnWindowHeightChange = null;
			this.__cbOnceWindowHeightChange = null;
		}
	}
	,listensWindowHeightChange: function() {
		if(!(this.__cbOnWindowHeightChange != null && this.__cbOnWindowHeightChange.length > 0)) {
			if(this.__cbOnceWindowHeightChange != null) {
				return this.__cbOnceWindowHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_targetDensity: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetDensityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetDensityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTargetDensity;
	}
	,set_targetDensity: function(targetDensity) {
		var prevValue = this.unobservedTargetDensity;
		this.unobservedTargetDensity = targetDensity;
		if(prevValue == targetDensity) {
			return targetDensity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetDensityChange(targetDensity,prevValue);
		var fieldAutoruns = this.targetDensityAutoruns;
		if(fieldAutoruns != null) {
			this.targetDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetDensity;
	}
	,invalidateTargetDensity: function() {
		var value = this.unobservedTargetDensity;
		this.emitTargetDensityChange(value,value);
		var fieldAutoruns = this.targetDensityAutoruns;
		if(fieldAutoruns != null) {
			this.targetDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTargetDensityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetDensityChange != null) {
			len += this.__cbOnTargetDensityChange.length;
		}
		if(this.__cbOnceTargetDensityChange != null) {
			len += this.__cbOnceTargetDensityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTargetDensityChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTargetDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTargetDensityChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTargetDensityChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTargetDensityChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetDensityChange == null) {
				this.__cbOnOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnOwnerUnbindTargetDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetDensityChange == null) {
				this.__cbOnOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnOwnerUnbindTargetDensityChange.push(null);
		}
		if(this.__cbOnTargetDensityChange == null) {
			this.__cbOnTargetDensityChange = [];
		}
		this.__cbOnTargetDensityChange.push(handleCurrentPrevious);
	}
	,onceTargetDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetDensityChange == null) {
				this.__cbOnceOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTargetDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetDensityChange == null) {
				this.__cbOnceOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTargetDensityChange.push(null);
		}
		if(this.__cbOnceTargetDensityChange == null) {
			this.__cbOnceTargetDensityChange = [];
		}
		this.__cbOnceTargetDensityChange.push(handleCurrentPrevious);
	}
	,offTargetDensityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetDensityChange != null) {
				index = this.__cbOnTargetDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetDensityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetDensityChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetDensityChange != null) {
				index = this.__cbOnceTargetDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetDensityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetDensityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetDensityChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetDensityChange = null;
			}
			this.__cbOnTargetDensityChange = null;
			this.__cbOnceTargetDensityChange = null;
		}
	}
	,listensTargetDensityChange: function() {
		if(!(this.__cbOnTargetDensityChange != null && this.__cbOnTargetDensityChange.length > 0)) {
			if(this.__cbOnceTargetDensityChange != null) {
				return this.__cbOnceTargetDensityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_background: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.backgroundAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.backgroundAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedBackground;
	}
	,set_background: function(background) {
		var prevValue = this.unobservedBackground;
		this.unobservedBackground = background;
		if(prevValue == background) {
			return background;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitBackgroundChange(background,prevValue);
		var fieldAutoruns = this.backgroundAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return background;
	}
	,invalidateBackground: function() {
		var value = this.unobservedBackground;
		this.emitBackgroundChange(value,value);
		var fieldAutoruns = this.backgroundAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitBackgroundChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBackgroundChange != null) {
			len += this.__cbOnBackgroundChange.length;
		}
		if(this.__cbOnceBackgroundChange != null) {
			len += this.__cbOnceBackgroundChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBackgroundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBackgroundChange[ii];
					++i;
				}
			}
			if(this.__cbOnceBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBackgroundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBackgroundChange[ii];
					var unbind = this.__cbOnceOwnerUnbindBackgroundChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBackgroundChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBackgroundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBackgroundChange == null) {
				this.__cbOnOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBackgroundChange == null) {
				this.__cbOnOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundChange.push(null);
		}
		if(this.__cbOnBackgroundChange == null) {
			this.__cbOnBackgroundChange = [];
		}
		this.__cbOnBackgroundChange.push(handleCurrentPrevious);
	}
	,onceBackgroundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBackgroundChange == null) {
				this.__cbOnceOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBackgroundChange == null) {
				this.__cbOnceOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundChange.push(null);
		}
		if(this.__cbOnceBackgroundChange == null) {
			this.__cbOnceBackgroundChange = [];
		}
		this.__cbOnceBackgroundChange.push(handleCurrentPrevious);
	}
	,offBackgroundChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBackgroundChange != null) {
				index = this.__cbOnBackgroundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBackgroundChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBackgroundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBackgroundChange.splice(index,1);
				}
			}
			if(this.__cbOnceBackgroundChange != null) {
				index = this.__cbOnceBackgroundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBackgroundChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBackgroundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBackgroundChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBackgroundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBackgroundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBackgroundChange = null;
			}
			if(this.__cbOnceOwnerUnbindBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBackgroundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBackgroundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBackgroundChange = null;
			}
			this.__cbOnBackgroundChange = null;
			this.__cbOnceBackgroundChange = null;
		}
	}
	,listensBackgroundChange: function() {
		if(!(this.__cbOnBackgroundChange != null && this.__cbOnBackgroundChange.length > 0)) {
			if(this.__cbOnceBackgroundChange != null) {
				return this.__cbOnceBackgroundChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_scaling: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.scalingAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.scalingAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedScaling;
	}
	,set_scaling: function(scaling) {
		var prevValue = this.unobservedScaling;
		this.unobservedScaling = scaling;
		if(prevValue == scaling) {
			return scaling;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitScalingChange(scaling,prevValue);
		var fieldAutoruns = this.scalingAutoruns;
		if(fieldAutoruns != null) {
			this.scalingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return scaling;
	}
	,invalidateScaling: function() {
		var value = this.unobservedScaling;
		this.emitScalingChange(value,value);
		var fieldAutoruns = this.scalingAutoruns;
		if(fieldAutoruns != null) {
			this.scalingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitScalingChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnScalingChange != null) {
			len += this.__cbOnScalingChange.length;
		}
		if(this.__cbOnceScalingChange != null) {
			len += this.__cbOnceScalingChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnScalingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnScalingChange[ii];
					++i;
				}
			}
			if(this.__cbOnceScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceScalingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceScalingChange[ii];
					var unbind = this.__cbOnceOwnerUnbindScalingChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceScalingChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onScalingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "scalingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offScalingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindScalingChange == null) {
				this.__cbOnOwnerUnbindScalingChange = [];
			}
			this.__cbOnOwnerUnbindScalingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindScalingChange == null) {
				this.__cbOnOwnerUnbindScalingChange = [];
			}
			this.__cbOnOwnerUnbindScalingChange.push(null);
		}
		if(this.__cbOnScalingChange == null) {
			this.__cbOnScalingChange = [];
		}
		this.__cbOnScalingChange.push(handleCurrentPrevious);
	}
	,onceScalingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "scalingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offScalingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindScalingChange == null) {
				this.__cbOnceOwnerUnbindScalingChange = [];
			}
			this.__cbOnceOwnerUnbindScalingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindScalingChange == null) {
				this.__cbOnceOwnerUnbindScalingChange = [];
			}
			this.__cbOnceOwnerUnbindScalingChange.push(null);
		}
		if(this.__cbOnceScalingChange == null) {
			this.__cbOnceScalingChange = [];
		}
		this.__cbOnceScalingChange.push(handleCurrentPrevious);
	}
	,offScalingChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnScalingChange != null) {
				index = this.__cbOnScalingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnScalingChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindScalingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindScalingChange.splice(index,1);
				}
			}
			if(this.__cbOnceScalingChange != null) {
				index = this.__cbOnceScalingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceScalingChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindScalingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindScalingChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindScalingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindScalingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindScalingChange = null;
			}
			if(this.__cbOnceOwnerUnbindScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindScalingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindScalingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindScalingChange = null;
			}
			this.__cbOnScalingChange = null;
			this.__cbOnceScalingChange = null;
		}
	}
	,listensScalingChange: function() {
		if(!(this.__cbOnScalingChange != null && this.__cbOnScalingChange.length > 0)) {
			if(this.__cbOnceScalingChange != null) {
				return this.__cbOnceScalingChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_title: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.titleAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.titleAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedTitle;
	}
	,set_title: function(title) {
		var prevValue = this.unobservedTitle;
		this.unobservedTitle = title;
		if(prevValue == title) {
			return title;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTitleChange(title,prevValue);
		var fieldAutoruns = this.titleAutoruns;
		if(fieldAutoruns != null) {
			this.titleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return title;
	}
	,invalidateTitle: function() {
		var value = this.unobservedTitle;
		this.emitTitleChange(value,value);
		var fieldAutoruns = this.titleAutoruns;
		if(fieldAutoruns != null) {
			this.titleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTitleChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTitleChange != null) {
			len += this.__cbOnTitleChange.length;
		}
		if(this.__cbOnceTitleChange != null) {
			len += this.__cbOnceTitleChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTitleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTitleChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTitleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTitleChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTitleChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTitleChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTitleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "titleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTitleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTitleChange == null) {
				this.__cbOnOwnerUnbindTitleChange = [];
			}
			this.__cbOnOwnerUnbindTitleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTitleChange == null) {
				this.__cbOnOwnerUnbindTitleChange = [];
			}
			this.__cbOnOwnerUnbindTitleChange.push(null);
		}
		if(this.__cbOnTitleChange == null) {
			this.__cbOnTitleChange = [];
		}
		this.__cbOnTitleChange.push(handleCurrentPrevious);
	}
	,onceTitleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "titleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTitleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTitleChange == null) {
				this.__cbOnceOwnerUnbindTitleChange = [];
			}
			this.__cbOnceOwnerUnbindTitleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTitleChange == null) {
				this.__cbOnceOwnerUnbindTitleChange = [];
			}
			this.__cbOnceOwnerUnbindTitleChange.push(null);
		}
		if(this.__cbOnceTitleChange == null) {
			this.__cbOnceTitleChange = [];
		}
		this.__cbOnceTitleChange.push(handleCurrentPrevious);
	}
	,offTitleChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTitleChange != null) {
				index = this.__cbOnTitleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTitleChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTitleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTitleChange.splice(index,1);
				}
			}
			if(this.__cbOnceTitleChange != null) {
				index = this.__cbOnceTitleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTitleChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTitleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTitleChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTitleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTitleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTitleChange = null;
			}
			if(this.__cbOnceOwnerUnbindTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTitleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTitleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTitleChange = null;
			}
			this.__cbOnTitleChange = null;
			this.__cbOnceTitleChange = null;
		}
	}
	,listensTitleChange: function() {
		if(!(this.__cbOnTitleChange != null && this.__cbOnTitleChange.length > 0)) {
			if(this.__cbOnceTitleChange != null) {
				return this.__cbOnceTitleChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_fullscreen: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fullscreenAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fullscreenAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedFullscreen;
	}
	,set_fullscreen: function(fullscreen) {
		var prevValue = this.unobservedFullscreen;
		this.unobservedFullscreen = fullscreen;
		if(prevValue == fullscreen) {
			return fullscreen;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFullscreenChange(fullscreen,prevValue);
		var fieldAutoruns = this.fullscreenAutoruns;
		if(fieldAutoruns != null) {
			this.fullscreenAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return fullscreen;
	}
	,invalidateFullscreen: function() {
		var value = this.unobservedFullscreen;
		this.emitFullscreenChange(value,value);
		var fieldAutoruns = this.fullscreenAutoruns;
		if(fieldAutoruns != null) {
			this.fullscreenAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitFullscreenChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFullscreenChange != null) {
			len += this.__cbOnFullscreenChange.length;
		}
		if(this.__cbOnceFullscreenChange != null) {
			len += this.__cbOnceFullscreenChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFullscreenChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnFullscreenChange[ii];
					++i;
				}
			}
			if(this.__cbOnceFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceFullscreenChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceFullscreenChange[ii];
					var unbind = this.__cbOnceOwnerUnbindFullscreenChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceFullscreenChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFullscreenChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fullscreenChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFullscreenChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFullscreenChange == null) {
				this.__cbOnOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnOwnerUnbindFullscreenChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFullscreenChange == null) {
				this.__cbOnOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnOwnerUnbindFullscreenChange.push(null);
		}
		if(this.__cbOnFullscreenChange == null) {
			this.__cbOnFullscreenChange = [];
		}
		this.__cbOnFullscreenChange.push(handleCurrentPrevious);
	}
	,onceFullscreenChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fullscreenChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFullscreenChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFullscreenChange == null) {
				this.__cbOnceOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnceOwnerUnbindFullscreenChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFullscreenChange == null) {
				this.__cbOnceOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnceOwnerUnbindFullscreenChange.push(null);
		}
		if(this.__cbOnceFullscreenChange == null) {
			this.__cbOnceFullscreenChange = [];
		}
		this.__cbOnceFullscreenChange.push(handleCurrentPrevious);
	}
	,offFullscreenChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFullscreenChange != null) {
				index = this.__cbOnFullscreenChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFullscreenChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFullscreenChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFullscreenChange.splice(index,1);
				}
			}
			if(this.__cbOnceFullscreenChange != null) {
				index = this.__cbOnceFullscreenChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFullscreenChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFullscreenChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFullscreenChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFullscreenChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFullscreenChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFullscreenChange = null;
			}
			if(this.__cbOnceOwnerUnbindFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFullscreenChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFullscreenChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFullscreenChange = null;
			}
			this.__cbOnFullscreenChange = null;
			this.__cbOnceFullscreenChange = null;
		}
	}
	,listensFullscreenChange: function() {
		if(!(this.__cbOnFullscreenChange != null && this.__cbOnFullscreenChange.length > 0)) {
			if(this.__cbOnceFullscreenChange != null) {
				return this.__cbOnceFullscreenChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_maxDelta: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.maxDeltaAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.maxDeltaAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedMaxDelta;
	}
	,set_maxDelta: function(maxDelta) {
		var prevValue = this.unobservedMaxDelta;
		this.unobservedMaxDelta = maxDelta;
		if(prevValue == maxDelta) {
			return maxDelta;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitMaxDeltaChange(maxDelta,prevValue);
		var fieldAutoruns = this.maxDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.maxDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return maxDelta;
	}
	,invalidateMaxDelta: function() {
		var value = this.unobservedMaxDelta;
		this.emitMaxDeltaChange(value,value);
		var fieldAutoruns = this.maxDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.maxDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitMaxDeltaChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnMaxDeltaChange != null) {
			len += this.__cbOnMaxDeltaChange.length;
		}
		if(this.__cbOnceMaxDeltaChange != null) {
			len += this.__cbOnceMaxDeltaChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnMaxDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnMaxDeltaChange[ii];
					++i;
				}
			}
			if(this.__cbOnceMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceMaxDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceMaxDeltaChange[ii];
					var unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceMaxDeltaChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMaxDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnOwnerUnbindMaxDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnOwnerUnbindMaxDeltaChange.push(null);
		}
		if(this.__cbOnMaxDeltaChange == null) {
			this.__cbOnMaxDeltaChange = [];
		}
		this.__cbOnMaxDeltaChange.push(handleCurrentPrevious);
	}
	,onceMaxDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnceOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindMaxDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnceOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindMaxDeltaChange.push(null);
		}
		if(this.__cbOnceMaxDeltaChange == null) {
			this.__cbOnceMaxDeltaChange = [];
		}
		this.__cbOnceMaxDeltaChange.push(handleCurrentPrevious);
	}
	,offMaxDeltaChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnMaxDeltaChange != null) {
				index = this.__cbOnMaxDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnMaxDeltaChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMaxDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMaxDeltaChange.splice(index,1);
				}
			}
			if(this.__cbOnceMaxDeltaChange != null) {
				index = this.__cbOnceMaxDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceMaxDeltaChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMaxDeltaChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMaxDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMaxDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMaxDeltaChange = null;
			}
			if(this.__cbOnceOwnerUnbindMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMaxDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMaxDeltaChange = null;
			}
			this.__cbOnMaxDeltaChange = null;
			this.__cbOnceMaxDeltaChange = null;
		}
	}
	,listensMaxDeltaChange: function() {
		if(!(this.__cbOnMaxDeltaChange != null && this.__cbOnMaxDeltaChange.length > 0)) {
			if(this.__cbOnceMaxDeltaChange != null) {
				return this.__cbOnceMaxDeltaChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,unbindEvents: function() {
		this.offObservedDirty();
		this.offTargetWidthChange();
		this.offTargetHeightChange();
		this.offWindowWidthChange();
		this.offWindowHeightChange();
		this.offTargetDensityChange();
		this.offBackgroundChange();
		this.offScalingChange();
		this.offTitleChange();
		this.offFullscreenChange();
		this.offMaxDeltaChange();
	}
	,__class__: ceramic_Settings
	,__properties__: {set_maxDelta:"set_maxDelta",get_maxDelta:"get_maxDelta",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_title:"set_title",get_title:"get_title",set_scaling:"set_scaling",get_scaling:"get_scaling",set_background:"set_background",get_background:"get_background",set_targetDensity:"set_targetDensity",get_targetDensity:"get_targetDensity",set_windowHeight:"set_windowHeight",get_windowHeight:"get_windowHeight",set_windowWidth:"set_windowWidth",get_windowWidth:"get_windowWidth",set_targetHeight:"set_targetHeight",get_targetHeight:"get_targetHeight",set_targetWidth:"set_targetWidth",get_targetWidth:"get_targetWidth"}
};
var ceramic_Shader = function(backendItem,customAttributes) {
	ceramic_Entity.call(this);
	this.backendItem = backendItem;
	var attributes = [new ceramic_ShaderAttribute(3,"vertexPosition"),new ceramic_ShaderAttribute(2,"vertexTCoord"),new ceramic_ShaderAttribute(4,"vertexColor")];
	if(customAttributes != null) {
		var _g = 0;
		var _g1 = customAttributes.length;
		while(_g < _g1) {
			var i = _g++;
			var attribute = customAttributes[i];
			attributes.push(attribute);
		}
	}
	this.attributes = attributes;
	this.customAttributes = customAttributes;
	var _this = ceramic_App.app.backend.shaders;
	var customFloatAttributesSize = 0;
	var allAttrs = backendItem.customAttributes;
	if(allAttrs != null) {
		var _g = 0;
		var _g1 = allAttrs.length;
		while(_g < _g1) {
			var ii = _g++;
			var attr = allAttrs[ii];
			customFloatAttributesSize += attr.size;
		}
	}
	this.customFloatAttributesSize = customFloatAttributesSize;
};
$hxClasses["ceramic.Shader"] = ceramic_Shader;
ceramic_Shader.__name__ = "ceramic.Shader";
ceramic_Shader.fromSource = function(vertSource,fragSource) {
	var _this = ceramic_App.app.backend.shaders;
	var vertSource1 = vertSource;
	var fragSource1 = fragSource;
	var customAttributes = null;
	var isMultiTextureTemplate = false;
	var _g = 0;
	var _g1 = fragSource1.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
			isMultiTextureTemplate = true;
			break;
		}
	}
	var textures = ["tex0"];
	if(isMultiTextureTemplate) {
		var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
		var maxIfs = _this.maxIfStatementsByFragmentShader();
		var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
		if(maxTexturesAndIfs > 1) {
			var i = 1;
			while(i <= maxTexturesAndIfs) {
				textures.push("tex" + i);
				++i;
			}
		}
		fragSource1 = backend_Shaders.processMultiTextureFragTemplate(fragSource1,maxTextures,maxIfs);
		vertSource1 = backend_Shaders.processMultiTextureVertTemplate(vertSource1,maxTextures,maxIfs);
	}
	var shader = new backend_ShaderImpl();
	shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
	shader.textures = textures;
	shader.vertSource = vertSource1;
	shader.fragSource = fragSource1;
	shader.isBatchingMultiTexture = isMultiTextureTemplate;
	shader.customAttributes = customAttributes;
	shader.init();
	var backendItem = shader;
	if(backendItem == null) {
		return null;
	}
	return new ceramic_Shader(backendItem);
};
ceramic_Shader.__super__ = ceramic_Entity;
ceramic_Shader.prototype = $extend(ceramic_Entity.prototype,{
	destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.destroy();
		this.backendItem = null;
		this.attributes = null;
	}
	,clone: function() {
		var _this = ceramic_App.app.backend.shaders;
		var clonedBackendItem = this.backendItem.clone();
		var cloned = new ceramic_Shader(clonedBackendItem,this.customAttributes);
		return cloned;
	}
	,setInt: function(name,value) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setInt(name,value);
	}
	,setFloat: function(name,value) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setFloat(name,value);
	}
	,setColor: function(name,color) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setColor(name,(color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,1.0);
	}
	,setAlphaColor: function(name,color) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setColor(name,(color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,(color >> 24 & 255) / 255);
	}
	,setVec2: function(name,x,y) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector2(name,x,y);
	}
	,setVec3: function(name,x,y,z) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector3(name,x,y,z);
	}
	,setVec4: function(name,x,y,z,w) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector4(name,x,y,z,w);
	}
	,setFloatArray: function(name,array) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setFloatArray(name,new Float32Array(array));
	}
	,setTexture: function(name,slot,texture) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setTexture(name,slot,texture.backendItem);
	}
	,setMat4FromTransform: function(name,transform) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setMatrix4(name,new Float32Array([transform.a,transform.b,0,0,transform.c,transform.d,0,0,0,0,1,0,transform.tx,transform.ty,0,1]));
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"shader:")) {
				name = HxOverrides.substr(name,7,null);
			}
			if(this.asset != null && this.asset.options.vertId != null || this.asset.options.fragId != null) {
				var vertId = this.asset.options.vertId != null ? this.asset.options.vertId : "default";
				var fragId = this.asset.options.fragId != null ? this.asset.options.fragId : "default";
				return "Shader(" + name + " " + vertId + " " + fragId + ")";
			} else {
				return "Shader(" + name + ")";
			}
		} else {
			return "Shader()";
		}
	}
	,__class__: ceramic_Shader
});
var ceramic_ShaderAsset = function(name,options) {
	this.shader = null;
	ceramic_Asset.call(this,"shader",name,options);
};
$hxClasses["ceramic.ShaderAsset"] = ceramic_ShaderAsset;
ceramic_ShaderAsset.__name__ = "ceramic.ShaderAsset";
ceramic_ShaderAsset.__super__ = ceramic_Asset;
ceramic_ShaderAsset.prototype = $extend(ceramic_Asset.prototype,{
	load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load shader asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 24, className : "ceramic.ShaderAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var customAttributes = null;
		if(this.options.customAttributes != null) {
			customAttributes = [];
			var rawAttributes = this.options.customAttributes;
			var _g = 0;
			var _g1 = rawAttributes.length;
			while(_g < _g1) {
				var i = _g++;
				var rawAttr = rawAttributes[i];
				customAttributes.push(new ceramic_ShaderAttribute(rawAttr.size,rawAttr.name));
			}
		}
		if(this.path != null && (StringTools.endsWith(this.path.toLowerCase(),".frag") || StringTools.endsWith(this.path.toLowerCase(),".vert"))) {
			var paths = ceramic_Assets.allByName.h[this.name];
			if(this.options.fragId == null) {
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					var path = paths[i];
					if(StringTools.endsWith(path.toLowerCase(),".frag")) {
						this.options.fragId = path;
						break;
					}
				}
			}
			if(this.options.vertId == null) {
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					var path = paths[i];
					if(StringTools.endsWith(path.toLowerCase(),".vert")) {
						this.options.vertId = path;
						break;
					}
				}
			}
			ceramic_App.app.logger.info("Load shader" + (this.options.vertId != null ? " " + Std.string(this.options.vertId) : "") + (this.options.fragId != null ? " " + Std.string(this.options.fragId) : ""),{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 66, className : "ceramic.ShaderAsset", methodName : "load"});
		} else {
			ceramic_App.app.logger.info("Load shader " + this.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 69, className : "ceramic.ShaderAsset", methodName : "load"});
		}
		if(this.options.vertId == null) {
			this.options.vertId = "textured.vert";
		}
		if(this.options.fragId == null) {
			this.set_status(ceramic_AssetStatus.BROKEN);
			ceramic_App.app.logger.error("Missing fragId option to load shader at path: " + this.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 78, className : "ceramic.ShaderAsset", methodName : "load"});
			this.emitComplete(false);
			return;
		}
		ceramic_App.app.backend.texts.load(ceramic_Assets.realAssetPath(this.options.vertId,this.runtimeAssets),null,function(vertSource) {
			ceramic_App.app.backend.texts.load(ceramic_Assets.realAssetPath(_gthis.options.fragId,_gthis.runtimeAssets),null,function(fragSource) {
				if(vertSource == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to load " + Std.string(_gthis.options.vertId) + (" for shader at path: " + _gthis.path),{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 88, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				if(fragSource == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to load " + Std.string(_gthis.options.fragId) + (" for shader at path: " + _gthis.path),{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 95, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				var _this = ceramic_App.app.backend.shaders;
				var vertSource1 = vertSource;
				var fragSource1 = fragSource;
				var isMultiTextureTemplate = false;
				var _g = 0;
				var _g1 = fragSource1.split("\n");
				while(_g < _g1.length) {
					var line = _g1[_g];
					++_g;
					if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
						isMultiTextureTemplate = true;
						break;
					}
				}
				var textures = ["tex0"];
				if(isMultiTextureTemplate) {
					var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
					var maxIfs = _this.maxIfStatementsByFragmentShader();
					var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
					if(maxTexturesAndIfs > 1) {
						var i = 1;
						while(i <= maxTexturesAndIfs) {
							textures.push("tex" + i);
							++i;
						}
					}
					fragSource1 = backend_Shaders.processMultiTextureFragTemplate(fragSource1,maxTextures,maxIfs);
					vertSource1 = backend_Shaders.processMultiTextureVertTemplate(vertSource1,maxTextures,maxIfs);
				}
				var shader = new backend_ShaderImpl();
				shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
				shader.textures = textures;
				shader.vertSource = vertSource1;
				shader.fragSource = fragSource1;
				shader.isBatchingMultiTexture = isMultiTextureTemplate;
				shader.customAttributes = customAttributes;
				shader.init();
				var backendItem = shader;
				if(backendItem == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to create shader from data at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/ShaderAsset.hx", lineNumber : 103, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				_gthis.shader = new ceramic_Shader(backendItem,customAttributes);
				_gthis.shader.asset = _gthis;
				_gthis.shader.id = "shader:" + _gthis.path;
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			});
		});
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.shader != null) {
			this.shader.destroy();
			this.shader = null;
		}
	}
	,toString: function() {
		var className = "ShaderAsset";
		if(this.options.vertId != null || this.options.fragId != null) {
			var vertId = this.options.vertId != null ? this.options.vertId : "default";
			var fragId = this.options.fragId != null ? this.options.fragId : "default";
			return "" + className + "(" + this.name + " " + vertId + " " + fragId + ")";
		} else if(this.path != null && StringTools.trim(this.path) != "") {
			return "" + className + "(" + this.name + " " + this.path + ")";
		} else {
			return "" + className + "(" + this.name + ")";
		}
	}
	,__class__: ceramic_ShaderAsset
});
var ceramic_ShaderAttribute = function(size,name) {
	this.size = size;
	this.name = name;
};
$hxClasses["ceramic.ShaderAttribute"] = ceramic_ShaderAttribute;
ceramic_ShaderAttribute.__name__ = "ceramic.ShaderAttribute";
ceramic_ShaderAttribute.prototype = {
	toString: function() {
		return "" + Std.string({ size : this.size, name : this.name});
	}
	,__class__: ceramic_ShaderAttribute
};
var ceramic_Shortcuts = function() { };
$hxClasses["ceramic.Shortcuts"] = ceramic_Shortcuts;
ceramic_Shortcuts.__name__ = "ceramic.Shortcuts";
ceramic_Shortcuts.__properties__ = {get_systems:"get_systems",get_log:"get_log",get_settings:"get_settings",get_input:"get_input",get_audio:"get_audio",get_screen:"get_screen",get_app:"get_app"};
ceramic_Shortcuts.get_app = function() {
	return ceramic_App.app;
};
ceramic_Shortcuts.get_screen = function() {
	return ceramic_App.app.screen;
};
ceramic_Shortcuts.get_audio = function() {
	return ceramic_App.app.audio;
};
ceramic_Shortcuts.get_input = function() {
	return ceramic_App.app.input;
};
ceramic_Shortcuts.get_settings = function() {
	return ceramic_App.app.settings;
};
ceramic_Shortcuts.get_log = function() {
	return ceramic_App.app.logger;
};
ceramic_Shortcuts.get_systems = function() {
	return ceramic_App.app.systems;
};
var ceramic_SortRenderTextures = function() { };
$hxClasses["ceramic.SortRenderTextures"] = ceramic_SortRenderTextures;
ceramic_SortRenderTextures.__name__ = "ceramic.SortRenderTextures";
ceramic_SortRenderTextures.cmp = function(a,b) {
	var result = 0;
	var tmp;
	if(a.dependingTextures != null) {
		var value = a.dependingTextures.h[b.index | 0];
		tmp = (value != null ? value : 0) > 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		result = -1;
	} else {
		var tmp;
		if(b.dependingTextures != null) {
			var value = b.dependingTextures.h[a.index | 0];
			tmp = (value != null ? value : 0) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			result = 1;
		}
	}
	return result;
};
ceramic_SortRenderTextures.sort = function(a) {
	ceramic_SortRenderTextures.rec(a,0,a.length);
};
ceramic_SortRenderTextures.rec = function(a,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				var a1 = a[j];
				var b = a[j - 1];
				var result = 0;
				var tmp;
				if(a1.dependingTextures != null) {
					var value = a1.dependingTextures.h[b.index | 0];
					tmp = (value != null ? value : 0) > 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					result = -1;
				} else {
					var tmp1;
					if(b.dependingTextures != null) {
						var value1 = b.dependingTextures.h[a1.index | 0];
						tmp1 = (value1 != null ? value1 : 0) > 0;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						result = 1;
					}
				}
				if(result < 0) {
					var i1 = j - 1;
					var tmp2 = a[i1];
					a[i1] = a[j];
					a[j] = tmp2;
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	ceramic_SortRenderTextures.rec(a,from,middle);
	ceramic_SortRenderTextures.rec(a,middle,to);
	ceramic_SortRenderTextures.doMerge(a,from,middle,to,middle - from,to - middle);
};
ceramic_SortRenderTextures.doMerge = function(a,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		var a1 = a[pivot];
		var b = a[from];
		var result = 0;
		var tmp;
		if(a1.dependingTextures != null) {
			var value = a1.dependingTextures.h[b.index | 0];
			tmp = (value != null ? value : 0) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			result = -1;
		} else {
			var tmp;
			if(b.dependingTextures != null) {
				var value = b.dependingTextures.h[a1.index | 0];
				tmp = (value != null ? value : 0) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				result = 1;
			}
		}
		if(result < 0) {
			var tmp = a[pivot];
			a[pivot] = a[from];
			a[from] = tmp;
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		var from1 = pivot;
		var len = to - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[mid];
			var b = a[first_cut];
			var result = 0;
			var second_cut1;
			if(a1.dependingTextures != null) {
				var value = a1.dependingTextures.h[b.index | 0];
				second_cut1 = (value != null ? value : 0) > 0;
			} else {
				second_cut1 = false;
			}
			if(second_cut1) {
				result = -1;
			} else {
				var second_cut2;
				if(b.dependingTextures != null) {
					var value1 = b.dependingTextures.h[a1.index | 0];
					second_cut2 = (value1 != null ? value1 : 0) > 0;
				} else {
					second_cut2 = false;
				}
				if(second_cut2) {
					result = 1;
				}
			}
			if(result < 0) {
				from1 = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		second_cut = from1;
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		var from1 = from;
		var len = pivot - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[second_cut];
			var b = a[mid];
			var result = 0;
			var first_cut1;
			if(a1.dependingTextures != null) {
				var value = a1.dependingTextures.h[b.index | 0];
				first_cut1 = (value != null ? value : 0) > 0;
			} else {
				first_cut1 = false;
			}
			if(first_cut1) {
				result = -1;
			} else {
				var first_cut2;
				if(b.dependingTextures != null) {
					var value1 = b.dependingTextures.h[a1.index | 0];
					first_cut2 = (value1 != null ? value1 : 0) > 0;
				} else {
					first_cut2 = false;
				}
				if(first_cut2) {
					result = 1;
				}
			}
			if(result < 0) {
				len = half;
			} else {
				from1 = mid + 1;
				len = len - half - 1;
			}
		}
		first_cut = from1;
		len11 = first_cut - from;
	}
	var n;
	if(!(first_cut == pivot || pivot == second_cut)) {
		var m = second_cut - first_cut;
		var n1 = pivot - first_cut;
		while(n1 != 0) {
			var t = m % n1;
			m = n1;
			n1 = t;
		}
		n = m;
		while(n-- != 0) {
			var val = a[first_cut + n];
			var shift = pivot - first_cut;
			var p1 = first_cut + n;
			var p2 = first_cut + n + shift;
			while(p2 != first_cut + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(second_cut - p2 > shift) {
					p2 += shift;
				} else {
					p2 = first_cut + (shift - (second_cut - p2));
				}
			}
			a[p1] = val;
		}
	}
	var new_mid = first_cut + len22;
	ceramic_SortRenderTextures.doMerge(a,from,first_cut,new_mid,len11,len22);
	ceramic_SortRenderTextures.doMerge(a,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
ceramic_SortRenderTextures.rotate = function(a,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var m = to - from;
	var n = mid - from;
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	var n = m;
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
ceramic_SortRenderTextures.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
ceramic_SortRenderTextures.upper = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[val];
		var b = a[mid];
		var result = 0;
		var tmp;
		if(a1.dependingTextures != null) {
			var value = a1.dependingTextures.h[b.index | 0];
			tmp = (value != null ? value : 0) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			result = -1;
		} else {
			var tmp1;
			if(b.dependingTextures != null) {
				var value1 = b.dependingTextures.h[a1.index | 0];
				tmp1 = (value1 != null ? value1 : 0) > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				result = 1;
			}
		}
		if(result < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
ceramic_SortRenderTextures.lower = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[mid];
		var b = a[val];
		var result = 0;
		var tmp;
		if(a1.dependingTextures != null) {
			var value = a1.dependingTextures.h[b.index | 0];
			tmp = (value != null ? value : 0) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			result = -1;
		} else {
			var tmp1;
			if(b.dependingTextures != null) {
				var value1 = b.dependingTextures.h[a1.index | 0];
				tmp1 = (value1 != null ? value1 : 0) > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				result = 1;
			}
		}
		if(result < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
ceramic_SortRenderTextures.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
ceramic_SortRenderTextures.compare = function(a,i,j) {
	var a1 = a[i];
	var b = a[j];
	var result = 0;
	var tmp;
	if(a1.dependingTextures != null) {
		var value = a1.dependingTextures.h[b.index | 0];
		tmp = (value != null ? value : 0) > 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		result = -1;
	} else {
		var tmp;
		if(b.dependingTextures != null) {
			var value = b.dependingTextures.h[a1.index | 0];
			tmp = (value != null ? value : 0) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			result = 1;
		}
	}
	return result;
};
var ceramic_SortVisuals = function() { };
$hxClasses["ceramic.SortVisuals"] = ceramic_SortVisuals;
ceramic_SortVisuals.__name__ = "ceramic.SortVisuals";
ceramic_SortVisuals.cmp = function(a,b) {
	var result = 0;
	if(!a.computedVisible && !a.computedTouchable) {
		result = -1;
	} else if(!b.computedVisible && !b.computedTouchable) {
		result = 1;
	} else if(a.computedRenderTarget != b.computedRenderTarget) {
		if(a.computedRenderTarget == null) {
			result = 1;
		} else if(b.computedRenderTarget == null) {
			result = -1;
		} else if(a.computedRenderTarget.priority > b.computedRenderTarget.priority) {
			result = -1;
		} else if(a.computedRenderTarget.priority < b.computedRenderTarget.priority) {
			result = 1;
		} else if(a.computedRenderTarget.index < b.computedRenderTarget.index) {
			result = -1;
		} else {
			result = 1;
		}
	} else if(a.computedDepth > b.computedDepth) {
		result = 1;
	} else if(a.computedDepth < b.computedDepth) {
		result = -1;
	} else {
		var aQuad = a.asQuad;
		var bQuad = b.asQuad;
		var aMesh = a.asMesh;
		var bMesh = b.asMesh;
		var aIsQuadOrMesh = aQuad != null || aMesh != null;
		var bIsQuadOrMesh = bQuad != null || bMesh != null;
		if(aIsQuadOrMesh && bIsQuadOrMesh) {
			var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
			var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
			if(aTexture != null && bTexture == null) {
				result = 1;
			} else if(aTexture == null && bTexture != null) {
				result = -1;
			} else if(aTexture != null && bTexture != null) {
				if(aTexture.index < bTexture.index) {
					result = 1;
				} else if(aTexture.index > bTexture.index) {
					result = -1;
				} else if(a.blending > b.blending) {
					result = 1;
				} else if(a.blending < b.blending) {
					result = -1;
				}
			} else if(a.blending > b.blending) {
				result = 1;
			} else if(a.blending < b.blending) {
				result = -1;
			}
		}
	}
	return result;
};
ceramic_SortVisuals.sort = function(a) {
	ceramic_SortVisuals.rec(a,0,a.length);
};
ceramic_SortVisuals.rec = function(a,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				var a1 = a[j];
				var b = a[j - 1];
				var result = 0;
				if(!a1.computedVisible && !a1.computedTouchable) {
					result = -1;
				} else if(!b.computedVisible && !b.computedTouchable) {
					result = 1;
				} else if(a1.computedRenderTarget != b.computedRenderTarget) {
					if(a1.computedRenderTarget == null) {
						result = 1;
					} else if(b.computedRenderTarget == null) {
						result = -1;
					} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
						result = -1;
					} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
						result = 1;
					} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
						result = -1;
					} else {
						result = 1;
					}
				} else if(a1.computedDepth > b.computedDepth) {
					result = 1;
				} else if(a1.computedDepth < b.computedDepth) {
					result = -1;
				} else {
					var aQuad = a1.asQuad;
					var bQuad = b.asQuad;
					var aMesh = a1.asMesh;
					var bMesh = b.asMesh;
					var aIsQuadOrMesh = aQuad != null || aMesh != null;
					var bIsQuadOrMesh = bQuad != null || bMesh != null;
					if(aIsQuadOrMesh && bIsQuadOrMesh) {
						var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
						var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
						if(aTexture != null && bTexture == null) {
							result = 1;
						} else if(aTexture == null && bTexture != null) {
							result = -1;
						} else if(aTexture != null && bTexture != null) {
							if(aTexture.index < bTexture.index) {
								result = 1;
							} else if(aTexture.index > bTexture.index) {
								result = -1;
							} else if(a1.blending > b.blending) {
								result = 1;
							} else if(a1.blending < b.blending) {
								result = -1;
							}
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					}
				}
				if(result < 0) {
					var i1 = j - 1;
					var tmp = a[i1];
					a[i1] = a[j];
					a[j] = tmp;
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	ceramic_SortVisuals.rec(a,from,middle);
	ceramic_SortVisuals.rec(a,middle,to);
	ceramic_SortVisuals.doMerge(a,from,middle,to,middle - from,to - middle);
};
ceramic_SortVisuals.doMerge = function(a,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		var a1 = a[pivot];
		var b = a[from];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			var tmp = a[pivot];
			a[pivot] = a[from];
			a[from] = tmp;
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		var from1 = pivot;
		var len = to - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[mid];
			var b = a[first_cut];
			var result = 0;
			if(!a1.computedVisible && !a1.computedTouchable) {
				result = -1;
			} else if(!b.computedVisible && !b.computedTouchable) {
				result = 1;
			} else if(a1.computedRenderTarget != b.computedRenderTarget) {
				if(a1.computedRenderTarget == null) {
					result = 1;
				} else if(b.computedRenderTarget == null) {
					result = -1;
				} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
					result = -1;
				} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
					result = 1;
				} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
					result = -1;
				} else {
					result = 1;
				}
			} else if(a1.computedDepth > b.computedDepth) {
				result = 1;
			} else if(a1.computedDepth < b.computedDepth) {
				result = -1;
			} else {
				var aQuad = a1.asQuad;
				var bQuad = b.asQuad;
				var aMesh = a1.asMesh;
				var bMesh = b.asMesh;
				var aIsQuadOrMesh = aQuad != null || aMesh != null;
				var bIsQuadOrMesh = bQuad != null || bMesh != null;
				if(aIsQuadOrMesh && bIsQuadOrMesh) {
					var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
					var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
					if(aTexture != null && bTexture == null) {
						result = 1;
					} else if(aTexture == null && bTexture != null) {
						result = -1;
					} else if(aTexture != null && bTexture != null) {
						if(aTexture.index < bTexture.index) {
							result = 1;
						} else if(aTexture.index > bTexture.index) {
							result = -1;
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				}
			}
			if(result < 0) {
				from1 = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		second_cut = from1;
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		var from1 = from;
		var len = pivot - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[second_cut];
			var b = a[mid];
			var result = 0;
			if(!a1.computedVisible && !a1.computedTouchable) {
				result = -1;
			} else if(!b.computedVisible && !b.computedTouchable) {
				result = 1;
			} else if(a1.computedRenderTarget != b.computedRenderTarget) {
				if(a1.computedRenderTarget == null) {
					result = 1;
				} else if(b.computedRenderTarget == null) {
					result = -1;
				} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
					result = -1;
				} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
					result = 1;
				} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
					result = -1;
				} else {
					result = 1;
				}
			} else if(a1.computedDepth > b.computedDepth) {
				result = 1;
			} else if(a1.computedDepth < b.computedDepth) {
				result = -1;
			} else {
				var aQuad = a1.asQuad;
				var bQuad = b.asQuad;
				var aMesh = a1.asMesh;
				var bMesh = b.asMesh;
				var aIsQuadOrMesh = aQuad != null || aMesh != null;
				var bIsQuadOrMesh = bQuad != null || bMesh != null;
				if(aIsQuadOrMesh && bIsQuadOrMesh) {
					var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
					var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
					if(aTexture != null && bTexture == null) {
						result = 1;
					} else if(aTexture == null && bTexture != null) {
						result = -1;
					} else if(aTexture != null && bTexture != null) {
						if(aTexture.index < bTexture.index) {
							result = 1;
						} else if(aTexture.index > bTexture.index) {
							result = -1;
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				}
			}
			if(result < 0) {
				len = half;
			} else {
				from1 = mid + 1;
				len = len - half - 1;
			}
		}
		first_cut = from1;
		len11 = first_cut - from;
	}
	var n;
	if(!(first_cut == pivot || pivot == second_cut)) {
		var m = second_cut - first_cut;
		var n1 = pivot - first_cut;
		while(n1 != 0) {
			var t = m % n1;
			m = n1;
			n1 = t;
		}
		n = m;
		while(n-- != 0) {
			var k = first_cut + n;
			var val = a[k];
			var shift = pivot - first_cut;
			var p1 = first_cut + n;
			var p2 = first_cut + n + shift;
			while(p2 != first_cut + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(second_cut - p2 > shift) {
					p2 += shift;
				} else {
					p2 = first_cut + (shift - (second_cut - p2));
				}
			}
			a[p1] = val;
		}
	}
	var new_mid = first_cut + len22;
	ceramic_SortVisuals.doMerge(a,from,first_cut,new_mid,len11,len22);
	ceramic_SortVisuals.doMerge(a,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
ceramic_SortVisuals.rotate = function(a,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var m = to - from;
	var n = mid - from;
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	var n = m;
	while(n-- != 0) {
		var k = from + n;
		var val = a[k];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
ceramic_SortVisuals.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
ceramic_SortVisuals.upper = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[val];
		var b = a[mid];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
ceramic_SortVisuals.lower = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[mid];
		var b = a[val];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
ceramic_SortVisuals.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
ceramic_SortVisuals.compare = function(a,i,j) {
	var a1 = a[i];
	var b = a[j];
	var result = 0;
	if(!a1.computedVisible && !a1.computedTouchable) {
		result = -1;
	} else if(!b.computedVisible && !b.computedTouchable) {
		result = 1;
	} else if(a1.computedRenderTarget != b.computedRenderTarget) {
		if(a1.computedRenderTarget == null) {
			result = 1;
		} else if(b.computedRenderTarget == null) {
			result = -1;
		} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
			result = -1;
		} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
			result = 1;
		} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
			result = -1;
		} else {
			result = 1;
		}
	} else if(a1.computedDepth > b.computedDepth) {
		result = 1;
	} else if(a1.computedDepth < b.computedDepth) {
		result = -1;
	} else {
		var aQuad = a1.asQuad;
		var bQuad = b.asQuad;
		var aMesh = a1.asMesh;
		var bMesh = b.asMesh;
		var aIsQuadOrMesh = aQuad != null || aMesh != null;
		var bIsQuadOrMesh = bQuad != null || bMesh != null;
		if(aIsQuadOrMesh && bIsQuadOrMesh) {
			var aTexture = aMesh != null ? aMesh.texture : aQuad.texture;
			var bTexture = bMesh != null ? bMesh.texture : bQuad.texture;
			if(aTexture != null && bTexture == null) {
				result = 1;
			} else if(aTexture == null && bTexture != null) {
				result = -1;
			} else if(aTexture != null && bTexture != null) {
				if(aTexture.index < bTexture.index) {
					result = 1;
				} else if(aTexture.index > bTexture.index) {
					result = -1;
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			} else if(a1.blending > b.blending) {
				result = 1;
			} else if(a1.blending < b.blending) {
				result = -1;
			}
		}
	}
	return result;
};
var ceramic_SortVisualsByDepth = function() { };
$hxClasses["ceramic.SortVisualsByDepth"] = ceramic_SortVisualsByDepth;
ceramic_SortVisualsByDepth.__name__ = "ceramic.SortVisualsByDepth";
ceramic_SortVisualsByDepth.cmp = function(a,b) {
	var result = 0;
	if(a.depth > b.depth) {
		result = 1;
	} else if(a.depth < b.depth) {
		result = -1;
	}
	return result;
};
ceramic_SortVisualsByDepth.sort = function(a) {
	ceramic_SortVisualsByDepth.rec(a,0,a.length);
};
ceramic_SortVisualsByDepth.rec = function(a,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				var a1 = a[j];
				var b = a[j - 1];
				var result = 0;
				if(a1.depth > b.depth) {
					result = 1;
				} else if(a1.depth < b.depth) {
					result = -1;
				}
				if(result < 0) {
					var i1 = j - 1;
					var tmp = a[i1];
					a[i1] = a[j];
					a[j] = tmp;
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	ceramic_SortVisualsByDepth.rec(a,from,middle);
	ceramic_SortVisualsByDepth.rec(a,middle,to);
	ceramic_SortVisualsByDepth.doMerge(a,from,middle,to,middle - from,to - middle);
};
ceramic_SortVisualsByDepth.doMerge = function(a,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		var a1 = a[pivot];
		var b = a[from];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			var tmp = a[pivot];
			a[pivot] = a[from];
			a[from] = tmp;
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		var from1 = pivot;
		var len = to - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[mid];
			var b = a[first_cut];
			var result = 0;
			if(a1.depth > b.depth) {
				result = 1;
			} else if(a1.depth < b.depth) {
				result = -1;
			}
			if(result < 0) {
				from1 = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		second_cut = from1;
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		var from1 = from;
		var len = pivot - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[second_cut];
			var b = a[mid];
			var result = 0;
			if(a1.depth > b.depth) {
				result = 1;
			} else if(a1.depth < b.depth) {
				result = -1;
			}
			if(result < 0) {
				len = half;
			} else {
				from1 = mid + 1;
				len = len - half - 1;
			}
		}
		first_cut = from1;
		len11 = first_cut - from;
	}
	var n;
	if(!(first_cut == pivot || pivot == second_cut)) {
		var m = second_cut - first_cut;
		var n1 = pivot - first_cut;
		while(n1 != 0) {
			var t = m % n1;
			m = n1;
			n1 = t;
		}
		n = m;
		while(n-- != 0) {
			var k = first_cut + n;
			var val = a[k];
			var shift = pivot - first_cut;
			var p1 = first_cut + n;
			var p2 = first_cut + n + shift;
			while(p2 != first_cut + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(second_cut - p2 > shift) {
					p2 += shift;
				} else {
					p2 = first_cut + (shift - (second_cut - p2));
				}
			}
			a[p1] = val;
		}
	}
	var new_mid = first_cut + len22;
	ceramic_SortVisualsByDepth.doMerge(a,from,first_cut,new_mid,len11,len22);
	ceramic_SortVisualsByDepth.doMerge(a,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
ceramic_SortVisualsByDepth.rotate = function(a,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var m = to - from;
	var n = mid - from;
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	var n = m;
	while(n-- != 0) {
		var k = from + n;
		var val = a[k];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
ceramic_SortVisualsByDepth.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
ceramic_SortVisualsByDepth.upper = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[val];
		var b = a[mid];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
ceramic_SortVisualsByDepth.lower = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[mid];
		var b = a[val];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
ceramic_SortVisualsByDepth.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
ceramic_SortVisualsByDepth.compare = function(a,i,j) {
	var a1 = a[i];
	var b = a[j];
	var result = 0;
	if(a1.depth > b.depth) {
		result = 1;
	} else if(a1.depth < b.depth) {
		result = -1;
	}
	return result;
};
var ceramic_Sound = function(backendItem) {
	this.pitch = 1;
	this.pan = 0;
	this.volume = 0.5;
	this.group = 0;
	ceramic_Entity.call(this);
	this.backendItem = backendItem;
};
$hxClasses["ceramic.Sound"] = ceramic_Sound;
ceramic_Sound.__name__ = "ceramic.Sound";
ceramic_Sound.__super__ = ceramic_Entity;
ceramic_Sound.prototype = $extend(ceramic_Entity.prototype,{
	set_group: function(group) {
		if(this.group == group) {
			return group;
		}
		this.group = group;
		var _this = ceramic_App.app.audio;
		if(!_this.mixers.exists(group)) {
			_this.mixers.set(group,new ceramic_AudioMixer(group));
		}
		return group;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		var _this = ceramic_App.app.backend.audio;
		var audio = this.backendItem;
		var id = null;
		var h = _this.loadedAudioResources.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_key = key;
			var _g1_value = _g_h[key];
			var key1 = _g1_key;
			var val = _g1_value;
			if(val == audio) {
				id = key1;
			}
		}
		if(id == null) {
			ceramic_App.app.logger.error("Failed to destroy audio resource: " + Std.string(audio) + " because id could not be resolved",{ fileName : "/Users/jeremyfa/Developer/ceramic/plugins/clay/runtime/src/backend/Audio.hx", lineNumber : 169, className : "backend.Audio", methodName : "destroy"});
		} else if(_this.loadedAudioRetainCount.h[id] > 1) {
			_this.loadedAudioRetainCount.h[id] -= 1;
		} else {
			var _this1 = _this.loadedAudioResources;
			if(Object.prototype.hasOwnProperty.call(_this1.h,id)) {
				delete(_this1.h[id]);
			}
			var _this1 = _this.loadedAudioRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this1.h,id)) {
				delete(_this1.h[id]);
			}
			audio.destroy();
		}
		this.backendItem = null;
	}
	,get_duration: function() {
		var _this = ceramic_App.app.backend.audio;
		return this.backendItem.getDuration();
	}
	,play: function(position,loop,volume,pan,pitch) {
		if(loop == null) {
			loop = false;
		}
		if(position == null) {
			position = 0;
		}
		var _this = ceramic_App.app.audio.mixers;
		var value = _this.keys.h[this.group | 0];
		var index = value != null ? value : 0;
		var mixer = index >= 2 ? _this.values[index - 2] : null;
		if(mixer.mute) {
			return -1;
		}
		if(volume == null) {
			volume = this.volume;
		}
		if(pan == null) {
			pan = this.pan;
		}
		if(pitch == null) {
			pitch = this.pitch;
		}
		volume *= mixer.volume * 2;
		pan += mixer.pan;
		pitch += mixer.pitch - 1;
		return ceramic_App.app.backend.audio.play(this.backendItem,volume,pan,pitch,position,loop);
	}
	,__class__: ceramic_Sound
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_duration:"get_duration",set_group:"set_group"})
});
var ceramic_SoundAsset = function(name,options) {
	this.unobservedSound = null;
	this.soundAutoruns = null;
	this.stream = false;
	ceramic_Asset.call(this,"sound",name,options);
};
$hxClasses["ceramic.SoundAsset"] = ceramic_SoundAsset;
ceramic_SoundAsset.__name__ = "ceramic.SoundAsset";
ceramic_SoundAsset.__super__ = ceramic_Asset;
ceramic_SoundAsset.prototype = $extend(ceramic_Asset.prototype,{
	emitReplaceSound: function(newSound,prevSound) {
		var len = 0;
		if(this.__cbOnReplaceSound != null) {
			len += this.__cbOnReplaceSound.length;
		}
		if(this.__cbOnceReplaceSound != null) {
			len += this.__cbOnceReplaceSound.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceSound.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReplaceSound[ii];
					++i;
				}
			}
			if(this.__cbOnceReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReplaceSound.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReplaceSound[ii];
					var unbind = this.__cbOnceOwnerUnbindReplaceSound[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReplaceSound = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newSound,prevSound);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceSound: function(owner,handleNewSoundPrevSound) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceSound" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewSoundPrevSound != null) {
					_gthis.offReplaceSound(handleNewSoundPrevSound);
					handleNewSoundPrevSound = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceSound == null) {
				this.__cbOnOwnerUnbindReplaceSound = [];
			}
			this.__cbOnOwnerUnbindReplaceSound.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewSoundPrevSound = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceSound == null) {
				this.__cbOnOwnerUnbindReplaceSound = [];
			}
			this.__cbOnOwnerUnbindReplaceSound.push(null);
		}
		if(this.__cbOnReplaceSound == null) {
			this.__cbOnReplaceSound = [];
		}
		this.__cbOnReplaceSound.push(handleNewSoundPrevSound);
	}
	,onceReplaceSound: function(owner,handleNewSoundPrevSound) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceSound" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewSoundPrevSound != null) {
					_gthis.offReplaceSound(handleNewSoundPrevSound);
					handleNewSoundPrevSound = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceSound == null) {
				this.__cbOnceOwnerUnbindReplaceSound = [];
			}
			this.__cbOnceOwnerUnbindReplaceSound.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewSoundPrevSound = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceSound == null) {
				this.__cbOnceOwnerUnbindReplaceSound = [];
			}
			this.__cbOnceOwnerUnbindReplaceSound.push(null);
		}
		if(this.__cbOnceReplaceSound == null) {
			this.__cbOnceReplaceSound = [];
		}
		this.__cbOnceReplaceSound.push(handleNewSoundPrevSound);
	}
	,offReplaceSound: function(handleNewSoundPrevSound) {
		if(handleNewSoundPrevSound != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceSound != null) {
				index = this.__cbOnReplaceSound.indexOf(handleNewSoundPrevSound);
				if(index != -1) {
					this.__cbOnReplaceSound.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceSound[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceSound.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceSound != null) {
				index = this.__cbOnceReplaceSound.indexOf(handleNewSoundPrevSound);
				if(index != -1) {
					this.__cbOnceReplaceSound.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceSound[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceSound.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceSound.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceSound[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceSound = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceSound.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceSound[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceSound = null;
			}
			this.__cbOnReplaceSound = null;
			this.__cbOnceReplaceSound = null;
		}
	}
	,listensReplaceSound: function() {
		if(!(this.__cbOnReplaceSound != null && this.__cbOnReplaceSound.length > 0)) {
			if(this.__cbOnceReplaceSound != null) {
				return this.__cbOnceReplaceSound.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_sound: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.soundAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.soundAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedSound;
	}
	,set_sound: function(sound) {
		var prevValue = this.unobservedSound;
		this.unobservedSound = sound;
		if(prevValue == sound) {
			return sound;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitSoundChange(sound,prevValue);
		var fieldAutoruns = this.soundAutoruns;
		if(fieldAutoruns != null) {
			this.soundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return sound;
	}
	,invalidateSound: function() {
		var value = this.unobservedSound;
		this.emitSoundChange(value,value);
		var fieldAutoruns = this.soundAutoruns;
		if(fieldAutoruns != null) {
			this.soundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitSoundChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnSoundChange != null) {
			len += this.__cbOnSoundChange.length;
		}
		if(this.__cbOnceSoundChange != null) {
			len += this.__cbOnceSoundChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnSoundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnSoundChange[ii];
					++i;
				}
			}
			if(this.__cbOnceSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceSoundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceSoundChange[ii];
					var unbind = this.__cbOnceOwnerUnbindSoundChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceSoundChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSoundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "soundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSoundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSoundChange == null) {
				this.__cbOnOwnerUnbindSoundChange = [];
			}
			this.__cbOnOwnerUnbindSoundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSoundChange == null) {
				this.__cbOnOwnerUnbindSoundChange = [];
			}
			this.__cbOnOwnerUnbindSoundChange.push(null);
		}
		if(this.__cbOnSoundChange == null) {
			this.__cbOnSoundChange = [];
		}
		this.__cbOnSoundChange.push(handleCurrentPrevious);
	}
	,onceSoundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "soundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSoundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSoundChange == null) {
				this.__cbOnceOwnerUnbindSoundChange = [];
			}
			this.__cbOnceOwnerUnbindSoundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSoundChange == null) {
				this.__cbOnceOwnerUnbindSoundChange = [];
			}
			this.__cbOnceOwnerUnbindSoundChange.push(null);
		}
		if(this.__cbOnceSoundChange == null) {
			this.__cbOnceSoundChange = [];
		}
		this.__cbOnceSoundChange.push(handleCurrentPrevious);
	}
	,offSoundChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnSoundChange != null) {
				index = this.__cbOnSoundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnSoundChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSoundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSoundChange.splice(index,1);
				}
			}
			if(this.__cbOnceSoundChange != null) {
				index = this.__cbOnceSoundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceSoundChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSoundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSoundChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSoundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSoundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSoundChange = null;
			}
			if(this.__cbOnceOwnerUnbindSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSoundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSoundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSoundChange = null;
			}
			this.__cbOnSoundChange = null;
			this.__cbOnceSoundChange = null;
		}
	}
	,listensSoundChange: function() {
		if(!(this.__cbOnSoundChange != null && this.__cbOnSoundChange.length > 0)) {
			if(this.__cbOnceSoundChange != null) {
				return this.__cbOnceSoundChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load sound asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/SoundAsset.hx", lineNumber : 27, className : "ceramic.SoundAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load sound " + backendPath,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/SoundAsset.hx", lineNumber : 42, className : "ceramic.SoundAsset", methodName : "load"});
		var handleBackendResponse = function(audio) {
			if(audio != null) {
				var prevSound = _gthis.get_sound();
				var newSound = new ceramic_Sound(audio);
				newSound.asset = _gthis;
				_gthis.set_sound(newSound);
				if(prevSound != null) {
					_gthis.emitReplaceSound(_gthis.get_sound(),prevSound);
					prevSound.asset = null;
					prevSound.destroy();
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load audio at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/SoundAsset.hx", lineNumber : 68, className : "ceramic.SoundAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		};
		var ext = ceramic_Path.extension(realPath);
		if(ext != null) {
			ext = ext.toLowerCase();
		}
		ceramic_App.app.backend.audio.load(realPath,{ stream : this.options.stream},function(audio) {
			if(audio != null || ext == "wav") {
				handleBackendResponse(audio);
			} else {
				ceramic_App.app.logger.warning("Failed to load " + backendPath + ". Try " + (ceramic_Path.withoutExtension(backendPath) + ".wav") + "...",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/SoundAsset.hx", lineNumber : 84, className : "ceramic.SoundAsset", methodName : "load"});
				realPath = ceramic_Path.withoutExtension(realPath) + ".wav";
				ceramic_App.app.backend.audio.load(realPath,{ stream : _gthis.options.stream},handleBackendResponse);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload sound (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/SoundAsset.hx", lineNumber : 108, className : "ceramic.SoundAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_sound() != null) {
			this.get_sound().destroy();
			this.set_sound(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceSound();
		this.offSoundChange();
	}
	,__class__: ceramic_SoundAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_sound:"set_sound",get_sound:"get_sound"})
});
var ceramic_SoundPlayer = {};
ceramic_SoundPlayer.__properties__ = {set_position:"set_position",get_position:"get_position",set_pitch:"set_pitch",get_pitch:"get_pitch",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"};
ceramic_SoundPlayer.pause = function(this1) {
	ceramic_App.app.backend.audio.pause(this1);
};
ceramic_SoundPlayer.resume = function(this1) {
	ceramic_App.app.backend.audio.resume(this1);
};
ceramic_SoundPlayer.stop = function(this1) {
	ceramic_App.app.backend.audio.stop(this1);
};
ceramic_SoundPlayer.get_volume = function(this1) {
	return ceramic_App.app.backend.audio.getVolume(this1);
};
ceramic_SoundPlayer.set_volume = function(this1,volume) {
	ceramic_App.app.backend.audio.setVolume(this1,volume);
	return volume;
};
ceramic_SoundPlayer.get_pan = function(this1) {
	return ceramic_App.app.backend.audio.getPan(this1);
};
ceramic_SoundPlayer.set_pan = function(this1,pan) {
	ceramic_App.app.backend.audio.setPan(this1,pan);
	return pan;
};
ceramic_SoundPlayer.get_pitch = function(this1) {
	return ceramic_App.app.backend.audio.getPitch(this1);
};
ceramic_SoundPlayer.set_pitch = function(this1,pitch) {
	ceramic_App.app.backend.audio.setPitch(this1,pitch);
	return pitch;
};
ceramic_SoundPlayer.get_position = function(this1) {
	return ceramic_App.app.backend.audio.getPosition(this1);
};
ceramic_SoundPlayer.set_position = function(this1,position) {
	ceramic_App.app.backend.audio.setPosition(this1,position);
	return position;
};
ceramic_SoundPlayer.fadeOut = function(this1,duration) {
	if(ceramic_App.app.backend.audio.getVolume(this1) == 0) {
		ceramic_App.app.backend.audio.stop(this1);
		return;
	}
	var tween = ceramic_Tween.start(null,ceramic_Easing.LINEAR,duration,ceramic_App.app.backend.audio.getVolume(this1),0,function(value,time) {
		ceramic_App.app.backend.audio.setVolume(this1,value);
	});
	tween.onceComplete(null,function() {
		ceramic_App.app.backend.audio.stop(this1);
	});
};
var ceramic_Systems = function() {
	this._udpatingSystems = [];
	this.lateUpdateOrdered = [];
	this.earlyUpdateOrdered = [];
	this.lateUpdateOrderDirty = false;
	this.earlyUpdateOrderDirty = false;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Systems"] = ceramic_Systems;
ceramic_Systems.__name__ = "ceramic.Systems";
ceramic_Systems.sortSystemsByEarlyUpdateOrder = function(a,b) {
	if(a.earlyUpdateOrder > b.earlyUpdateOrder) {
		return 1;
	} else if(a.earlyUpdateOrder < b.earlyUpdateOrder) {
		return -1;
	} else {
		return 0;
	}
};
ceramic_Systems.sortSystemsByLateUpdateOrder = function(a,b) {
	if(a.lateUpdateOrder > b.lateUpdateOrder) {
		return 1;
	} else if(a.lateUpdateOrder < b.lateUpdateOrder) {
		return -1;
	} else {
		return 0;
	}
};
ceramic_Systems.__super__ = ceramic_Entity;
ceramic_Systems.prototype = $extend(ceramic_Entity.prototype,{
	addSystem: function(system) {
		this.earlyUpdateOrdered.push(system);
		this.earlyUpdateOrderDirty = true;
		this.lateUpdateOrdered.push(system);
		this.lateUpdateOrderDirty = true;
	}
	,removeSystem: function(system) {
		HxOverrides.remove(this.earlyUpdateOrdered,system);
		this.earlyUpdateOrderDirty = true;
		HxOverrides.remove(this.lateUpdateOrdered,system);
		this.lateUpdateOrderDirty = true;
	}
	,earlyUpdate: function(delta) {
		if(this.earlyUpdateOrderDirty) {
			haxe_ds_ArraySort.sort(this.earlyUpdateOrdered,ceramic_Systems.sortSystemsByEarlyUpdateOrder);
			this.earlyUpdateOrderDirty = false;
		}
		var len = this.earlyUpdateOrdered.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = this.earlyUpdateOrdered[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var system = this._udpatingSystems[i];
			system.emitBeginEarlyUpdate(delta);
			system.earlyUpdate(delta);
			system.emitEndEarlyUpdate(delta);
			ceramic_App.app.flushImmediate();
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = null;
		}
	}
	,lateUpdate: function(delta) {
		if(this.lateUpdateOrderDirty) {
			haxe_ds_ArraySort.sort(this.lateUpdateOrdered,ceramic_Systems.sortSystemsByLateUpdateOrder);
			this.lateUpdateOrderDirty = false;
		}
		var len = this.lateUpdateOrdered.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = this.lateUpdateOrdered[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var system = this._udpatingSystems[i];
			system.emitBeginLateUpdate(delta);
			system.lateUpdate(delta);
			system.emitEndLateUpdate(delta);
			ceramic_App.app.flushImmediate();
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = null;
		}
	}
	,get: function(name) {
		var _g = 0;
		var _g1 = this.earlyUpdateOrdered.length;
		while(_g < _g1) {
			var i = _g++;
			var system = this.earlyUpdateOrdered[i];
			if(system.name == name) {
				return system;
			}
		}
		return null;
	}
	,__class__: ceramic_Systems
});
var ceramic_Text = function() {
	this.maxLineDiff = -1;
	this.fitWidth = -1;
	this.align = ceramic_TextAlign.LEFT;
	this.preRenderedSize = -1;
	this.clipTextHeight = -1;
	this.clipTextWidth = -1;
	this.clipTextY = -1;
	this.clipTextX = -1;
	this.letterSpacing = 0.0;
	this.lineHeight = 1.0;
	this.pointSize = 20;
	this.content = "";
	this.color = 16777215;
	this.numLines = 1;
	this.glyphQuads = [];
	ceramic_Visual.call(this);
	this.set_font(ceramic_App.app.defaultFont);
};
$hxClasses["ceramic.Text"] = ceramic_Text;
ceramic_Text.__name__ = "ceramic.Text";
ceramic_Text.__super__ = ceramic_Visual;
ceramic_Text.prototype = $extend(ceramic_Visual.prototype,{
	emitGlyphQuadsChange: function() {
		var len = 0;
		if(this.__cbOnGlyphQuadsChange != null) {
			len += this.__cbOnGlyphQuadsChange.length;
		}
		if(this.__cbOnceGlyphQuadsChange != null) {
			len += this.__cbOnceGlyphQuadsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnGlyphQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnGlyphQuadsChange[ii];
					++i;
				}
			}
			if(this.__cbOnceGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceGlyphQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceGlyphQuadsChange[ii];
					var unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceGlyphQuadsChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGlyphQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "glyphQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offGlyphQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnOwnerUnbindGlyphQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnOwnerUnbindGlyphQuadsChange.push(null);
		}
		if(this.__cbOnGlyphQuadsChange == null) {
			this.__cbOnGlyphQuadsChange = [];
		}
		this.__cbOnGlyphQuadsChange.push(handle);
	}
	,onceGlyphQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "glyphQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offGlyphQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnceOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindGlyphQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnceOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindGlyphQuadsChange.push(null);
		}
		if(this.__cbOnceGlyphQuadsChange == null) {
			this.__cbOnceGlyphQuadsChange = [];
		}
		this.__cbOnceGlyphQuadsChange.push(handle);
	}
	,offGlyphQuadsChange: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnGlyphQuadsChange != null) {
				index = this.__cbOnGlyphQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnGlyphQuadsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGlyphQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGlyphQuadsChange.splice(index,1);
				}
			}
			if(this.__cbOnceGlyphQuadsChange != null) {
				index = this.__cbOnceGlyphQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnceGlyphQuadsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGlyphQuadsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGlyphQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGlyphQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGlyphQuadsChange = null;
			}
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGlyphQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGlyphQuadsChange = null;
			}
			this.__cbOnGlyphQuadsChange = null;
			this.__cbOnceGlyphQuadsChange = null;
		}
	}
	,listensGlyphQuadsChange: function() {
		if(!(this.__cbOnGlyphQuadsChange != null && this.__cbOnGlyphQuadsChange.length > 0)) {
			if(this.__cbOnceGlyphQuadsChange != null) {
				return this.__cbOnceGlyphQuadsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_numLines: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return this.numLines;
	}
	,set_color: function(color) {
		if(this.color == color) {
			return color;
		}
		this.color = color;
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.color = color;
			}
		}
		return color;
	}
	,set_content: function(content) {
		if(this.content == content) {
			return content;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.content = content;
		return content;
	}
	,set_pointSize: function(pointSize) {
		if(this.pointSize == pointSize) {
			return pointSize;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.pointSize = pointSize;
		return pointSize;
	}
	,set_lineHeight: function(lineHeight) {
		if(this.lineHeight == lineHeight) {
			return lineHeight;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.lineHeight = lineHeight;
		return lineHeight;
	}
	,set_letterSpacing: function(letterSpacing) {
		if(this.letterSpacing == letterSpacing) {
			return letterSpacing;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.letterSpacing = letterSpacing;
		return letterSpacing;
	}
	,set_font: function(font) {
		if(font == null) {
			font = ceramic_App.app.defaultFont;
		}
		if(this.font == font) {
			return font;
		}
		if(this.font != null) {
			this.font.offDestroy($bind(this,this.fontDestroyed));
			if(this.font.asset != null) {
				this.font.asset.release();
			}
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.font = font;
		if(this.font != null) {
			this.font.onDestroy(this,$bind(this,this.fontDestroyed));
			if(this.font.asset != null) {
				this.font.asset.retain();
			}
		}
		return font;
	}
	,set_clipTextX: function(clipTextX) {
		if(this.clipTextX == clipTextX) {
			return clipTextX;
		}
		this.clipTextX = clipTextX;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextX;
	}
	,set_clipTextY: function(clipTextY) {
		if(this.clipTextY == clipTextY) {
			return clipTextY;
		}
		this.clipTextY = clipTextY;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextY;
	}
	,set_clipTextWidth: function(clipTextWidth) {
		if(this.clipTextWidth == clipTextWidth) {
			return clipTextWidth;
		}
		this.clipTextWidth = clipTextWidth;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextWidth;
	}
	,set_clipTextHeight: function(clipTextHeight) {
		if(this.clipTextHeight == clipTextHeight) {
			return clipTextHeight;
		}
		this.clipTextHeight = clipTextHeight;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextHeight;
	}
	,clipText: function(x,y,width,height) {
		this.set_clipTextX(x);
		this.set_clipTextY(y);
		this.set_clipTextWidth(width);
		this.set_clipTextHeight(height);
	}
	,set_preRenderedSize: function(preRenderedSize) {
		if(this.preRenderedSize == preRenderedSize) {
			return preRenderedSize;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		if(this.preRenderedSize <= 0 && preRenderedSize > 0) {
			ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.handleTexturesDensityChange));
		}
		if(this.preRenderedSize > 0 && preRenderedSize <= 0) {
			ceramic_App.app.screen.offTexturesDensityChange($bind(this,this.handleTexturesDensityChange));
		}
		this.preRenderedSize = preRenderedSize;
		return preRenderedSize;
	}
	,handleTexturesDensityChange: function(_,_1) {
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	,set_align: function(align) {
		if(this.align == align) {
			return align;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.align = align;
		return align;
	}
	,set_fitWidth: function(fitWidth) {
		if(this.fitWidth == fitWidth) {
			return fitWidth;
		}
		this.fitWidth = fitWidth;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return fitWidth;
	}
	,set_maxLineDiff: function(maxLineDiff) {
		if(this.maxLineDiff == maxLineDiff) {
			return maxLineDiff;
		}
		this.maxLineDiff = maxLineDiff;
		if(this.fitWidth != -1) {
			this.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return maxLineDiff;
	}
	,set_depth: function(depth) {
		if(this.depth == depth) {
			return depth;
		}
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.set_depth(depth);
			}
		}
		return ceramic_Visual.prototype.set_depth.call(this,depth);
	}
	,get_width: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_width.call(this);
	}
	,scaleWidth: function(targetWidth) {
		if(this._height == targetWidth) {
			return;
		}
		this.set_scaleX(targetWidth / this._width);
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,get_height: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_height.call(this);
	}
	,scaleHeight: function(targetHeight) {
		if(this._height == targetHeight) {
			return;
		}
		this.set_scaleY(targetHeight / this._height);
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,set_blending: function(blending) {
		if(this.blending == blending) {
			return blending;
		}
		this.blending = blending;
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.set_blending(blending);
			}
		}
		return blending;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				this.glyphQuads[i].destroy();
			}
			this.glyphQuads = null;
		}
	}
	,computeContent: function() {
		var _gthis = this;
		if(this.font == null) {
			this.set_width(0);
			this.set_height(0);
			this.contentDirty = false;
			return;
		}
		this.numLines = this.computeGlyphQuads(this.fitWidth,this.maxLineDiff);
		this.contentDirty = false;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		var scaledPreRenderedSize = this.preRenderedSize * ceramic_App.app.screen.get_texturesDensity() | 0;
		var tmp;
		if(scaledPreRenderedSize > 0) {
			var _this = this.font;
			tmp = _this.fontData.distanceField != null && _this.fontData.distanceField.fieldType == "msdf";
		} else {
			tmp = false;
		}
		if(tmp && this.font.needsToPreRenderAtSize(scaledPreRenderedSize)) {
			this.font.preRenderAtSize(scaledPreRenderedSize,function() {
				_gthis.contentDirty = true;
				ceramic_App.app.visualsContentDirty = true;
			});
		}
		this.emitGlyphQuadsChange();
	}
	,computeGlyphQuads: function(fitWidth,maxLineDiff,fixedNumLines) {
		if(fixedNumLines == null) {
			fixedNumLines = -1;
		}
		var x = 0.0;
		var y = 0.0;
		var xVisible = 0.0;
		var sizeFactor = this.pointSize / this.font.fontData.pointSize;
		var char = null;
		var code = -1;
		var prevChar = null;
		var prevCode = -1;
		var i = 0;
		var glyph = null;
		var lineWidths = [];
		var lineQuads = [[]];
		var usedQuads = 0;
		var isLineBreak = false;
		var isWhiteSpace = false;
		var justDidBreakToFit = false;
		var hasSpaceInLine = 0;
		var wasWhiteSpace = false;
		var numCharsBeforeLine = 0;
		var addTrailingSpace = false;
		var quadX = 0;
		var quadY = 0;
		var quadWidth = 0;
		var quadHeight = 0;
		var quadClip = 0;
		var hasClipping = false;
		if(this.clipTextX != -1 && this.clipTextY != -1 && this.clipTextWidth != -1 && this.clipTextHeight != -1) {
			hasClipping = true;
		}
		var scaledPreRenderedSize = this.preRenderedSize * ceramic_App.app.screen.get_texturesDensity() | 0;
		var usePrerenderedSize;
		if(scaledPreRenderedSize > 0) {
			var _this = this.font;
			usePrerenderedSize = _this.fontData.distanceField != null && _this.fontData.distanceField.fieldType == "msdf";
		} else {
			usePrerenderedSize = false;
		}
		var usePrerenderedSize1 = usePrerenderedSize && !this.font.needsToPreRenderAtSize(scaledPreRenderedSize);
		var content = this.content;
		if(content == "" || content.length > 0 && content.charAt(content.length - 1) == "\n") {
			addTrailingSpace = true;
			content += " ";
		}
		var len = content.length;
		while(i < len && usedQuads < len * 2) {
			prevChar = char;
			prevCode = code;
			char = content.charAt(i);
			code = HxOverrides.cca(char,0);
			isLineBreak = char == "\n";
			isWhiteSpace = char == " ";
			if(isWhiteSpace) {
				++hasSpaceInLine;
			}
			if(isLineBreak || isWhiteSpace || i == len - 1) {
				if(!justDidBreakToFit && fitWidth >= 0 && xVisible > 1 && xVisible > fitWidth - 1 && hasSpaceInLine > 0) {
					justDidBreakToFit = true;
					--hasSpaceInLine;
					while(i > 0) {
						--i;
						char = content.charAt(i);
						code = HxOverrides.cca(char,0);
						if(i > 0) {
							prevChar = content.charAt(i - 1);
							prevCode = HxOverrides.cca(prevChar,0);
						} else {
							prevChar = null;
							prevCode = -1;
						}
						glyph = this.font.fontData.chars.h[code];
						if(prevChar != null) {
							var map = this.font.fontData.kernings.h[prevCode];
							x -= (map != null && map.h.hasOwnProperty(code) ? map.h[code] : 0) * sizeFactor;
						}
						if(glyph != null) {
							x -= glyph.xAdvance * sizeFactor + this.letterSpacing;
						}
						if(lineQuads[lineQuads.length - 1].length > 0) {
							--usedQuads;
							lineQuads[lineQuads.length - 1].pop();
						} else {
							break;
						}
						if(char == " ") {
							char = "\n";
							glyph = this.font.fontData.chars.h[10];
							code = HxOverrides.cca(char,0);
							--hasSpaceInLine;
							isLineBreak = true;
							isWhiteSpace = false;
							break;
						}
					}
				} else {
					justDidBreakToFit = false;
				}
			}
			if(isLineBreak) {
				hasSpaceInLine = 0;
				prevChar = null;
				prevCode = -1;
				++i;
				numCharsBeforeLine = i;
				y += this.lineHeight * this.font.fontData.lineHeight * sizeFactor;
				lineWidths.push(x + (glyph != null ? (glyph.xOffset + glyph.width - glyph.xAdvance) * sizeFactor - this.letterSpacing : 0));
				lineQuads.push([]);
				x = 0;
				xVisible = 0;
				continue;
			}
			glyph = this.font.fontData.chars.h[code];
			if(glyph == null) {
				++i;
				continue;
			}
			if(prevChar != null) {
				var map1 = this.font.fontData.kernings.h[prevCode];
				x += (map1 != null && map1.h.hasOwnProperty(code) ? map1.h[code] : 0) * sizeFactor;
			}
			quadX = x + glyph.xOffset * sizeFactor;
			quadY = y + glyph.yOffset * sizeFactor;
			quadWidth = glyph.width * sizeFactor;
			quadHeight = glyph.height * sizeFactor;
			quadClip = 0;
			if(hasClipping) {
				if(quadX >= this.clipTextX + this.clipTextWidth) {
					quadClip = 2;
				} else if(quadX + quadWidth < this.clipTextX) {
					quadClip = 2;
				} else if(quadY >= this.clipTextY + this.clipTextHeight) {
					quadClip = 2;
				} else if(quadY + quadHeight < this.clipTextY) {
					quadClip = 2;
				} else if(this.clipTextX > quadX && this.clipTextX <= quadX + quadWidth) {
					quadClip = 1;
				} else if(this.clipTextY > quadY && this.clipTextY <= quadY + quadHeight) {
					quadClip = 1;
				} else if(this.clipTextX + this.clipTextWidth > quadX && this.clipTextX + this.clipTextWidth <= quadX + quadWidth) {
					quadClip = 1;
				} else if(this.clipTextY + this.clipTextHeight > quadY && this.clipTextY + this.clipTextHeight <= quadY + quadHeight) {
					quadClip = 1;
				}
			}
			var quad = usedQuads < this.glyphQuads.length ? this.glyphQuads[usedQuads] : null;
			if(quad == null) {
				quad = new ceramic_GlyphQuad();
				if(quad.inheritAlpha != true) {
					quad.inheritAlpha = true;
					quad.visibilityDirty = true;
					if(quad.children != null) {
						var _g = 0;
						var _g1 = quad.children.length;
						while(_g < _g1) {
							var i1 = _g++;
							var child = quad.children[i1];
							child.visibilityDirty = true;
							if(child.children != null) {
								var _g2 = 0;
								var _g3 = child.children.length;
								while(_g2 < _g3) {
									var i2 = _g2++;
									var child1 = child.children[i2];
									child1.set_visibilityDirty(true);
								}
							}
						}
					}
				}
				this.glyphQuads.push(quad);
				this.add(quad);
			}
			++usedQuads;
			quad.char = char;
			quad.code = code;
			quad.index = i;
			quad.set_visible(quadClip != 2);
			quad.transparent = false;
			quad.posInLine = i - numCharsBeforeLine;
			quad.line = lineQuads.length - 1;
			var texture = usePrerenderedSize1 ? this.font.preRenderedPages.h[scaledPreRenderedSize].h[glyph.page] : this.font.pages.h[glyph.page];
			if(quad.texture != texture) {
				if(quad.texture != null) {
					quad.texture.offDestroy($bind(quad,quad.textureDestroyed));
					if(quad.texture.asset != null) {
						quad.texture.asset.release();
					}
				}
				quad.texture = texture;
				if(texture == null) {
					quad.frameX = -1;
					quad.frameY = -1;
					if(quad.frameWidth != -1) {
						quad.frameWidth = -1;
					}
					if(quad.frameHeight != -1) {
						quad.frameHeight = -1;
					}
				} else if(quad.tile != null) {
					quad.frameX = quad.tile.frameX;
					quad.frameY = quad.tile.frameY;
					var frameWidth = quad.tile.frameWidth;
					if(quad.frameWidth != frameWidth) {
						quad.frameWidth = frameWidth;
						if(frameWidth != -1) {
							quad.set_width(frameWidth);
						}
					}
					var frameHeight = quad.tile.frameHeight;
					if(quad.frameHeight != frameHeight) {
						quad.frameHeight = frameHeight;
						if(frameHeight != -1) {
							quad.set_height(frameHeight);
						}
					}
				} else {
					quad.frameX = 0;
					quad.frameY = 0;
					var frameWidth1 = texture.width;
					if(quad.frameWidth != frameWidth1) {
						quad.frameWidth = frameWidth1;
						if(frameWidth1 != -1) {
							quad.set_width(frameWidth1);
						}
					}
					var frameHeight1 = texture.height;
					if(quad.frameHeight != frameHeight1) {
						quad.frameHeight = frameHeight1;
						if(frameHeight1 != -1) {
							quad.set_height(frameHeight1);
						}
					}
					texture.onDestroy(quad,$bind(quad,quad.textureDestroyed));
					if(texture.asset != null) {
						texture.asset.retain();
					}
				}
			}
			quad.set_shader(!usePrerenderedSize1 && this.font.pageShaders != null ? this.font.pageShaders.h[glyph.page] : null);
			quad.color = this.color;
			quad.set_depth(this.depth);
			quad.set_blending(this.blending);
			quad.glyphX = x;
			quad.glyphY = y;
			quad.glyphAdvance = glyph.xAdvance * sizeFactor + this.letterSpacing;
			quad.glyph = glyph;
			if(quadClip == 1) {
				var clippedQuadX = Math.max(this.clipTextX,quadX);
				var clippedQuadY = Math.max(this.clipTextY,quadY);
				var clippedQuadWidth = Math.min(this.clipTextX + this.clipTextWidth,quadX + quadWidth) - clippedQuadX;
				var clippedQuadHeight = Math.min(this.clipTextY + this.clipTextHeight,quadY + quadHeight) - clippedQuadY;
				var clippedFrameX;
				var clippedFrameY;
				var clippedFrameWidth;
				var clippedFrameHeight;
				if(usePrerenderedSize1) {
					var originalTexture = this.font.pages.h[glyph.page];
					clippedFrameX = glyph.x * quad.texture.width / originalTexture.width;
					clippedFrameY = glyph.y * quad.texture.height / originalTexture.height;
					clippedFrameWidth = glyph.width * quad.texture.width / originalTexture.width;
					clippedFrameHeight = glyph.height * quad.texture.height / originalTexture.height;
				} else {
					clippedFrameX = glyph.x / quad.texture.density;
					clippedFrameY = glyph.y / quad.texture.density;
					clippedFrameWidth = glyph.width / quad.texture.density;
					clippedFrameHeight = glyph.height / quad.texture.density;
				}
				var clippedFrameXOffset = (clippedQuadX - quadX) * clippedFrameWidth / quadWidth;
				clippedFrameX += clippedFrameXOffset;
				clippedFrameWidth -= clippedFrameXOffset + (quadX + quadWidth - clippedQuadX - clippedQuadWidth) * clippedFrameWidth / quadWidth;
				var clippedFrameYOffset = (clippedQuadY - quadY) * clippedFrameHeight / quadHeight;
				clippedFrameY += clippedFrameYOffset;
				clippedFrameHeight -= clippedFrameYOffset + (quadY + quadHeight - clippedQuadY - clippedQuadHeight) * clippedFrameHeight / quadHeight;
				quad.frameX = clippedFrameX;
				quad.frameY = clippedFrameY;
				if(quad.frameWidth != clippedFrameWidth) {
					quad.frameWidth = clippedFrameWidth;
					if(clippedFrameWidth != -1) {
						quad.set_width(clippedFrameWidth);
					}
				}
				if(quad.frameHeight != clippedFrameHeight) {
					quad.frameHeight = clippedFrameHeight;
					if(clippedFrameHeight != -1) {
						quad.set_height(clippedFrameHeight);
					}
				}
				quad.set_x(clippedQuadX);
				quad.set_y(clippedQuadY);
				quad.set_width(clippedQuadWidth);
				quad.set_height(clippedQuadHeight);
			} else {
				if(usePrerenderedSize1) {
					var originalTexture1 = this.font.pages.h[glyph.page];
					var frameWidth2 = glyph.width * quad.texture.width / originalTexture1.width;
					var frameHeight2 = glyph.height * quad.texture.height / originalTexture1.height;
					quad.frameX = glyph.x * quad.texture.width / originalTexture1.width;
					quad.frameY = glyph.y * quad.texture.height / originalTexture1.height;
					if(quad.frameWidth != frameWidth2) {
						quad.frameWidth = frameWidth2;
						if(frameWidth2 != -1) {
							quad.set_width(frameWidth2);
						}
					}
					if(quad.frameHeight != frameHeight2) {
						quad.frameHeight = frameHeight2;
						if(frameHeight2 != -1) {
							quad.set_height(frameHeight2);
						}
					}
				} else {
					var frameWidth3 = glyph.width / quad.texture.density;
					var frameHeight3 = glyph.height / quad.texture.density;
					quad.frameX = glyph.x / quad.texture.density;
					quad.frameY = glyph.y / quad.texture.density;
					if(quad.frameWidth != frameWidth3) {
						quad.frameWidth = frameWidth3;
						if(frameWidth3 != -1) {
							quad.set_width(frameWidth3);
						}
					}
					if(quad.frameHeight != frameHeight3) {
						quad.frameHeight = frameHeight3;
						if(frameHeight3 != -1) {
							quad.set_height(frameHeight3);
						}
					}
				}
				quad.set_x(quadX);
				quad.set_y(quadY);
				quad.set_width(quadWidth);
				quad.set_height(quadHeight);
			}
			quad.set_anchorX(0);
			quad.set_anchorY(0);
			lineQuads[lineQuads.length - 1].push(quad);
			xVisible = x + Math.max((glyph.xOffset + glyph.width) * sizeFactor,glyph.xAdvance * sizeFactor);
			x += glyph.xAdvance * sizeFactor + this.letterSpacing;
			++i;
		}
		if(x > 0) {
			lineWidths.push(x);
		}
		if(addTrailingSpace && usedQuads > 0) {
			var lastQuad = this.glyphQuads[usedQuads - 1];
			var lastLineWidth = lineWidths[lineWidths.length - 1];
			lastLineWidth -= lastQuad.glyphAdvance;
			lineWidths[lineWidths.length - 1] = lastLineWidth;
			lastQuad.glyphAdvance = 0;
			lastQuad.set_visible(false);
		}
		while(usedQuads < this.glyphQuads.length) {
			var quad = this.glyphQuads.pop();
			quad.destroy();
		}
		var maxLineWidth = 0.0;
		var _g = 0;
		var _g1 = lineWidths.length;
		while(_g < _g1) {
			var i = _g++;
			var lineWidth = lineWidths[i];
			maxLineWidth = Math.max(lineWidth,maxLineWidth);
		}
		this.set_width(Math.round(maxLineWidth * 1000) / 1000);
		this.set_height(Math.round(((lineWidths.length - 1) * this.lineHeight * this.font.fontData.lineHeight * sizeFactor + this.font.fontData.lineHeight * sizeFactor) * 1000) / 1000);
		switch(this.align._hx_index) {
		case 1:
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var diffX = maxLineWidth - lineWidths[i];
				var quads = lineQuads[i];
				var _g2 = 0;
				var _g3 = quads.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var quad = quads[j];
					quad.set_x(quad.x + diffX);
				}
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var diffX = (maxLineWidth - lineWidths[i]) * 0.5;
				var quads = lineQuads[i];
				var _g2 = 0;
				var _g3 = quads.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var quad = quads[j];
					quad.set_x(quad.x + diffX);
				}
			}
			break;
		default:
		}
		if((fixedNumLines == -1 || fixedNumLines == lineWidths.length) && fitWidth > 0 && maxLineDiff != -1 && fitWidth > this.pointSize) {
			var lineDiff = 0.0;
			var maxLineDiffValue = this.fitWidth * maxLineDiff;
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g3 = lineWidths.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var newDiff = lineWidths[i] - lineWidths[j];
					if(newDiff < 0) {
						newDiff = -newDiff;
					}
					if(newDiff > lineDiff) {
						lineDiff = newDiff;
					}
					if(lineDiff > maxLineDiffValue) {
						break;
					}
				}
			}
			if(lineDiff > maxLineDiffValue) {
				var numLines = this.computeGlyphQuads(fitWidth - this.pointSize,maxLineDiff,lineWidths.length);
				if(numLines > lineWidths.length) {
					this.computeGlyphQuads(fitWidth,-1,lineWidths.length);
				}
			}
		}
		return lineWidths.length;
	}
	,lineForYPosition: function(y) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var computedLineHeight = this.lineHeight * this.font.fontData.lineHeight * this.pointSize / this.font.fontData.pointSize;
		var maxLine = 0;
		if(computedLineHeight <= 0) {
			return 0;
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length > 0) {
			maxLine = glyphQuads[glyphQuads.length - 1].line;
		}
		var line = Math.floor(y / computedLineHeight);
		if(line < 0) {
			line = 0;
		}
		if(line > maxLine) {
			line = maxLine;
		}
		return line;
	}
	,posInLineForX: function(line,x) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		var pos = 0;
		if(glyphQuads.length == 0 || x == 0) {
			return pos;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.line == line) {
				if(glyphQuad.glyphX >= x) {
					return pos;
				} else if(glyphQuad.glyphX + glyphQuad.glyphAdvance >= x) {
					var distanceAfter = glyphQuad.glyphX + glyphQuad.glyphAdvance - x;
					var distanceBefore = x - glyphQuad.glyphX;
					if(distanceBefore <= distanceAfter) {
						return pos;
					}
				}
				++pos;
			} else if(glyphQuad.line > line) {
				break;
			}
		}
		return pos;
	}
	,indexForPosInLine: function(line,posInLine) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.line == line && glyphQuad.posInLine >= posInLine) {
				return glyphQuad.index + posInLine - glyphQuad.posInLine;
			} else if(glyphQuad.line > line) {
				return glyphQuad.index - glyphQuad.posInLine - (glyphQuad.line - line);
			}
		}
		return this.content.length;
	}
	,xPositionAtIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				if(glyphQuad.glyphX == 0 && glyphQuad.index > index) {
					if(i >= 1) {
						var glyphQuadBefore = glyphQuads[i - 1];
						return glyphQuadBefore.glyphX + glyphQuadBefore.glyphAdvance;
					} else {
						return 0;
					}
				} else {
					return glyphQuad.glyphX;
				}
			}
		}
		var lastGlyphQuad = glyphQuads[glyphQuads.length - 1];
		return lastGlyphQuad.glyphX + lastGlyphQuad.glyphAdvance;
	}
	,lineForIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				if(glyphQuad.posInLine > index - glyphQuad.index) {
					var currentLineIndex = glyphQuad.index - glyphQuad.posInLine;
					var line = glyphQuad.line;
					while(currentLineIndex > index) {
						--currentLineIndex;
						--line;
					}
					return line;
				} else {
					return glyphQuad.line;
				}
			}
		}
		return glyphQuads[glyphQuads.length - 1].line;
	}
	,posInLineForIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var computedTargetLine = false;
		var targetLine = -1;
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				var pos = glyphQuad.posInLine + index - glyphQuad.index;
				if(pos < 0) {
					var j = i - 1;
					while(j >= 0) {
						var glyphQuadBefore = glyphQuads[j];
						if(!computedTargetLine) {
							computedTargetLine = true;
							targetLine = this.lineForIndex(index);
						}
						if(glyphQuadBefore.line == targetLine) {
							pos = glyphQuadBefore.posInLine + index - glyphQuadBefore.index;
							return pos;
						} else if(glyphQuadBefore.line < targetLine) {
							return 0;
						}
						--j;
					}
				}
				if(pos >= 0) {
					return pos;
				} else {
					return 0;
				}
			}
		}
		return 0;
	}
	,fontDestroyed: function(_) {
		this.set_font(ceramic_App.app.defaultFont);
	}
	,toString: function() {
		if(this.id != null) {
			return "Text(" + this.id + " " + this.content + ")";
		} else {
			return "Text(" + this.content + ")";
		}
	}
	,unbindEvents: function() {
		ceramic_Visual.prototype.unbindEvents.call(this);
		this.offGlyphQuadsChange();
	}
	,__class__: ceramic_Text
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_maxLineDiff:"set_maxLineDiff",set_fitWidth:"set_fitWidth",set_align:"set_align",set_preRenderedSize:"set_preRenderedSize",set_clipTextHeight:"set_clipTextHeight",set_clipTextWidth:"set_clipTextWidth",set_clipTextY:"set_clipTextY",set_clipTextX:"set_clipTextX",set_font:"set_font",set_letterSpacing:"set_letterSpacing",set_lineHeight:"set_lineHeight",set_pointSize:"set_pointSize",set_content:"set_content",set_color:"set_color",get_numLines:"get_numLines"})
});
var ceramic_TextAlign = $hxEnums["ceramic.TextAlign"] = { __ename__:"ceramic.TextAlign",__constructs__:null
	,LEFT: {_hx_name:"LEFT",_hx_index:0,__enum__:"ceramic.TextAlign",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:1,__enum__:"ceramic.TextAlign",toString:$estr}
	,CENTER: {_hx_name:"CENTER",_hx_index:2,__enum__:"ceramic.TextAlign",toString:$estr}
};
ceramic_TextAlign.__constructs__ = [ceramic_TextAlign.LEFT,ceramic_TextAlign.RIGHT,ceramic_TextAlign.CENTER];
var ceramic_TextAsset = function(name,options) {
	this.unobservedText = null;
	this.textAutoruns = null;
	ceramic_Asset.call(this,"text",name,options);
};
$hxClasses["ceramic.TextAsset"] = ceramic_TextAsset;
ceramic_TextAsset.__name__ = "ceramic.TextAsset";
ceramic_TextAsset.__super__ = ceramic_Asset;
ceramic_TextAsset.prototype = $extend(ceramic_Asset.prototype,{
	get_text: function() {
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return this.unobservedText;
	}
	,set_text: function(text) {
		var prevValue = this.unobservedText;
		this.unobservedText = text;
		if(prevValue == text) {
			return text;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextChange(text,prevValue);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return text;
	}
	,invalidateText: function() {
		var value = this.unobservedText;
		this.emitTextChange(value,value);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app.onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,emitTextChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextChange != null) {
			len += this.__cbOnTextChange.length;
		}
		if(this.__cbOnceTextChange != null) {
			len += this.__cbOnceTextChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnTextChange[ii];
					++i;
				}
			}
			if(this.__cbOnceTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceTextChange[ii];
					var unbind = this.__cbOnceOwnerUnbindTextChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceTextChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnTextChange == null) {
			this.__cbOnTextChange = [];
		}
		this.__cbOnTextChange.push(handleCurrentPrevious);
	}
	,onceTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnceTextChange == null) {
			this.__cbOnceTextChange = [];
		}
		this.__cbOnceTextChange.push(handleCurrentPrevious);
	}
	,offTextChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextChange != null) {
				index = this.__cbOnTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextChange != null) {
				index = this.__cbOnceTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextChange = null;
			}
			this.__cbOnTextChange = null;
			this.__cbOnceTextChange = null;
		}
	}
	,listensTextChange: function() {
		if(!(this.__cbOnTextChange != null && this.__cbOnTextChange.length > 0)) {
			if(this.__cbOnceTextChange != null) {
				return this.__cbOnceTextChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load text asset if path is undefined.",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextAsset.hx", lineNumber : 20, className : "ceramic.TextAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load text " + backendPath,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextAsset.hx", lineNumber : 35, className : "ceramic.TextAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,null,function(text) {
			if(text != null) {
				_gthis.set_text(text);
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load text at path: " + _gthis.path,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextAsset.hx", lineNumber : 45, className : "ceramic.TextAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload text (file has changed)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextAsset.hx", lineNumber : 68, className : "ceramic.TextAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_text(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offTextChange();
	}
	,__class__: ceramic_TextAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var ceramic_TextInput = function() {
	this.delegate = null;
	this.selectionEnd = -1;
	this.selectionStart = -1;
	this.text = "";
	this.multiline = false;
	this.allowMovingCursor = false;
	this.invertedSelection = false;
	this.rshiftPressed = false;
	this.lshiftPressed = false;
	this.explicitPosLine = 0;
	this.explicitPosInLine = 0;
	this.inputActive = false;
};
$hxClasses["ceramic.TextInput"] = ceramic_TextInput;
ceramic_TextInput.__name__ = "ceramic.TextInput";
ceramic_TextInput.__interfaces__ = [tracker_Events];
ceramic_TextInput.prototype = {
	emitUpdate: function(text) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(text);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleText) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleText != null) {
					_gthis.offUpdate(handleText);
					handleText = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleText = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleText);
	}
	,onceUpdate: function(owner,handleText) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleText != null) {
					_gthis.offUpdate(handleText);
					handleText = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleText = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleText);
	}
	,offUpdate: function(handleText) {
		if(handleText != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleText);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleText);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitEnter: function() {
		var len = 0;
		if(this.__cbOnEnter != null) {
			len += this.__cbOnEnter.length;
		}
		if(this.__cbOnceEnter != null) {
			len += this.__cbOnceEnter.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnEnter.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnEnter[ii];
					++i;
				}
			}
			if(this.__cbOnceEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnceEnter.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceEnter[ii];
					var unbind = this.__cbOnceOwnerUnbindEnter[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceEnter = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEnter: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "enter" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEnter(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEnter == null) {
				this.__cbOnOwnerUnbindEnter = [];
			}
			this.__cbOnOwnerUnbindEnter.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEnter == null) {
				this.__cbOnOwnerUnbindEnter = [];
			}
			this.__cbOnOwnerUnbindEnter.push(null);
		}
		if(this.__cbOnEnter == null) {
			this.__cbOnEnter = [];
		}
		this.__cbOnEnter.push(handle);
	}
	,onceEnter: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "enter" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEnter(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEnter == null) {
				this.__cbOnceOwnerUnbindEnter = [];
			}
			this.__cbOnceOwnerUnbindEnter.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEnter == null) {
				this.__cbOnceOwnerUnbindEnter = [];
			}
			this.__cbOnceOwnerUnbindEnter.push(null);
		}
		if(this.__cbOnceEnter == null) {
			this.__cbOnceEnter = [];
		}
		this.__cbOnceEnter.push(handle);
	}
	,offEnter: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnEnter != null) {
				index = this.__cbOnEnter.indexOf(handle);
				if(index != -1) {
					this.__cbOnEnter.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEnter[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEnter.splice(index,1);
				}
			}
			if(this.__cbOnceEnter != null) {
				index = this.__cbOnceEnter.indexOf(handle);
				if(index != -1) {
					this.__cbOnceEnter.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEnter[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEnter.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEnter.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEnter[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEnter = null;
			}
			if(this.__cbOnceOwnerUnbindEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEnter.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEnter[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEnter = null;
			}
			this.__cbOnEnter = null;
			this.__cbOnceEnter = null;
		}
	}
	,listensEnter: function() {
		if(!(this.__cbOnEnter != null && this.__cbOnEnter.length > 0)) {
			if(this.__cbOnceEnter != null) {
				return this.__cbOnceEnter.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitEscape: function() {
		var len = 0;
		if(this.__cbOnEscape != null) {
			len += this.__cbOnEscape.length;
		}
		if(this.__cbOnceEscape != null) {
			len += this.__cbOnceEscape.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnEscape.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnEscape[ii];
					++i;
				}
			}
			if(this.__cbOnceEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnceEscape.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceEscape[ii];
					var unbind = this.__cbOnceOwnerUnbindEscape[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceEscape = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEscape: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "escape" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEscape(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEscape == null) {
				this.__cbOnOwnerUnbindEscape = [];
			}
			this.__cbOnOwnerUnbindEscape.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEscape == null) {
				this.__cbOnOwnerUnbindEscape = [];
			}
			this.__cbOnOwnerUnbindEscape.push(null);
		}
		if(this.__cbOnEscape == null) {
			this.__cbOnEscape = [];
		}
		this.__cbOnEscape.push(handle);
	}
	,onceEscape: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "escape" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEscape(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEscape == null) {
				this.__cbOnceOwnerUnbindEscape = [];
			}
			this.__cbOnceOwnerUnbindEscape.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEscape == null) {
				this.__cbOnceOwnerUnbindEscape = [];
			}
			this.__cbOnceOwnerUnbindEscape.push(null);
		}
		if(this.__cbOnceEscape == null) {
			this.__cbOnceEscape = [];
		}
		this.__cbOnceEscape.push(handle);
	}
	,offEscape: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnEscape != null) {
				index = this.__cbOnEscape.indexOf(handle);
				if(index != -1) {
					this.__cbOnEscape.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEscape[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEscape.splice(index,1);
				}
			}
			if(this.__cbOnceEscape != null) {
				index = this.__cbOnceEscape.indexOf(handle);
				if(index != -1) {
					this.__cbOnceEscape.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEscape[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEscape.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEscape.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEscape[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEscape = null;
			}
			if(this.__cbOnceOwnerUnbindEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEscape.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEscape[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEscape = null;
			}
			this.__cbOnEscape = null;
			this.__cbOnceEscape = null;
		}
	}
	,listensEscape: function() {
		if(!(this.__cbOnEscape != null && this.__cbOnEscape.length > 0)) {
			if(this.__cbOnceEscape != null) {
				return this.__cbOnceEscape.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitSelection: function(selectionStart,selectionEnd) {
		var len = 0;
		if(this.__cbOnSelection != null) {
			len += this.__cbOnSelection.length;
		}
		if(this.__cbOnceSelection != null) {
			len += this.__cbOnceSelection.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnSelection.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnSelection[ii];
					++i;
				}
			}
			if(this.__cbOnceSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnceSelection.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceSelection[ii];
					var unbind = this.__cbOnceOwnerUnbindSelection[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceSelection = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(selectionStart,selectionEnd);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSelection: function(owner,handleSelectionStartSelectionEnd) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "selection" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSelectionStartSelectionEnd != null) {
					_gthis.offSelection(handleSelectionStartSelectionEnd);
					handleSelectionStartSelectionEnd = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSelection == null) {
				this.__cbOnOwnerUnbindSelection = [];
			}
			this.__cbOnOwnerUnbindSelection.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSelectionStartSelectionEnd = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSelection == null) {
				this.__cbOnOwnerUnbindSelection = [];
			}
			this.__cbOnOwnerUnbindSelection.push(null);
		}
		if(this.__cbOnSelection == null) {
			this.__cbOnSelection = [];
		}
		this.__cbOnSelection.push(handleSelectionStartSelectionEnd);
	}
	,onceSelection: function(owner,handleSelectionStartSelectionEnd) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "selection" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSelectionStartSelectionEnd != null) {
					_gthis.offSelection(handleSelectionStartSelectionEnd);
					handleSelectionStartSelectionEnd = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSelection == null) {
				this.__cbOnceOwnerUnbindSelection = [];
			}
			this.__cbOnceOwnerUnbindSelection.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSelectionStartSelectionEnd = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSelection == null) {
				this.__cbOnceOwnerUnbindSelection = [];
			}
			this.__cbOnceOwnerUnbindSelection.push(null);
		}
		if(this.__cbOnceSelection == null) {
			this.__cbOnceSelection = [];
		}
		this.__cbOnceSelection.push(handleSelectionStartSelectionEnd);
	}
	,offSelection: function(handleSelectionStartSelectionEnd) {
		if(handleSelectionStartSelectionEnd != null) {
			var index;
			var unbind;
			if(this.__cbOnSelection != null) {
				index = this.__cbOnSelection.indexOf(handleSelectionStartSelectionEnd);
				if(index != -1) {
					this.__cbOnSelection.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSelection[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSelection.splice(index,1);
				}
			}
			if(this.__cbOnceSelection != null) {
				index = this.__cbOnceSelection.indexOf(handleSelectionStartSelectionEnd);
				if(index != -1) {
					this.__cbOnceSelection.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSelection[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSelection.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSelection.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSelection[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSelection = null;
			}
			if(this.__cbOnceOwnerUnbindSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSelection.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSelection[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSelection = null;
			}
			this.__cbOnSelection = null;
			this.__cbOnceSelection = null;
		}
	}
	,listensSelection: function() {
		if(!(this.__cbOnSelection != null && this.__cbOnSelection.length > 0)) {
			if(this.__cbOnceSelection != null) {
				return this.__cbOnceSelection.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitStop: function() {
		var len = 0;
		if(this.__cbOnStop != null) {
			len += this.__cbOnStop.length;
		}
		if(this.__cbOnceStop != null) {
			len += this.__cbOnceStop.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnStop.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnStop[ii];
					++i;
				}
			}
			if(this.__cbOnceStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnceStop.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceStop[ii];
					var unbind = this.__cbOnceOwnerUnbindStop[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceStop = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStop: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "stop" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offStop(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStop == null) {
				this.__cbOnOwnerUnbindStop = [];
			}
			this.__cbOnOwnerUnbindStop.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStop == null) {
				this.__cbOnOwnerUnbindStop = [];
			}
			this.__cbOnOwnerUnbindStop.push(null);
		}
		if(this.__cbOnStop == null) {
			this.__cbOnStop = [];
		}
		this.__cbOnStop.push(handle);
	}
	,onceStop: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "stop" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offStop(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStop == null) {
				this.__cbOnceOwnerUnbindStop = [];
			}
			this.__cbOnceOwnerUnbindStop.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStop == null) {
				this.__cbOnceOwnerUnbindStop = [];
			}
			this.__cbOnceOwnerUnbindStop.push(null);
		}
		if(this.__cbOnceStop == null) {
			this.__cbOnceStop = [];
		}
		this.__cbOnceStop.push(handle);
	}
	,offStop: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnStop != null) {
				index = this.__cbOnStop.indexOf(handle);
				if(index != -1) {
					this.__cbOnStop.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStop[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStop.splice(index,1);
				}
			}
			if(this.__cbOnceStop != null) {
				index = this.__cbOnceStop.indexOf(handle);
				if(index != -1) {
					this.__cbOnceStop.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStop[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStop.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStop.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStop[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStop = null;
			}
			if(this.__cbOnceOwnerUnbindStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStop.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStop[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStop = null;
			}
			this.__cbOnStop = null;
			this.__cbOnceStop = null;
		}
	}
	,listensStop: function() {
		if(!(this.__cbOnStop != null && this.__cbOnStop.length > 0)) {
			if(this.__cbOnceStop != null) {
				return this.__cbOnceStop.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,start: function(text,x,y,w,h,multiline,selectionStart,selectionEnd,allowMovingCursor,delegate) {
		if(allowMovingCursor == null) {
			allowMovingCursor = false;
		}
		if(selectionEnd == null) {
			selectionEnd = -1;
		}
		if(selectionStart == null) {
			selectionStart = -1;
		}
		if(multiline == null) {
			multiline = false;
		}
		if(this.inputActive) {
			this.stop();
		}
		this.inputActive = true;
		this.set_text(text);
		this.multiline = multiline;
		this.allowMovingCursor = allowMovingCursor;
		this.delegate = delegate;
		this.explicitPosInLine = 0;
		this.explicitPosLine = 0;
		this.invertedSelection = false;
		if(selectionStart < 0) {
			selectionStart = text.length;
		}
		if(selectionEnd < selectionStart) {
			selectionEnd = selectionStart;
		}
		this.selectionStart = selectionStart;
		this.selectionEnd = selectionEnd;
		ceramic_App.app.backend.textInput.start(text,x,y,w,h);
		this.emitUpdate(text);
		this.emitSelection(selectionStart,selectionEnd);
	}
	,stop: function() {
		if(!this.inputActive) {
			return;
		}
		this.inputActive = false;
		this.selectionStart = -1;
		this.selectionEnd = -1;
		this.invertedSelection = false;
		this.delegate = null;
		ceramic_App.app.backend.textInput.stop();
		this.emitStop();
	}
	,updateSelection: function(selectionStart,selectionEnd,inverted) {
		if(this.selectionStart != selectionStart || this.selectionEnd != selectionEnd) {
			this.selectionStart = selectionStart;
			this.selectionEnd = selectionEnd;
			if(inverted != null) {
				this.invertedSelection = inverted;
			}
			this.emitSelection(selectionStart,selectionEnd);
		}
	}
	,appendText: function(text) {
		var newText = "";
		if(this.selectionStart > 0) {
			newText += this.text.substring(0,this.selectionStart);
		}
		newText += text;
		newText += this.text.substring(this.selectionEnd);
		this.selectionStart += text.length;
		this.selectionEnd = this.selectionStart;
		this.invertedSelection = false;
		this.set_text(newText);
		this.emitUpdate(this.text);
		this.emitSelection(this.selectionStart,this.selectionEnd);
		this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
		this.explicitPosLine = this.lineForPos(this.selectionStart);
	}
	,space: function() {
		this.appendText(" ");
	}
	,backspace: function() {
		var eraseSelection = this.selectionEnd > this.selectionStart;
		var newText = "";
		if(this.selectionStart > 1) {
			newText += this.text.substring(0,eraseSelection ? this.selectionStart : this.selectionStart - 1);
		}
		newText += this.text.substring(this.selectionEnd);
		if(this.selectionStart > 0 && !eraseSelection) {
			this.selectionStart--;
		}
		this.selectionEnd = this.selectionStart;
		this.set_text(newText);
		this.emitUpdate(this.text);
		this.emitSelection(this.selectionStart,this.selectionEnd);
		this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
		this.explicitPosLine = this.lineForPos(this.selectionStart);
	}
	,moveLeft: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			if(this.invertedSelection) {
				if(this.selectionStart > 0) {
					this.selectionStart--;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			} else if(this.selectionEnd > this.selectionStart) {
				this.selectionEnd--;
				this.emitSelection(this.selectionStart,this.selectionEnd);
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			} else {
				if(this.selectionStart > 0) {
					this.invertedSelection = true;
					this.selectionStart--;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd > this.selectionStart) {
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart > 0) {
				this.selectionStart--;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
			this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
			this.explicitPosLine = this.lineForPos(this.selectionStart);
		}
	}
	,moveRight: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			var textLength = this.text.length;
			if(this.selectionStart == this.selectionEnd) {
				this.invertedSelection = false;
				if(this.selectionEnd < textLength) {
					this.selectionEnd++;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			} else if(this.invertedSelection) {
				this.selectionStart++;
				this.emitSelection(this.selectionStart,this.selectionEnd);
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			} else {
				if(this.selectionEnd < textLength) {
					this.selectionEnd++;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd > this.selectionStart) {
				this.selectionStart = this.selectionEnd;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart < this.text.length) {
				this.selectionStart++;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
			this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
			this.explicitPosLine = this.lineForPos(this.selectionStart);
		}
	}
	,moveUp: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			var startLine = this.lineForPos(this.selectionStart);
			var endLine = this.lineForPos(this.selectionEnd);
			if(!this.invertedSelection && endLine > startLine) {
				var offset = this.explicitPosInLine;
				var currentLine = endLine;
				if(this.delegate != null) {
					offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
				}
				var newPos = this.globalPosForLine(currentLine - 1,offset);
				this.selectionEnd = Math.max(this.selectionStart,newPos) | 0;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart > 0) {
				this.invertedSelection = true;
				if(startLine > 0) {
					var offset = this.explicitPosInLine;
					var currentLine = startLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine - 1,offset);
				} else {
					this.selectionStart = 0;
				}
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionStart > 0) {
				var currentLine = this.lineForPos(this.selectionStart);
				if(currentLine > 0) {
					var offset = this.explicitPosInLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine - 1,offset);
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else {
					this.selectionStart = 0;
					this.selectionEnd = 0;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else {
				this.selectionStart = 0;
				this.selectionEnd = 0;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		}
	}
	,moveDown: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		var textLength = this.text.length;
		if(this.lshiftPressed || this.rshiftPressed) {
			var startLine = this.lineForPos(this.selectionStart);
			var endLine = this.lineForPos(this.selectionEnd);
			if(!this.invertedSelection) {
				if(this.selectionEnd < textLength - 1) {
					var offset = this.explicitPosInLine;
					var currentLine = endLine;
					var numLines = this.numLines();
					if(currentLine < numLines - 1) {
						if(this.delegate != null) {
							offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
						}
						this.selectionEnd = this.globalPosForLine(currentLine + 1,offset);
					} else {
						this.selectionEnd = textLength;
					}
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength) {
					this.selectionEnd = textLength;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else if(this.invertedSelection) {
				if(endLine > startLine) {
					var offset = this.explicitPosInLine;
					var currentLine = startLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
					}
					var newPos = this.globalPosForLine(currentLine + 1,offset);
					this.selectionStart = Math.min(this.selectionEnd,newPos) | 0;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength - 1) {
					this.invertedSelection = false;
					var currentLine = startLine;
					var numLines = this.numLines();
					var offset = this.explicitPosInLine;
					if(currentLine < numLines - 1) {
						if(this.delegate != null) {
							offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
						}
						this.selectionEnd = this.globalPosForLine(currentLine + 1,offset);
					} else {
						this.selectionEnd = textLength;
					}
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength) {
					this.invertedSelection = false;
					this.selectionEnd = textLength;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd < textLength - 1) {
				var currentLine = this.lineForPos(this.selectionEnd);
				var numLines = this.numLines();
				if(currentLine < numLines - 1) {
					var offset = this.explicitPosInLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine + 1,offset);
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else {
					this.selectionStart = textLength;
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else {
				this.selectionStart = textLength;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		}
	}
	,enter: function() {
		this.emitEnter();
		if(!this.inputActive) {
			return;
		}
		if(this.multiline) {
			this.appendText("\n");
		}
	}
	,escape: function() {
		this.emitEscape();
		this.stop();
	}
	,lshiftDown: function() {
		this.lshiftPressed = true;
	}
	,lshiftUp: function() {
		this.lshiftPressed = false;
	}
	,rshiftDown: function() {
		this.rshiftPressed = true;
	}
	,rshiftUp: function() {
		this.rshiftPressed = false;
	}
	,posInCurrentLine: function(globalPos) {
		if(this.delegate != null) {
			return this.delegate.textInputPosInLineForIndex(globalPos);
		}
		var text = this.text;
		var posInLine = 0;
		while(globalPos > 0) {
			var char = text.charAt(globalPos);
			if(char == "\n" && posInLine > 0) {
				--posInLine;
				break;
			}
			--globalPos;
			++posInLine;
		}
		return posInLine;
	}
	,lineForPos: function(globalPos) {
		if(this.delegate != null) {
			return this.delegate.textInputLineForIndex(globalPos);
		}
		var text = this.text;
		var lineNumber = 0;
		var i = 0;
		while(i < globalPos) {
			var char = text.charAt(i);
			if(char == "\n") {
				++lineNumber;
			}
			++i;
		}
		return lineNumber;
	}
	,numLines: function() {
		if(this.delegate != null) {
			return this.delegate.textInputNumberOfLines();
		}
		return this.text.split("\n").length;
	}
	,globalPosForLine: function(lineNumber,lineOffset) {
		if(this.delegate != null) {
			return this.delegate.textInputIndexForPosInLine(lineNumber,lineOffset);
		}
		var text = this.text;
		var i = 0;
		var numChars = text.length;
		var currentLine = 0;
		while(i < numChars) {
			var c = text.charAt(i);
			if(currentLine == lineNumber) {
				if(lineOffset > 0) {
					if(c == "\n") {
						break;
					}
					--lineOffset;
				} else {
					break;
				}
			} else if(c == "\n") {
				++currentLine;
			}
			++i;
		}
		return i;
	}
	,set_text: function(text) {
		if(this.text == text) {
			return text;
		}
		this.text = text;
		var len = text.length;
		var selectionStart = this.selectionStart;
		var selectionEnd = this.selectionEnd;
		if(selectionEnd > len) {
			selectionEnd = len;
		}
		if(selectionStart > selectionEnd) {
			selectionStart = selectionEnd;
		}
		this.updateSelection(selectionStart,selectionEnd);
		return text;
	}
	,unbindEvents: function() {
		this.offUpdate();
		this.offEnter();
		this.offEscape();
		this.offSelection();
		this.offStop();
	}
	,__class__: ceramic_TextInput
	,__properties__: {set_text:"set_text"}
};
var ceramic_TextInputDelegate = function() { };
$hxClasses["ceramic.TextInputDelegate"] = ceramic_TextInputDelegate;
ceramic_TextInputDelegate.__name__ = "ceramic.TextInputDelegate";
ceramic_TextInputDelegate.__isInterface__ = true;
ceramic_TextInputDelegate.prototype = {
	__class__: ceramic_TextInputDelegate
};
var ceramic_TextureFilter = $hxEnums["ceramic.TextureFilter"] = { __ename__:"ceramic.TextureFilter",__constructs__:null
	,LINEAR: {_hx_name:"LINEAR",_hx_index:0,__enum__:"ceramic.TextureFilter",toString:$estr}
	,NEAREST: {_hx_name:"NEAREST",_hx_index:1,__enum__:"ceramic.TextureFilter",toString:$estr}
};
ceramic_TextureFilter.__constructs__ = [ceramic_TextureFilter.LINEAR,ceramic_TextureFilter.NEAREST];
var ceramic_TextureTile = function(texture,frameX,frameY,frameWidth,frameHeight) {
	this.texture = texture;
	this.frameX = frameX;
	this.frameY = frameY;
	this.frameWidth = frameWidth;
	this.frameHeight = frameHeight;
};
$hxClasses["ceramic.TextureTile"] = ceramic_TextureTile;
ceramic_TextureTile.__name__ = "ceramic.TextureTile";
ceramic_TextureTile.prototype = {
	toString: function() {
		return "" + Std.string({ texture : this.texture, frameX : this.frameX, frameY : this.frameY, frameWidth : this.frameWidth, frameHeight : this.frameHeight});
	}
	,__class__: ceramic_TextureTile
};
var ceramic_TextureTilePacker = function(autoRender,maxPixelTextureWidth,maxPixelTextureHeight,padWidth,padHeight,margin) {
	if(margin == null) {
		margin = 1;
	}
	if(padHeight == null) {
		padHeight = 16;
	}
	if(padWidth == null) {
		padWidth = 16;
	}
	if(maxPixelTextureHeight == null) {
		maxPixelTextureHeight = -1;
	}
	if(maxPixelTextureWidth == null) {
		maxPixelTextureWidth = -1;
	}
	this.maxPixelTextureHeight = 0;
	this.maxPixelTextureWidth = 0;
	this.numRows = 0;
	this.numCols = 0;
	this.nextPacker = null;
	ceramic_Entity.call(this);
	this.padWidth = padWidth;
	this.padHeight = padHeight;
	this.margin = margin;
	this.maxPixelTextureWidth = maxPixelTextureWidth;
	this.maxPixelTextureHeight = maxPixelTextureHeight;
	if(maxPixelTextureWidth == -1) {
		maxPixelTextureWidth = 2048 / ceramic_App.app.screen.get_texturesDensity() | 0;
	}
	if(maxPixelTextureHeight == -1) {
		maxPixelTextureHeight = 2048 / ceramic_App.app.screen.get_texturesDensity() | 0;
	}
	var textureWidth = Math.min(maxPixelTextureWidth,2048 / ceramic_App.app.screen.get_texturesDensity()) | 0;
	var textureHeight = Math.min(maxPixelTextureHeight,2048 / ceramic_App.app.screen.get_texturesDensity()) | 0;
	this.texture = new ceramic_RenderTexture(textureWidth,textureHeight);
	if(autoRender) {
		this.texture.autoRender = true;
		this.texture.clearOnRender = true;
	} else {
		this.texture.autoRender = false;
		this.texture.clearOnRender = false;
	}
	this.areas = [];
	var texWidth = this.texture.width;
	var texHeight = this.texture.height;
	var x = margin;
	var y = margin;
	while(y + padHeight < texHeight) {
		while(x + padWidth < texWidth) {
			this.areas.push(null);
			x += padWidth + margin * 2;
			if(this.numRows == 0) {
				this.numCols++;
			}
		}
		x = 0;
		y += padHeight + margin * 2;
		this.numRows++;
	}
};
$hxClasses["ceramic.TextureTilePacker"] = ceramic_TextureTilePacker;
ceramic_TextureTilePacker.__name__ = "ceramic.TextureTilePacker";
ceramic_TextureTilePacker.__super__ = ceramic_Entity;
ceramic_TextureTilePacker.prototype = $extend(ceramic_Entity.prototype,{
	destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.nextPacker != null) {
			this.nextPacker.destroy();
			this.nextPacker = null;
		}
		this.texture.destroy();
		this.texture = null;
		this.areas = null;
	}
	,getTileAtPosition: function(col,row) {
		return this.areas[row * this.numCols + col];
	}
	,setTileAtPosition: function(col,row,tile) {
		this.areas[row * this.numCols + col] = tile;
	}
	,allocTile: function(width,height) {
		var texWidth = this.texture.width;
		var texHeight = this.texture.height;
		var padWidthWithMargin = this.padWidth + this.margin * 2;
		var padHeightWithMargin = this.padHeight + this.margin * 2;
		var maxWidth = padWidthWithMargin * this.numCols - this.margin * 2;
		var maxHeight = padHeightWithMargin * this.numRows - this.margin * 2;
		if(width > maxWidth || height > maxHeight) {
			ceramic_App.app.logger.warning("Cannot alloc tile of " + width + " x " + height + " because this is bigger than " + maxWidth + " x " + maxHeight,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextureTilePacker.hx", lineNumber : 121, className : "ceramic.TextureTilePacker", methodName : "allocTile"});
			return null;
		}
		var widthInCols = this.padWidth;
		var requiredCols = 1;
		while(widthInCols < width) {
			++requiredCols;
			widthInCols += this.padWidth + this.margin * 2;
		}
		var heightInRows = this.padHeight;
		var requiredRows = 1;
		while(heightInRows < height) {
			++requiredRows;
			heightInRows += this.padHeight + this.margin * 2;
		}
		var _g = 0;
		var _g1 = this.numRows - requiredRows + 1;
		while(_g < _g1) {
			var row = _g++;
			var _g2 = 0;
			var _g3 = this.numCols - requiredCols + 1;
			while(_g2 < _g3) {
				var col = _g2++;
				var areaAvailable = true;
				var _g4 = row;
				var _g5 = row + requiredRows;
				while(_g4 < _g5) {
					var r = _g4++;
					var _g6 = col;
					var _g7 = col + requiredCols;
					while(_g6 < _g7) {
						var c = _g6++;
						if(this.areas[r * this.numCols + c] != null) {
							areaAvailable = false;
							break;
						}
					}
					if(!areaAvailable) {
						break;
					}
				}
				if(areaAvailable) {
					var tile = new ceramic__$TextureTilePacker_PackedTextureTile(this.texture,col * padWidthWithMargin,row * padHeightWithMargin,width,height);
					tile.col = col;
					tile.row = row;
					tile.usedCols = requiredCols;
					tile.usedRows = requiredRows;
					var _g8 = row;
					var _g9 = row + requiredRows;
					while(_g8 < _g9) {
						var r1 = _g8++;
						var _g10 = col;
						var _g11 = col + requiredCols;
						while(_g10 < _g11) {
							var c1 = _g10++;
							this.areas[r1 * this.numCols + c1] = tile;
						}
					}
					return tile;
				}
			}
		}
		if(this.nextPacker == null) {
			this.nextPacker = new ceramic_TextureTilePacker(this.texture.autoRender,this.maxPixelTextureWidth,this.maxPixelTextureHeight,this.padWidth,this.padHeight,this.margin);
		}
		return this.nextPacker.allocTile(width,height);
	}
	,releaseTile: function(tile) {
		var _gthis = this;
		ceramic_App.app.logger.info("release tile " + Std.string(tile),{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextureTilePacker.hx", lineNumber : 196, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
		if(!((tile) instanceof ceramic__$TextureTilePacker_PackedTextureTile)) {
			throw haxe_Exception.thrown("Cannot release tile: " + Std.string(tile) + ".");
		}
		var packedTile = tile;
		var packer = this;
		while(packer != null && packer.texture != packedTile.texture) packer = packer.nextPacker;
		if(packer == null) {
			ceramic_App.app.logger.warning("Failed to release tile: " + Std.string(packedTile) + " (it doesn't belong to this packer)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextureTilePacker.hx", lineNumber : 211, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
			return;
		}
		ceramic_App.app.onceUpdate(this,function(_) {
			ceramic_App.app.onceUpdate(_gthis,function(_) {
				var didRelease = false;
				var _g = packedTile.row;
				var _g1 = packedTile.row + packedTile.usedRows;
				while(_g < _g1) {
					var r = _g++;
					var _g2 = packedTile.col;
					var _g3 = packedTile.col + packedTile.usedCols;
					while(_g2 < _g3) {
						var c = _g2++;
						if(packer.areas[r * packer.numCols + c] == packedTile) {
							didRelease = true;
							packer.areas[r * packer.numCols + c] = null;
						}
					}
				}
				packedTile.texture = null;
				if(!didRelease) {
					ceramic_App.app.logger.warning("Failed to release tile: " + Std.string(packedTile) + " (did not find it)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TextureTilePacker.hx", lineNumber : 232, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
				}
			});
		});
	}
	,stamp: function(tile,visual,done) {
		var stampVisual = new ceramic_Quad();
		stampVisual.set_anchorX(0);
		stampVisual.set_anchorY(0);
		var height = tile.frameHeight + this.margin * 2;
		stampVisual.set_width(tile.frameWidth + this.margin * 2);
		stampVisual.set_height(height);
		var y = tile.frameY - this.margin;
		stampVisual.set_x(tile.frameX - this.margin);
		stampVisual.set_y(y);
		stampVisual.set_blending(4);
		if(stampVisual.inheritAlpha != false) {
			stampVisual.inheritAlpha = false;
			stampVisual.visibilityDirty = true;
			if(stampVisual.children != null) {
				var _g = 0;
				var _g1 = stampVisual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = stampVisual.children[i];
					child.visibilityDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_visibilityDirty(true);
						}
					}
				}
			}
		}
		stampVisual.set_alpha(0);
		stampVisual.color = 16777215;
		var prevTransform = visual.transform;
		var prevParent = visual.parent;
		if(prevParent != null) {
			prevParent.remove(visual);
		}
		stampVisual.add(visual);
		visual.set_transform(new ceramic_Transform());
		var _this = visual.transform;
		_this.tx += this.margin;
		_this.ty += this.margin;
		_this.changedDirty = true;
		var dynTexture = tile.texture;
		dynTexture.stamp(stampVisual,function() {
			stampVisual.remove(visual);
			if(prevParent != null) {
				prevParent.add(visual);
			}
			stampVisual.destroy();
			stampVisual = null;
			visual.set_transform(prevTransform);
			visual = null;
			done();
			done = null;
		});
	}
	,managesTexture: function(texture) {
		if(this.texture != texture) {
			if(this.nextPacker != null) {
				return this.nextPacker.managesTexture(texture);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: ceramic_TextureTilePacker
});
var ceramic__$TextureTilePacker_PackedTextureTile = function(texture,frameX,frameY,frameWidth,frameHeight) {
	this.usedRows = 1;
	this.usedCols = 1;
	this.row = -1;
	this.col = -1;
	ceramic_TextureTile.call(this,texture,frameX,frameY,frameWidth,frameHeight);
};
$hxClasses["ceramic._TextureTilePacker.PackedTextureTile"] = ceramic__$TextureTilePacker_PackedTextureTile;
ceramic__$TextureTilePacker_PackedTextureTile.__name__ = "ceramic._TextureTilePacker.PackedTextureTile";
ceramic__$TextureTilePacker_PackedTextureTile.__super__ = ceramic_TextureTile;
ceramic__$TextureTilePacker_PackedTextureTile.prototype = $extend(ceramic_TextureTile.prototype,{
	__class__: ceramic__$TextureTilePacker_PackedTextureTile
});
var ceramic_Timeline = function() {
	this.initializerName = null;
	this.completeHandlerIndexes = null;
	this.completeHandlers = null;
	this.endPosition = -1;
	this.startPosition = -1;
	this.labelIndexes = null;
	this.labels = null;
	this.paused = false;
	this.tracks = [];
	this.position = 0;
	this.fps = 30;
	this.autoUpdate = true;
	this.loop = true;
	this.autoFitSize = true;
	this.size = 0;
	ceramic_Entity.call(this);
	ceramic_App.app.offPreUpdate($bind(this,this.update));
	if(!this.paused && this.autoUpdate) {
		ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
	}
};
$hxClasses["ceramic.Timeline"] = ceramic_Timeline;
ceramic_Timeline.__name__ = "ceramic.Timeline";
ceramic_Timeline.__interfaces__ = [ceramic_Component];
ceramic_Timeline.__super__ = ceramic_Entity;
ceramic_Timeline.prototype = $extend(ceramic_Entity.prototype,{
	emitStartLabel: function(index,name) {
		var len = 0;
		if(this.__cbOnStartLabel != null) {
			len += this.__cbOnStartLabel.length;
		}
		if(this.__cbOnceStartLabel != null) {
			len += this.__cbOnceStartLabel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnStartLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnStartLabel[ii];
					++i;
				}
			}
			if(this.__cbOnceStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceStartLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceStartLabel[ii];
					var unbind = this.__cbOnceOwnerUnbindStartLabel[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceStartLabel = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(index,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStartLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "startLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offStartLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStartLabel == null) {
				this.__cbOnOwnerUnbindStartLabel = [];
			}
			this.__cbOnOwnerUnbindStartLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStartLabel == null) {
				this.__cbOnOwnerUnbindStartLabel = [];
			}
			this.__cbOnOwnerUnbindStartLabel.push(null);
		}
		if(this.__cbOnStartLabel == null) {
			this.__cbOnStartLabel = [];
		}
		this.__cbOnStartLabel.push(handleIndexName);
	}
	,onceStartLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "startLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offStartLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStartLabel == null) {
				this.__cbOnceOwnerUnbindStartLabel = [];
			}
			this.__cbOnceOwnerUnbindStartLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStartLabel == null) {
				this.__cbOnceOwnerUnbindStartLabel = [];
			}
			this.__cbOnceOwnerUnbindStartLabel.push(null);
		}
		if(this.__cbOnceStartLabel == null) {
			this.__cbOnceStartLabel = [];
		}
		this.__cbOnceStartLabel.push(handleIndexName);
	}
	,offStartLabel: function(handleIndexName) {
		if(handleIndexName != null) {
			var index;
			var unbind;
			if(this.__cbOnStartLabel != null) {
				index = this.__cbOnStartLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnStartLabel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStartLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStartLabel.splice(index,1);
				}
			}
			if(this.__cbOnceStartLabel != null) {
				index = this.__cbOnceStartLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnceStartLabel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStartLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStartLabel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStartLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStartLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStartLabel = null;
			}
			if(this.__cbOnceOwnerUnbindStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStartLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStartLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStartLabel = null;
			}
			this.__cbOnStartLabel = null;
			this.__cbOnceStartLabel = null;
		}
	}
	,listensStartLabel: function() {
		if(!(this.__cbOnStartLabel != null && this.__cbOnStartLabel.length > 0)) {
			if(this.__cbOnceStartLabel != null) {
				return this.__cbOnceStartLabel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitEndLabel: function(index,name) {
		var len = 0;
		if(this.__cbOnEndLabel != null) {
			len += this.__cbOnEndLabel.length;
		}
		if(this.__cbOnceEndLabel != null) {
			len += this.__cbOnceEndLabel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnEndLabel[ii];
					++i;
				}
			}
			if(this.__cbOnceEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceEndLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceEndLabel[ii];
					var unbind = this.__cbOnceOwnerUnbindEndLabel[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceEndLabel = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(index,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		this.didEmitEndLabel(index,name);
	}
	,onEndLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offEndLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndLabel == null) {
				this.__cbOnOwnerUnbindEndLabel = [];
			}
			this.__cbOnOwnerUnbindEndLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndLabel == null) {
				this.__cbOnOwnerUnbindEndLabel = [];
			}
			this.__cbOnOwnerUnbindEndLabel.push(null);
		}
		if(this.__cbOnEndLabel == null) {
			this.__cbOnEndLabel = [];
		}
		this.__cbOnEndLabel.push(handleIndexName);
	}
	,onceEndLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offEndLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndLabel == null) {
				this.__cbOnceOwnerUnbindEndLabel = [];
			}
			this.__cbOnceOwnerUnbindEndLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndLabel == null) {
				this.__cbOnceOwnerUnbindEndLabel = [];
			}
			this.__cbOnceOwnerUnbindEndLabel.push(null);
		}
		if(this.__cbOnceEndLabel == null) {
			this.__cbOnceEndLabel = [];
		}
		this.__cbOnceEndLabel.push(handleIndexName);
	}
	,offEndLabel: function(handleIndexName) {
		if(handleIndexName != null) {
			var index;
			var unbind;
			if(this.__cbOnEndLabel != null) {
				index = this.__cbOnEndLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnEndLabel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndLabel.splice(index,1);
				}
			}
			if(this.__cbOnceEndLabel != null) {
				index = this.__cbOnceEndLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnceEndLabel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndLabel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndLabel = null;
			}
			if(this.__cbOnceOwnerUnbindEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndLabel = null;
			}
			this.__cbOnEndLabel = null;
			this.__cbOnceEndLabel = null;
		}
	}
	,listensEndLabel: function() {
		if(!(this.__cbOnEndLabel != null && this.__cbOnEndLabel.length > 0)) {
			if(this.__cbOnceEndLabel != null) {
				return this.__cbOnceEndLabel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_autoUpdate: function(autoUpdate) {
		if(this.autoUpdate != autoUpdate) {
			this.autoUpdate = autoUpdate;
			ceramic_App.app.offPreUpdate($bind(this,this.update));
			if(!this.paused && this.autoUpdate) {
				ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
			}
		}
		return autoUpdate;
	}
	,set_paused: function(paused) {
		if(this.paused == paused) {
			return paused;
		}
		this.paused = paused;
		ceramic_App.app.offPreUpdate($bind(this,this.update));
		if(!this.paused && this.autoUpdate) {
			ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
		}
		return paused;
	}
	,set_startPosition: function(startPosition) {
		if(this.startPosition != startPosition) {
			this.startPosition = startPosition;
			this.apply();
		}
		return startPosition;
	}
	,set_endPosition: function(endPosition) {
		if(this.endPosition != endPosition) {
			this.endPosition = endPosition;
			this.apply();
		}
		return endPosition;
	}
	,bindAsComponent: function() {
	}
	,bindOrUnbindUpdateIfNeeded: function() {
		ceramic_App.app.offPreUpdate($bind(this,this.update));
		if(!this.paused && this.autoUpdate) {
			ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
		}
	}
	,update: function(delta) {
		var targetPosition = this.position + delta * this.fps;
		var prevPosition = this.position;
		if(targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek = false;
						var forceChange = false;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek == null) {
							forceSeek = false;
						}
						if(forceSeek || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,seek: function(targetPosition) {
		var targetPosition1 = targetPosition;
		var prevPosition = this.position;
		if(targetPosition1 != this.position) {
			if(this.startPosition >= 0 && targetPosition1 < this.startPosition) {
				targetPosition1 = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition1 > this.endPosition) {
				if(this.loop) {
					targetPosition1 = this.startPosition + (targetPosition1 - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition1 = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition1 > this.size) {
					if(this.loop) {
						targetPosition1 %= this.size;
					} else {
						targetPosition1 = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 < 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 != this.position) {
				this.position = targetPosition1;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek = false;
						var forceChange = false;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek == null) {
							forceSeek = false;
						}
						if(forceSeek || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,animate: function(name,complete) {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			var array = this.completeHandlers;
			if(array.length != 0) {
				if(array.length > 0) {
					array.splice(0,array.length);
				} else {
					var dArray = array;
					dArray[-1] = null;
				}
			}
			var array = this.completeHandlerIndexes;
			if(array.length != 0) {
				if(array.length > 0) {
					array.splice(0,array.length);
				} else {
					var dArray = array;
					dArray[-1] = null;
				}
			}
		}
		var index = this.indexOfLabel(name);
		if(index != -1) {
			this.seek(index);
			if(this.completeHandlers == null) {
				this.completeHandlers = [];
				this.completeHandlerIndexes = [];
			}
			this.completeHandlers.push(complete);
			this.completeHandlerIndexes.push(index);
		} else {
			ceramic_App.app.logger.warning("Failed to animate whith label: " + name + " (not found)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Timeline.hx", lineNumber : 182, className : "ceramic.Timeline", methodName : "animate"});
		}
	}
	,seekLabel: function(name) {
		var index = this.indexOfLabel(name);
		if(index != -1) {
			this.seek(index);
		} else {
			ceramic_App.app.logger.warning("Failed to seek label: " + name + " (not found)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Timeline.hx", lineNumber : 200, className : "ceramic.Timeline", methodName : "seekLabel"});
		}
		return index;
	}
	,resetStartAndEndPositions: function() {
		this.set_startPosition(-1);
		this.set_endPosition(-1);
	}
	,loopLabel: function(name) {
		if(this.labels == null) {
			ceramic_App.app.logger.warning("Cannot loop label " + name + " (there is no label at all)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Timeline.hx", lineNumber : 227, className : "ceramic.Timeline", methodName : "loopLabel"});
			return -1;
		}
		var i = this.labels.indexOf(name);
		if(i == -1) {
			ceramic_App.app.logger.warning("Cannot loop label " + name + " (no such label)",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Timeline.hx", lineNumber : 233, className : "ceramic.Timeline", methodName : "loopLabel"});
			return -1;
		}
		var index = this.labelIndexes[i];
		this.set_startPosition(index);
		this.set_endPosition(i < this.labelIndexes.length - 1 ? this.labelIndexes[i + 1] : this.size);
		this.seek(index);
		return index;
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var targetPosition = this.position;
		var forceSeek = true;
		var forceChange1 = forceChange;
		if(forceChange1 == null) {
			forceChange1 = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		var prevPosition = this.position;
		if(forceSeek || targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek1 = forceSeek;
						var forceChange = forceChange1;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek1 == null) {
							forceSeek1 = false;
						}
						if(forceSeek1 || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,inlineSeek: function(targetPosition,forceSeek,forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		var prevPosition = this.position;
		if(forceSeek || targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek1 = forceSeek;
						var forceChange1 = forceChange;
						if(forceChange1 == null) {
							forceChange1 = false;
						}
						if(forceSeek1 == null) {
							forceSeek1 = false;
						}
						if(forceSeek1 || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange1);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,clearCompleteHandlers: function() {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			var array = this.completeHandlers;
			if(array.length != 0) {
				if(array.length > 0) {
					array.splice(0,array.length);
				} else {
					var dArray = array;
					dArray[-1] = null;
				}
			}
			var array = this.completeHandlerIndexes;
			if(array.length != 0) {
				if(array.length > 0) {
					array.splice(0,array.length);
				} else {
					var dArray = array;
					dArray[-1] = null;
				}
			}
		}
	}
	,didEmitEndLabel: function(index,name) {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			var pool = null;
			var toCall = null;
			var toCallLen = 0;
			var _g = 0;
			var _g1 = this.completeHandlerIndexes.length;
			while(_g < _g1) {
				var i = _g++;
				var anIndex = this.completeHandlerIndexes[i];
				if(anIndex == index) {
					if(toCall == null) {
						pool = ceramic_ArrayPool.pool(this.completeHandlers.length);
						toCall = pool.get();
					}
					var handler = this.completeHandlers[i];
					toCall.vector[toCallLen] = handler;
					this.completeHandlers[i] = null;
					++toCallLen;
				}
			}
			if(this.completeHandlers != null && this.completeHandlers.length > 0) {
				var array = this.completeHandlers;
				if(array.length != 0) {
					if(array.length > 0) {
						array.splice(0,array.length);
					} else {
						var dArray = array;
						dArray[-1] = null;
					}
				}
				var array = this.completeHandlerIndexes;
				if(array.length != 0) {
					if(array.length > 0) {
						array.splice(0,array.length);
					} else {
						var dArray = array;
						dArray[-1] = null;
					}
				}
			}
			var _g = 0;
			var _g1 = toCallLen;
			while(_g < _g1) {
				var i = _g++;
				var handler = toCall.vector[i];
				handler();
			}
			if(toCall != null) {
				pool.release(toCall);
			}
		}
	}
	,add: function(track) {
		if(track.timeline != null) {
			track.timeline.remove(track);
		}
		if(track.timeline != this) {
			this.tracks.push(track);
			track.timeline = this;
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
	}
	,get: function(trackId) {
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var track = this.tracks[i];
			if(track.id == trackId) {
				return track;
			}
		}
		return null;
	}
	,remove: function(track) {
		if(track.timeline == this) {
			HxOverrides.remove(this.tracks,track);
			track.timeline = null;
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
	}
	,fitSize: function() {
		var newSize = 0;
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var track = this.tracks[i];
			if(track.size > newSize) {
				newSize = track.size;
			}
		}
		this.size = newSize;
	}
	,indexOfLabelBeforeIndex: function(index) {
		if(this.labelIndexes == null) {
			return -1;
		}
		var prevIndex = -1;
		var _g = 0;
		var _g1 = this.labelIndexes.length;
		while(_g < _g1) {
			var i = _g++;
			var anIndex = this.labelIndexes[i];
			if(anIndex == index) {
				return prevIndex;
			}
			if(anIndex > index) {
				break;
			}
			prevIndex = anIndex;
		}
		return prevIndex;
	}
	,labelAtIndex: function(index) {
		if(this.labelIndexes == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.labelIndexes.length;
		while(_g < _g1) {
			var i = _g++;
			var anIndex = this.labelIndexes[i];
			if(anIndex == index) {
				return this.labels[i];
			}
			if(anIndex > index) {
				break;
			}
		}
		return null;
	}
	,indexOfLabel: function(name) {
		if(this.labelIndexes == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.labels.length;
		while(_g < _g1) {
			var i = _g++;
			var aName = this.labels[i];
			if(name == aName) {
				return this.labelIndexes[i];
			}
		}
		return -1;
	}
	,setLabel: function(index,name) {
		this.removeLabel(name);
		if(this.labelIndexes == null) {
			this.labelIndexes = [];
			this.labels = [];
		}
		this.labelIndexes.push(index);
		this.labels.push(name);
		this.sortLabels();
	}
	,removeLabelAtIndex: function(index) {
		var didRemove = false;
		if(this.labelIndexes != null) {
			var i = this.labelIndexes.indexOf(index);
			if(i != -1) {
				this.labels.splice(i,1);
				this.labelIndexes.splice(i,1);
				didRemove = true;
			}
		}
		return didRemove;
	}
	,removeLabel: function(name) {
		var didRemove = false;
		if(this.labels != null) {
			var i = this.labels.indexOf(name);
			if(i != -1) {
				this.labels.splice(i,1);
				this.labelIndexes.splice(i,1);
				didRemove = true;
			}
		}
		return didRemove;
	}
	,sortLabels: function() {
		this.labelIndexes.sort($bind(this,this.compareLabelIndexes));
		this.labels.sort($bind(this,this.compareLabelNames));
	}
	,compareLabelIndexes: function(a,b) {
		if(a > b) {
			return 1;
		} else if(a < b) {
			return -1;
		} else {
			return 0;
		}
	}
	,compareLabelNames: function(nameA,nameB) {
		var iA = this.labels.indexOf(nameA);
		var a = this.labelIndexes[iA];
		var iB = this.labels.indexOf(nameB);
		var b = this.labelIndexes[iB];
		if(a > b) {
			return 1;
		} else if(a < b) {
			return -1;
		} else {
			return 0;
		}
	}
	,setEntity: function(entity) {
		if(((entity) instanceof ceramic_Entity)) {
			this.entity = entity;
		} else {
			this.entity = null;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offStartLabel();
		this.offEndLabel();
	}
	,__class__: ceramic_Timeline
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_endPosition:"set_endPosition",set_startPosition:"set_startPosition",set_paused:"set_paused",set_autoUpdate:"set_autoUpdate"})
});
var ceramic_TimelineKeyframe = function(index,easing) {
	this.easing = ceramic_Easing.NONE;
	this.index = index;
	this.easing = easing;
};
$hxClasses["ceramic.TimelineKeyframe"] = ceramic_TimelineKeyframe;
ceramic_TimelineKeyframe.__name__ = "ceramic.TimelineKeyframe";
ceramic_TimelineKeyframe.prototype = {
	__class__: ceramic_TimelineKeyframe
};
var ceramic_TimelineBoolKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineBoolKeyframe"] = ceramic_TimelineBoolKeyframe;
ceramic_TimelineBoolKeyframe.__name__ = "ceramic.TimelineBoolKeyframe";
ceramic_TimelineBoolKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineBoolKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	__class__: ceramic_TimelineBoolKeyframe
});
var ceramic_TimelineTrack = function() {
	this.keyframeAfterIndex = -1;
	this.keyframeBeforeIndex = -1;
	this.after = null;
	this.before = null;
	this.keyframes = [];
	this.position = 0;
	this.timeline = null;
	this.locked = false;
	this.loop = false;
	this.autoFitSize = true;
	this.size = 0;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.TimelineTrack"] = ceramic_TimelineTrack;
ceramic_TimelineTrack.__name__ = "ceramic.TimelineTrack";
ceramic_TimelineTrack.__super__ = ceramic_Entity;
ceramic_TimelineTrack.prototype = $extend(ceramic_Entity.prototype,{
	destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		if(this.timeline != null && this.timeline._lifecycleState >= 0) {
			this.timeline.remove(this);
		}
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,seek: function(targetPosition) {
		var targetPosition1 = targetPosition;
		if(targetPosition1 != this.position) {
			if(this.size > 0) {
				if(targetPosition1 > this.size) {
					if(this.loop) {
						targetPosition1 %= this.size;
					} else {
						targetPosition1 = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 < 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 != this.position) {
				this.position = targetPosition1;
				var result = null;
				var index = this.keyframeBeforeIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result.index <= this.position) {
						var keyframeAfter = this.keyframes[index + 1];
						while(keyframeAfter != null && keyframeAfter.index <= this.position) {
							result = keyframeAfter;
							++index;
							keyframeAfter = this.keyframes[index + 1];
						}
					} else {
						result = null;
					}
				}
				if(result == null) {
					index = -1;
					var len = this.keyframes.length;
					while(index + 1 < len) {
						var keyframe = this.keyframes[index + 1];
						if(keyframe.index > this.position) {
							break;
						}
						result = keyframe;
						++index;
					}
				}
				this.keyframeBeforeIndex = index;
				this.before = result;
				var result = null;
				var index = this.keyframeAfterIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result != null) {
						if(result.index > this.position) {
							if(index > 0) {
								var keyframeBefore = this.keyframes[index - 1];
								while(keyframeBefore != null && keyframeBefore.index > this.position) {
									result = keyframeBefore;
									--index;
									keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
								}
							}
						} else {
							result = null;
						}
					}
				}
				if(result == null) {
					var len = this.keyframes.length;
					index = len;
					while(index - 1 >= 0) {
						var keyframe = this.keyframes[index - 1];
						if(keyframe.index <= this.position) {
							break;
						}
						result = keyframe;
						--index;
					}
					if(index >= len) {
						index = -1;
					}
				}
				this.keyframeAfterIndex = index;
				this.after = result;
				this.apply(false);
			}
		}
	}
	,inlineSeek: function(targetPosition,forceSeek,forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		if(forceSeek || targetPosition != this.position) {
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var result = null;
				var index = this.keyframeBeforeIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result.index <= this.position) {
						var keyframeAfter = this.keyframes[index + 1];
						while(keyframeAfter != null && keyframeAfter.index <= this.position) {
							result = keyframeAfter;
							++index;
							keyframeAfter = this.keyframes[index + 1];
						}
					} else {
						result = null;
					}
				}
				if(result == null) {
					index = -1;
					var len = this.keyframes.length;
					while(index + 1 < len) {
						var keyframe = this.keyframes[index + 1];
						if(keyframe.index > this.position) {
							break;
						}
						result = keyframe;
						++index;
					}
				}
				this.keyframeBeforeIndex = index;
				this.before = result;
				var result = null;
				var index = this.keyframeAfterIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result != null) {
						if(result.index > this.position) {
							if(index > 0) {
								var keyframeBefore = this.keyframes[index - 1];
								while(keyframeBefore != null && keyframeBefore.index > this.position) {
									result = keyframeBefore;
									--index;
									keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
								}
							}
						} else {
							result = null;
						}
					}
				}
				if(result == null) {
					var len = this.keyframes.length;
					index = len;
					while(index - 1 >= 0) {
						var keyframe = this.keyframes[index - 1];
						if(keyframe.index <= this.position) {
							break;
						}
						result = keyframe;
						--index;
					}
					if(index >= len) {
						index = -1;
					}
				}
				this.keyframeAfterIndex = index;
				this.after = result;
				this.apply(forceChange);
			}
		}
	}
	,add: function(keyframe) {
		var mutableKeyframes = this.keyframes;
		var len = mutableKeyframes.length;
		var i = 0;
		var didInsert = false;
		while(i < len) {
			var next = mutableKeyframes[i];
			if(next.index == keyframe.index) {
				ceramic_App.app.logger.warning("Replacing existing keyframe at index " + keyframe.index,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TimelineTrack.hx", lineNumber : 127, className : "ceramic.TimelineTrack", methodName : "add"});
				mutableKeyframes[i] = keyframe;
				didInsert = true;
				break;
			} else if(next.index > keyframe.index) {
				mutableKeyframes.splice(i,0,keyframe);
				didInsert = true;
				break;
			}
			++i;
		}
		if(!didInsert) {
			mutableKeyframes.push(keyframe);
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
		if(this.timeline != null && this.timeline.autoFitSize) {
			this.timeline.fitSize();
		}
		this.keyframeBeforeIndex = -1;
		this.keyframeAfterIndex = -1;
		var result = null;
		var index = this.keyframeBeforeIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result.index <= this.position) {
				var keyframeAfter = this.keyframes[index + 1];
				while(keyframeAfter != null && keyframeAfter.index <= this.position) {
					result = keyframeAfter;
					++index;
					keyframeAfter = this.keyframes[index + 1];
				}
			} else {
				result = null;
			}
		}
		if(result == null) {
			index = -1;
			var len = this.keyframes.length;
			while(index + 1 < len) {
				var keyframe = this.keyframes[index + 1];
				if(keyframe.index > this.position) {
					break;
				}
				result = keyframe;
				++index;
			}
		}
		this.keyframeBeforeIndex = index;
		this.before = result;
		var result = null;
		var index = this.keyframeAfterIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result != null) {
				if(result.index > this.position) {
					if(index > 0) {
						var keyframeBefore = this.keyframes[index - 1];
						while(keyframeBefore != null && keyframeBefore.index > this.position) {
							result = keyframeBefore;
							--index;
							keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
						}
					}
				} else {
					result = null;
				}
			}
		}
		if(result == null) {
			var len = this.keyframes.length;
			index = len;
			while(index - 1 >= 0) {
				var keyframe = this.keyframes[index - 1];
				if(keyframe.index <= this.position) {
					break;
				}
				result = keyframe;
				--index;
			}
			if(index >= len) {
				index = -1;
			}
		}
		this.keyframeAfterIndex = index;
		this.after = result;
		this.apply(true);
	}
	,remove: function(keyframe) {
		var index = this.keyframes.indexOf(keyframe);
		if(index != -1) {
			var mutableKeyframes = this.keyframes;
			mutableKeyframes.splice(index,1);
			if(this.autoFitSize) {
				this.fitSize();
			}
			if(this.timeline != null && this.timeline.autoFitSize) {
				this.timeline.fitSize();
			}
			this.keyframeBeforeIndex = -1;
			this.keyframeAfterIndex = -1;
			var result = null;
			var index = this.keyframeBeforeIndex;
			if(index != -1) {
				result = this.keyframes[index];
				if(result.index <= this.position) {
					var keyframeAfter = this.keyframes[index + 1];
					while(keyframeAfter != null && keyframeAfter.index <= this.position) {
						result = keyframeAfter;
						++index;
						keyframeAfter = this.keyframes[index + 1];
					}
				} else {
					result = null;
				}
			}
			if(result == null) {
				index = -1;
				var len = this.keyframes.length;
				while(index + 1 < len) {
					var keyframe = this.keyframes[index + 1];
					if(keyframe.index > this.position) {
						break;
					}
					result = keyframe;
					++index;
				}
			}
			this.keyframeBeforeIndex = index;
			this.before = result;
			var result = null;
			var index = this.keyframeAfterIndex;
			if(index != -1) {
				result = this.keyframes[index];
				if(result != null) {
					if(result.index > this.position) {
						if(index > 0) {
							var keyframeBefore = this.keyframes[index - 1];
							while(keyframeBefore != null && keyframeBefore.index > this.position) {
								result = keyframeBefore;
								--index;
								keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
							}
						}
					} else {
						result = null;
					}
				}
			}
			if(result == null) {
				var len = this.keyframes.length;
				index = len;
				while(index - 1 >= 0) {
					var keyframe = this.keyframes[index - 1];
					if(keyframe.index <= this.position) {
						break;
					}
					result = keyframe;
					--index;
				}
				if(index >= len) {
					index = -1;
				}
			}
			this.keyframeAfterIndex = index;
			this.after = result;
			this.apply(true);
		} else {
			ceramic_App.app.logger.warning("Failed to remove keyframe: keyframe not found in list",{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/TimelineTrack.hx", lineNumber : 186, className : "ceramic.TimelineTrack", methodName : "remove"});
		}
	}
	,fitSize: function() {
		if(this.keyframes.length > 0) {
			this.size = this.keyframes[this.keyframes.length - 1].index;
		} else {
			this.size = 0;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
	}
	,findKeyframeAtIndex: function(index) {
		var keyframe = this.findKeyframeBefore(index);
		if(keyframe != null && keyframe.index == index) {
			return keyframe;
		}
		return null;
	}
	,findKeyframeBefore: function(position) {
		var result = null;
		var index = -1;
		var len = this.keyframes.length;
		while(index + 1 < len) {
			var keyframe = this.keyframes[index + 1];
			if(keyframe.index > position) {
				break;
			}
			result = keyframe;
			++index;
		}
		return result;
	}
	,findKeyframeAfter: function(position) {
		var result = null;
		var index = -1;
		var len = this.keyframes.length;
		while(index + 1 < len) {
			var keyframe = this.keyframes[index + 1];
			if(keyframe.index > position) {
				break;
			}
			result = keyframe;
			++index;
		}
		return result;
	}
	,computeKeyframeBefore: function() {
		var result = null;
		var index = this.keyframeBeforeIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result.index <= this.position) {
				var keyframeAfter = this.keyframes[index + 1];
				while(keyframeAfter != null && keyframeAfter.index <= this.position) {
					result = keyframeAfter;
					++index;
					keyframeAfter = this.keyframes[index + 1];
				}
			} else {
				result = null;
			}
		}
		if(result == null) {
			index = -1;
			var len = this.keyframes.length;
			while(index + 1 < len) {
				var keyframe = this.keyframes[index + 1];
				if(keyframe.index > this.position) {
					break;
				}
				result = keyframe;
				++index;
			}
		}
		this.keyframeBeforeIndex = index;
		this.before = result;
	}
	,computeKeyframeAfter: function() {
		var result = null;
		var index = this.keyframeAfterIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result != null) {
				if(result.index > this.position) {
					if(index > 0) {
						var keyframeBefore = this.keyframes[index - 1];
						while(keyframeBefore != null && keyframeBefore.index > this.position) {
							result = keyframeBefore;
							--index;
							keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
						}
					}
				} else {
					result = null;
				}
			}
		}
		if(result == null) {
			var len = this.keyframes.length;
			index = len;
			while(index - 1 >= 0) {
				var keyframe = this.keyframes[index - 1];
				if(keyframe.index <= this.position) {
					break;
				}
				result = keyframe;
				--index;
			}
			if(index >= len) {
				index = -1;
			}
		}
		this.keyframeAfterIndex = index;
		this.after = result;
	}
	,__class__: ceramic_TimelineTrack
});
var ceramic_TimelineBoolTrack = function() {
	this.value = false;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineBoolTrack"] = ceramic_TimelineBoolTrack;
ceramic_TimelineBoolTrack.__name__ = "ceramic.TimelineBoolTrack";
ceramic_TimelineBoolTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineBoolTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			if(ratio >= 1) {
				this.value = this.after.value;
			} else {
				this.value = this.before.value;
			}
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineBoolTrack
});
var ceramic_TimelineColorKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineColorKeyframe"] = ceramic_TimelineColorKeyframe;
ceramic_TimelineColorKeyframe.__name__ = "ceramic.TimelineColorKeyframe";
ceramic_TimelineColorKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineColorKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	__class__: ceramic_TimelineColorKeyframe
});
var ceramic_TimelineColorTrack = function() {
	this.value = 16777215;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineColorTrack"] = ceramic_TimelineColorTrack;
ceramic_TimelineColorTrack.__name__ = "ceramic.TimelineColorTrack";
ceramic_TimelineColorTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineColorTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			var color1 = this.before.value;
			var color2 = this.after.value;
			var factor = ceramic_Tween.ease(this.after.easing,ratio);
			if(factor == null) {
				factor = 0.5;
			}
			var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
			var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
			var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
			var color = ceramic_Color._new();
			color &= 65535;
			color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
			color &= 16711935;
			color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
			color &= 16776960;
			color |= b > 255 ? 255 : b < 0 ? 0 : b;
			this.value = color;
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineColorTrack
});
var ceramic_TimelineDegreesTrack = function() {
	this.value = 0.0;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineDegreesTrack"] = ceramic_TimelineDegreesTrack;
ceramic_TimelineDegreesTrack.__name__ = "ceramic.TimelineDegreesTrack";
ceramic_TimelineDegreesTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineDegreesTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		var newValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			var deg = this.before.value;
			while(deg < 0) deg += 360;
			while(deg >= 360) deg -= 360;
			var beforeValue = deg;
			var deg = this.after.value;
			while(deg < 0) deg += 360;
			while(deg >= 360) deg -= 360;
			var afterValue = deg;
			var delta = afterValue - beforeValue;
			if(delta > 180) {
				afterValue -= 360;
			} else if(delta < -180) {
				afterValue += 360;
			}
			newValue = beforeValue + (afterValue - beforeValue) * ceramic_Tween.ease(this.after.easing,ratio);
			var deg = newValue;
			while(deg < 0) deg += 360;
			while(deg >= 360) deg -= 360;
			newValue = deg;
		} else if(this.after != null) {
			var deg = this.after.value;
			while(deg < 0) deg += 360;
			while(deg >= 360) deg -= 360;
			newValue = deg;
		} else if(this.before != null) {
			var deg = this.before.value;
			while(deg < 0) deg += 360;
			while(deg >= 360) deg -= 360;
			newValue = deg;
		}
		if(forceChange || prevValue != newValue) {
			this.value = newValue;
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineDegreesTrack
});
var ceramic_TimelineFloatArrayKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineFloatArrayKeyframe"] = ceramic_TimelineFloatArrayKeyframe;
ceramic_TimelineFloatArrayKeyframe.__name__ = "ceramic.TimelineFloatArrayKeyframe";
ceramic_TimelineFloatArrayKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineFloatArrayKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	__class__: ceramic_TimelineFloatArrayKeyframe
});
var ceramic_TimelineFloatArrayTrack = function() {
	this.value = [];
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineFloatArrayTrack"] = ceramic_TimelineFloatArrayTrack;
ceramic_TimelineFloatArrayTrack.__name__ = "ceramic.TimelineFloatArrayTrack";
ceramic_TimelineFloatArrayTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineFloatArrayTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var didChange = false;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			if(ratio >= 1) {
				var result = this.value;
				var array = this.after.value;
				var maxLen = array.length;
				if(result.length > maxLen) {
					if(result.length != maxLen) {
						if(result.length > maxLen) {
							result.splice(maxLen,result.length - maxLen);
						} else {
							var dArray = result;
							dArray[maxLen - 1] = null;
						}
					}
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var newVal = array[i];
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			} else if(ratio <= 0) {
				var result = this.value;
				var array = this.before.value;
				var maxLen = array.length;
				if(result.length > maxLen) {
					if(result.length != maxLen) {
						if(result.length > maxLen) {
							result.splice(maxLen,result.length - maxLen);
						} else {
							var dArray = result;
							dArray[maxLen - 1] = null;
						}
					}
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var newVal = array[i];
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			} else {
				var result = this.value;
				var from = this.before.value;
				var to = this.after.value;
				var ratio1 = ceramic_Tween.ease(this.after.easing,ratio);
				var toLen = to.length;
				var fromLen = from.length;
				var maxLen = toLen > fromLen ? fromLen : toLen;
				if(result.length > maxLen) {
					if(result.length != maxLen) {
						if(result.length > maxLen) {
							result.splice(maxLen,result.length - maxLen);
						} else {
							var dArray = result;
							dArray[maxLen - 1] = null;
						}
					}
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var fromVal = from[i];
					var toVal = to[i];
					var newVal = fromVal + (toVal - fromVal) * ratio1;
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			}
		} else if(this.after != null) {
			var result = this.value;
			var array = this.after.value;
			var maxLen = array.length;
			if(result.length > maxLen) {
				if(result.length != maxLen) {
					if(result.length > maxLen) {
						result.splice(maxLen,result.length - maxLen);
					} else {
						var dArray = result;
						dArray[maxLen - 1] = null;
					}
				}
			}
			var resLen = result.length;
			var _g = 0;
			var _g1 = maxLen;
			while(_g < _g1) {
				var i = _g++;
				var prev = 0.0;
				if(i < resLen) {
					prev = result[i];
				} else {
					didChange = true;
				}
				var newVal = array[i];
				result[i] = newVal;
				if(newVal != prev) {
					didChange = true;
				}
			}
		} else if(this.before != null) {
			var result = this.value;
			var array = this.before.value;
			var maxLen = array.length;
			if(result.length > maxLen) {
				if(result.length != maxLen) {
					if(result.length > maxLen) {
						result.splice(maxLen,result.length - maxLen);
					} else {
						var dArray = result;
						dArray[maxLen - 1] = null;
					}
				}
			}
			var resLen = result.length;
			var _g = 0;
			var _g1 = maxLen;
			while(_g < _g1) {
				var i = _g++;
				var prev = 0.0;
				if(i < resLen) {
					prev = result[i];
				} else {
					didChange = true;
				}
				var newVal = array[i];
				result[i] = newVal;
				if(newVal != prev) {
					didChange = true;
				}
			}
		}
		if(forceChange || didChange) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineFloatArrayTrack
});
var ceramic_TimelineFloatKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineFloatKeyframe"] = ceramic_TimelineFloatKeyframe;
ceramic_TimelineFloatKeyframe.__name__ = "ceramic.TimelineFloatKeyframe";
ceramic_TimelineFloatKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineFloatKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	__class__: ceramic_TimelineFloatKeyframe
});
var ceramic_TimelineFloatTrack = function() {
	this.value = 0.0;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineFloatTrack"] = ceramic_TimelineFloatTrack;
ceramic_TimelineFloatTrack.__name__ = "ceramic.TimelineFloatTrack";
ceramic_TimelineFloatTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineFloatTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnChange[ii];
					++i;
				}
			}
			if(this.__cbOnceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceChange[ii];
					var unbind = this.__cbOnceOwnerUnbindChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			this.value = this.before.value + (this.after.value - this.before.value) * ceramic_Tween.ease(this.after.easing,ratio);
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineFloatTrack
});
var ceramic_Timelines = function() {
	ceramic_Entity.call(this);
	this.onCreateTrack(this,$bind(this,this.handleCreateTrack));
	this.onBindTrack(this,$bind(this,this.handleBindTrack));
	this.onCreateKeyframe(this,$bind(this,this.handleCreateKeyframe));
};
$hxClasses["ceramic.Timelines"] = ceramic_Timelines;
ceramic_Timelines.__name__ = "ceramic.Timelines";
ceramic_Timelines.__super__ = ceramic_Entity;
ceramic_Timelines.prototype = $extend(ceramic_Entity.prototype,{
	emitCreateTrack: function(type,options,result) {
		var len = 0;
		if(this.__cbOnCreateTrack != null) {
			len += this.__cbOnCreateTrack.length;
		}
		if(this.__cbOnceCreateTrack != null) {
			len += this.__cbOnceCreateTrack.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnCreateTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnCreateTrack[ii];
					++i;
				}
			}
			if(this.__cbOnceCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceCreateTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceCreateTrack[ii];
					var unbind = this.__cbOnceOwnerUnbindCreateTrack[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceCreateTrack = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,result);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCreateTrack: function(owner,handleTypeOptionsResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsResult != null) {
					_gthis.offCreateTrack(handleTypeOptionsResult);
					handleTypeOptionsResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCreateTrack == null) {
				this.__cbOnOwnerUnbindCreateTrack = [];
			}
			this.__cbOnOwnerUnbindCreateTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsResult = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCreateTrack == null) {
				this.__cbOnOwnerUnbindCreateTrack = [];
			}
			this.__cbOnOwnerUnbindCreateTrack.push(null);
		}
		if(this.__cbOnCreateTrack == null) {
			this.__cbOnCreateTrack = [];
		}
		this.__cbOnCreateTrack.push(handleTypeOptionsResult);
	}
	,onceCreateTrack: function(owner,handleTypeOptionsResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsResult != null) {
					_gthis.offCreateTrack(handleTypeOptionsResult);
					handleTypeOptionsResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCreateTrack == null) {
				this.__cbOnceOwnerUnbindCreateTrack = [];
			}
			this.__cbOnceOwnerUnbindCreateTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsResult = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCreateTrack == null) {
				this.__cbOnceOwnerUnbindCreateTrack = [];
			}
			this.__cbOnceOwnerUnbindCreateTrack.push(null);
		}
		if(this.__cbOnceCreateTrack == null) {
			this.__cbOnceCreateTrack = [];
		}
		this.__cbOnceCreateTrack.push(handleTypeOptionsResult);
	}
	,offCreateTrack: function(handleTypeOptionsResult) {
		if(handleTypeOptionsResult != null) {
			var index;
			var unbind;
			if(this.__cbOnCreateTrack != null) {
				index = this.__cbOnCreateTrack.indexOf(handleTypeOptionsResult);
				if(index != -1) {
					this.__cbOnCreateTrack.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCreateTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCreateTrack.splice(index,1);
				}
			}
			if(this.__cbOnceCreateTrack != null) {
				index = this.__cbOnceCreateTrack.indexOf(handleTypeOptionsResult);
				if(index != -1) {
					this.__cbOnceCreateTrack.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCreateTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCreateTrack.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCreateTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCreateTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCreateTrack = null;
			}
			if(this.__cbOnceOwnerUnbindCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCreateTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCreateTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCreateTrack = null;
			}
			this.__cbOnCreateTrack = null;
			this.__cbOnceCreateTrack = null;
		}
	}
	,listensCreateTrack: function() {
		if(!(this.__cbOnCreateTrack != null && this.__cbOnCreateTrack.length > 0)) {
			if(this.__cbOnceCreateTrack != null) {
				return this.__cbOnceCreateTrack.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitBindTrack: function(type,options,track,entity,field) {
		var len = 0;
		if(this.__cbOnBindTrack != null) {
			len += this.__cbOnBindTrack.length;
		}
		if(this.__cbOnceBindTrack != null) {
			len += this.__cbOnceBindTrack.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnBindTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnBindTrack[ii];
					++i;
				}
			}
			if(this.__cbOnceBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceBindTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceBindTrack[ii];
					var unbind = this.__cbOnceOwnerUnbindBindTrack[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceBindTrack = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,track,entity,field);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBindTrack: function(owner,handleTypeOptionsTrackEntityField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bindTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsTrackEntityField != null) {
					_gthis.offBindTrack(handleTypeOptionsTrackEntityField);
					handleTypeOptionsTrackEntityField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBindTrack == null) {
				this.__cbOnOwnerUnbindBindTrack = [];
			}
			this.__cbOnOwnerUnbindBindTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsTrackEntityField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBindTrack == null) {
				this.__cbOnOwnerUnbindBindTrack = [];
			}
			this.__cbOnOwnerUnbindBindTrack.push(null);
		}
		if(this.__cbOnBindTrack == null) {
			this.__cbOnBindTrack = [];
		}
		this.__cbOnBindTrack.push(handleTypeOptionsTrackEntityField);
	}
	,onceBindTrack: function(owner,handleTypeOptionsTrackEntityField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bindTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsTrackEntityField != null) {
					_gthis.offBindTrack(handleTypeOptionsTrackEntityField);
					handleTypeOptionsTrackEntityField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBindTrack == null) {
				this.__cbOnceOwnerUnbindBindTrack = [];
			}
			this.__cbOnceOwnerUnbindBindTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsTrackEntityField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBindTrack == null) {
				this.__cbOnceOwnerUnbindBindTrack = [];
			}
			this.__cbOnceOwnerUnbindBindTrack.push(null);
		}
		if(this.__cbOnceBindTrack == null) {
			this.__cbOnceBindTrack = [];
		}
		this.__cbOnceBindTrack.push(handleTypeOptionsTrackEntityField);
	}
	,offBindTrack: function(handleTypeOptionsTrackEntityField) {
		if(handleTypeOptionsTrackEntityField != null) {
			var index;
			var unbind;
			if(this.__cbOnBindTrack != null) {
				index = this.__cbOnBindTrack.indexOf(handleTypeOptionsTrackEntityField);
				if(index != -1) {
					this.__cbOnBindTrack.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBindTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBindTrack.splice(index,1);
				}
			}
			if(this.__cbOnceBindTrack != null) {
				index = this.__cbOnceBindTrack.indexOf(handleTypeOptionsTrackEntityField);
				if(index != -1) {
					this.__cbOnceBindTrack.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBindTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBindTrack.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBindTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBindTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBindTrack = null;
			}
			if(this.__cbOnceOwnerUnbindBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBindTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBindTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBindTrack = null;
			}
			this.__cbOnBindTrack = null;
			this.__cbOnceBindTrack = null;
		}
	}
	,listensBindTrack: function() {
		if(!(this.__cbOnBindTrack != null && this.__cbOnBindTrack.length > 0)) {
			if(this.__cbOnceBindTrack != null) {
				return this.__cbOnceBindTrack.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitCreateKeyframe: function(type,options,value,index,easing,existing,result) {
		var len = 0;
		if(this.__cbOnCreateKeyframe != null) {
			len += this.__cbOnCreateKeyframe.length;
		}
		if(this.__cbOnceCreateKeyframe != null) {
			len += this.__cbOnceCreateKeyframe.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnCreateKeyframe.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnCreateKeyframe[ii];
					++i;
				}
			}
			if(this.__cbOnceCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnceCreateKeyframe.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceCreateKeyframe[ii];
					var unbind = this.__cbOnceOwnerUnbindCreateKeyframe[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceCreateKeyframe = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,value,index,easing,existing,result);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCreateKeyframe: function(owner,handleTypeOptionsValueIndexEasingExistingResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createKeyframe" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsValueIndexEasingExistingResult != null) {
					_gthis.offCreateKeyframe(handleTypeOptionsValueIndexEasingExistingResult);
					handleTypeOptionsValueIndexEasingExistingResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCreateKeyframe == null) {
				this.__cbOnOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnOwnerUnbindCreateKeyframe.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsValueIndexEasingExistingResult = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCreateKeyframe == null) {
				this.__cbOnOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnOwnerUnbindCreateKeyframe.push(null);
		}
		if(this.__cbOnCreateKeyframe == null) {
			this.__cbOnCreateKeyframe = [];
		}
		this.__cbOnCreateKeyframe.push(handleTypeOptionsValueIndexEasingExistingResult);
	}
	,onceCreateKeyframe: function(owner,handleTypeOptionsValueIndexEasingExistingResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createKeyframe" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsValueIndexEasingExistingResult != null) {
					_gthis.offCreateKeyframe(handleTypeOptionsValueIndexEasingExistingResult);
					handleTypeOptionsValueIndexEasingExistingResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCreateKeyframe == null) {
				this.__cbOnceOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnceOwnerUnbindCreateKeyframe.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsValueIndexEasingExistingResult = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCreateKeyframe == null) {
				this.__cbOnceOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnceOwnerUnbindCreateKeyframe.push(null);
		}
		if(this.__cbOnceCreateKeyframe == null) {
			this.__cbOnceCreateKeyframe = [];
		}
		this.__cbOnceCreateKeyframe.push(handleTypeOptionsValueIndexEasingExistingResult);
	}
	,offCreateKeyframe: function(handleTypeOptionsValueIndexEasingExistingResult) {
		if(handleTypeOptionsValueIndexEasingExistingResult != null) {
			var index;
			var unbind;
			if(this.__cbOnCreateKeyframe != null) {
				index = this.__cbOnCreateKeyframe.indexOf(handleTypeOptionsValueIndexEasingExistingResult);
				if(index != -1) {
					this.__cbOnCreateKeyframe.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCreateKeyframe[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCreateKeyframe.splice(index,1);
				}
			}
			if(this.__cbOnceCreateKeyframe != null) {
				index = this.__cbOnceCreateKeyframe.indexOf(handleTypeOptionsValueIndexEasingExistingResult);
				if(index != -1) {
					this.__cbOnceCreateKeyframe.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCreateKeyframe[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCreateKeyframe.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCreateKeyframe.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCreateKeyframe[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCreateKeyframe = null;
			}
			if(this.__cbOnceOwnerUnbindCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCreateKeyframe.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCreateKeyframe[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCreateKeyframe = null;
			}
			this.__cbOnCreateKeyframe = null;
			this.__cbOnceCreateKeyframe = null;
		}
	}
	,listensCreateKeyframe: function() {
		if(!(this.__cbOnCreateKeyframe != null && this.__cbOnCreateKeyframe.length > 0)) {
			if(this.__cbOnceCreateKeyframe != null) {
				return this.__cbOnceCreateKeyframe.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,handleCreateTrack: function(type,options,result) {
		if(result.value != null) {
			return;
		}
		if(options != null && options.degrees == true) {
			result.value = new ceramic_TimelineDegreesTrack();
		} else if(type == "Float") {
			result.value = new ceramic_TimelineFloatTrack();
		} else if(type == "ceramic.Color") {
			result.value = new ceramic_TimelineColorTrack();
		} else if(type == "Bool") {
			result.value = new ceramic_TimelineBoolTrack();
		} else if(type == "Array<Float>") {
			result.value = new ceramic_TimelineFloatArrayTrack();
		}
	}
	,handleBindTrack: function(type,options,track,entity,field) {
		if(((track) instanceof ceramic_TimelineFloatTrack)) {
			var floatTrack = track;
			floatTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineDegreesTrack)) {
			var degreesTrack = track;
			degreesTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineColorTrack)) {
			var colorTrack = track;
			colorTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineBoolTrack)) {
			var boolTrack = track;
			boolTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineFloatArrayTrack)) {
			var copyArray = options != null && options.copyArray == true;
			var floatArrayTrack = track;
			floatArrayTrack.onChange(entity,function(track) {
				var array = null;
				if(copyArray) {
					array = [];
				} else {
					array = Reflect.getProperty(entity,field);
					if(array == null) {
						array = [];
					}
				}
				var value = track.value;
				var valueLen = value.length;
				if(array.length != valueLen) {
					if(array.length != valueLen) {
						if(array.length > valueLen) {
							array.splice(valueLen,array.length - valueLen);
						} else {
							var dArray = array;
							dArray[valueLen - 1] = null;
						}
					}
				}
				var _g = 0;
				var _g1 = valueLen;
				while(_g < _g1) {
					var i = _g++;
					var val = value[i];
					array[i] = val;
				}
				Reflect.setProperty(entity,field,array);
			});
		}
	}
	,handleCreateKeyframe: function(type,options,value,index,easing,existing,result) {
		if(result.value != null) {
			return;
		}
		if(type == "Float") {
			if(existing != null && ((existing) instanceof ceramic_TimelineFloatKeyframe)) {
				var floatKeyframe = existing;
				floatKeyframe.value = value;
				floatKeyframe.index = index;
				floatKeyframe.easing = easing;
				result.value = floatKeyframe;
			} else {
				result.value = new ceramic_TimelineFloatKeyframe(value,index,easing);
			}
		} else if(type == "ceramic.Color") {
			if(existing != null && ((existing) instanceof ceramic_TimelineColorKeyframe)) {
				var colorKeyframe = existing;
				colorKeyframe.value = value;
				colorKeyframe.index = index;
				colorKeyframe.easing = easing;
				result.value = colorKeyframe;
			} else {
				result.value = new ceramic_TimelineColorKeyframe(value,index,easing);
			}
		} else if(type == "Bool") {
			if(existing != null && ((existing) instanceof ceramic_TimelineBoolKeyframe)) {
				var boolKeyframe = existing;
				boolKeyframe.value = value;
				boolKeyframe.index = index;
				boolKeyframe.easing = easing;
				result.value = boolKeyframe;
			} else {
				result.value = new ceramic_TimelineBoolKeyframe(value,index,easing);
			}
		} else if(type == "Array<Float>") {
			if(existing != null && ((existing) instanceof ceramic_TimelineFloatArrayKeyframe)) {
				var floatArrayKeyframe = existing;
				var floatArrayValue = value;
				floatArrayKeyframe.value = [].concat(floatArrayValue);
				floatArrayKeyframe.index = index;
				floatArrayKeyframe.easing = easing;
				result.value = floatArrayKeyframe;
			} else {
				result.value = new ceramic_TimelineFloatArrayKeyframe(value,index,easing);
			}
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offCreateTrack();
		this.offBindTrack();
		this.offCreateKeyframe();
	}
	,__class__: ceramic_Timelines
});
var ceramic_Timer = function() { };
$hxClasses["ceramic.Timer"] = ceramic_Timer;
ceramic_Timer.__name__ = "ceramic.Timer";
ceramic_Timer.__properties__ = {get_timestamp:"get_timestamp"};
ceramic_Timer.get_timestamp = function() {
	return ceramic_Timer.startTimestamp + ceramic_Timer.now;
};
ceramic_Timer.update = function(delta,realDelta) {
	ceramic_Timer.now += delta;
	ceramic_Timer.timestamp = ceramic_Timer.startTimestamp + ceramic_Timer.now + realDelta;
	if(ceramic_Timer.next <= ceramic_Timer.now) {
		ceramic_App.app.beginUpdateCallbacks.push(ceramic_Timer.flush);
	}
};
ceramic_Timer.flush = function() {
	ceramic_Timer.next = 999999999;
	var prevCallbacks = ceramic_Timer.callbacks;
	ceramic_Timer.callbacks = [];
	var _g = 0;
	var _g1 = prevCallbacks.length;
	while(_g < _g1) {
		var i = _g++;
		var callback = prevCallbacks[i];
		if(!callback.cleared) {
			if(callback.time <= ceramic_Timer.now) {
				if(callback.interval >= 0) {
					while(callback.time <= ceramic_Timer.now && !callback.cleared) {
						callback.callback();
						if(callback.interval == 0) {
							break;
						}
						callback.time += callback.interval;
					}
					if(!callback.cleared) {
						ceramic_Timer.callbacks.push(callback);
						ceramic_Timer.next = Math.min(callback.time,ceramic_Timer.next);
					}
				} else {
					callback.callback();
				}
			} else {
				ceramic_Timer.callbacks.push(callback);
				ceramic_Timer.next = Math.min(callback.time,ceramic_Timer.next);
			}
		}
	}
};
ceramic_Timer.delay = function(owner,seconds,callback) {
	return ceramic_Timer.schedule(owner,seconds,callback,-1);
};
ceramic_Timer.interval = function(owner,seconds,callback) {
	return ceramic_Timer.schedule(owner,seconds,callback,seconds);
};
ceramic_Timer.schedule = function(owner,seconds,callback,interval) {
	var time = ceramic_Timer.now + seconds;
	ceramic_Timer.next = Math.min(time,ceramic_Timer.next);
	var timerCallback = new ceramic_TimerCallback();
	var clearScheduled = null;
	clearScheduled = function() {
		timerCallback.cleared = true;
	};
	var scheduled = null;
	scheduled = function() {
		if(timerCallback.cleared) {
			return;
		}
		if(owner != null && owner._lifecycleState < 0) {
			timerCallback.cleared = true;
			return;
		}
		callback();
	};
	timerCallback.callback = scheduled;
	timerCallback.time = time;
	timerCallback.interval = interval;
	ceramic_Timer.callbacks.push(timerCallback);
	return clearScheduled;
};
var ceramic_TimerCallback = function() {
	this.cleared = false;
	this.interval = -1;
	this.time = 0;
	this.callback = null;
};
$hxClasses["ceramic.TimerCallback"] = ceramic_TimerCallback;
ceramic_TimerCallback.__name__ = "ceramic.TimerCallback";
ceramic_TimerCallback.prototype = {
	__class__: ceramic_TimerCallback
};
var ceramic_Touch = function(index,x,y,deltaX,deltaY) {
	this.index = index;
	this.x = x;
	this.y = y;
	this.deltaX = deltaX;
	this.deltaY = deltaY;
};
$hxClasses["ceramic.Touch"] = ceramic_Touch;
ceramic_Touch.__name__ = "ceramic.Touch";
ceramic_Touch.prototype = {
	toString: function() {
		return "" + Std.string({ index : this.index, x : this.x, y : this.y, deltaX : this.deltaX, deltaY : this.deltaY});
	}
	,__class__: ceramic_Touch
};
var ceramic_TouchInfo = function(touchIndex,buttonId,x,y,hits) {
	this.touchIndex = touchIndex;
	this.buttonId = buttonId;
	this.x = x;
	this.y = y;
	this.hits = hits;
};
$hxClasses["ceramic.TouchInfo"] = ceramic_TouchInfo;
ceramic_TouchInfo.__name__ = "ceramic.TouchInfo";
ceramic_TouchInfo.prototype = {
	toString: function() {
		return "" + Std.string({ touchIndex : this.touchIndex, buttonId : this.buttonId, x : this.x, y : this.y, hits : this.hits});
	}
	,__class__: ceramic_TouchInfo
};
var ceramic_TrackerBackend = function() {
	this.backgroundQueue = new ceramic_BackgroundQueue();
};
$hxClasses["ceramic.TrackerBackend"] = ceramic_TrackerBackend;
ceramic_TrackerBackend.__name__ = "ceramic.TrackerBackend";
ceramic_TrackerBackend.prototype = {
	onceImmediate: function(handleImmediate) {
		ceramic_App.app.onceImmediate(handleImmediate);
	}
	,readString: function(key) {
		return ceramic_App.app.backend.io.readString(key);
	}
	,saveString: function(key,str) {
		return ceramic_App.app.backend.io.saveString(key,str);
	}
	,appendString: function(key,str) {
		return ceramic_App.app.backend.io.appendString(key,str);
	}
	,warning: function(message,pos) {
		ceramic_App.app.logger.warning(message,pos);
	}
	,error: function(error,pos) {
		ceramic_App.app.logger.error(error,pos);
	}
	,success: function(message,pos) {
		ceramic_App.app.logger.success(message,pos);
	}
	,runInBackground: function(callback) {
		this.backgroundQueue.schedule(callback);
	}
	,runInMain: function(callback) {
		ceramic_Runner.runInMain(callback);
	}
	,interval: function(owner,seconds,callback) {
		return ceramic_Timer.schedule(owner,seconds,callback,seconds);
	}
	,delay: function(owner,seconds,callback) {
		return ceramic_Timer.schedule(owner,seconds,callback,-1);
	}
	,storageDirectory: function() {
		return null;
	}
	,pathJoin: function(paths) {
		return ceramic_Path.join(paths);
	}
	,__class__: ceramic_TrackerBackend
};
var ceramic_Tween = function(owner,easing,duration,fromValue,toValue) {
	this.customEasing = null;
	ceramic_Entity.call(this);
	this.owner = owner;
	this.easing = easing;
	this.duration = duration;
	this.fromValue = fromValue;
	this.toValue = toValue;
	this.init();
};
$hxClasses["ceramic.Tween"] = ceramic_Tween;
ceramic_Tween.__name__ = "ceramic.Tween";
ceramic_Tween.start = function(owner,easing,duration,fromValue,toValue,handleValueTime) {
	var instance = new ceramic_Tween(owner,easing == null ? ceramic_Easing.QUAD_EASE_IN_OUT : easing,duration,fromValue,toValue);
	instance.onUpdate(owner,handleValueTime);
	return instance;
};
ceramic_Tween.tick = function(delta) {
	var len = ceramic_Tween._tweens.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var tween = ceramic_Tween._tweens[i];
		ceramic_Tween._iteratedTweens[i] = tween;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var tween = ceramic_Tween._iteratedTweens[i];
		ceramic_Tween._iteratedTweens[i] = null;
		if(tween.owner != null && tween.owner._lifecycleState < 0) {
			tween.destroy();
		} else {
			tween.remaining -= delta;
			if(tween.remaining <= 0) {
				tween.emitUpdate(tween.toValue,tween.duration);
				tween.emitComplete();
				tween.destroy();
			} else {
				var elapsed = tween.duration - tween.remaining;
				ceramic__$Tween_TweenEasingFunction.k = elapsed / tween.duration;
				var k = ceramic__$Tween_TweenEasingFunction.k;
				ceramic__$Tween_TweenEasingFunction.customEasing = tween.customEasing;
				tween.computedEasing();
				ceramic__$Tween_TweenEasingFunction.customEasing = null;
				tween.emitUpdate(tween.fromValue + (tween.toValue - tween.fromValue) * ceramic__$Tween_TweenEasingFunction.k,elapsed);
			}
		}
	}
};
ceramic_Tween.computeEasing = function(easing) {
	switch(easing._hx_index) {
	case 0:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
		break;
	case 1:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
		break;
	case 2:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
		break;
	case 3:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
		break;
	case 4:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
		break;
	case 5:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
		break;
	case 6:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
		break;
	case 7:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
		break;
	case 8:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
		break;
	case 9:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
		break;
	case 10:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
		break;
	case 11:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
		break;
	case 12:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
		break;
	case 13:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
		break;
	case 14:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
		break;
	case 15:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
		break;
	case 16:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
		break;
	case 17:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
		break;
	case 18:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
		break;
	case 19:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
		break;
	case 20:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
		break;
	case 21:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
		break;
	case 22:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
		break;
	case 23:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
		break;
	case 24:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
		break;
	case 25:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
		break;
	case 26:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
		break;
	case 27:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
		break;
	case 28:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = easing1;
		break;
	}
};
ceramic_Tween.ease = function(easing,value) {
	ceramic__$Tween_TweenEasingFunction.k = value;
	switch(easing._hx_index) {
	case 0:
		ceramic__$Tween_TweenEasingFunction.none();
		break;
	case 1:
		ceramic__$Tween_TweenEasingFunction.linear();
		break;
	case 2:
		ceramic__$Tween_TweenEasingFunction.backEaseIn();
		break;
	case 3:
		ceramic__$Tween_TweenEasingFunction.backEaseInOut();
		break;
	case 4:
		ceramic__$Tween_TweenEasingFunction.backEaseOut();
		break;
	case 5:
		ceramic__$Tween_TweenEasingFunction.quadEaseIn();
		break;
	case 6:
		ceramic__$Tween_TweenEasingFunction.quadEaseInOut();
		break;
	case 7:
		ceramic__$Tween_TweenEasingFunction.quadEaseOut();
		break;
	case 8:
		ceramic__$Tween_TweenEasingFunction.cubicEaseIn();
		break;
	case 9:
		ceramic__$Tween_TweenEasingFunction.cubicEaseInOut();
		break;
	case 10:
		ceramic__$Tween_TweenEasingFunction.cubicEaseOut();
		break;
	case 11:
		ceramic__$Tween_TweenEasingFunction.quartEaseIn();
		break;
	case 12:
		ceramic__$Tween_TweenEasingFunction.quartEaseInOut();
		break;
	case 13:
		ceramic__$Tween_TweenEasingFunction.quartEaseOut();
		break;
	case 14:
		ceramic__$Tween_TweenEasingFunction.quintEaseIn();
		break;
	case 15:
		ceramic__$Tween_TweenEasingFunction.quintEaseInOut();
		break;
	case 16:
		ceramic__$Tween_TweenEasingFunction.quintEaseOut();
		break;
	case 17:
		ceramic__$Tween_TweenEasingFunction.bounceEaseIn();
		break;
	case 18:
		ceramic__$Tween_TweenEasingFunction.bounceEaseInOut();
		break;
	case 19:
		ceramic__$Tween_TweenEasingFunction.bounceEaseOut();
		break;
	case 20:
		ceramic__$Tween_TweenEasingFunction.elasticEaseIn();
		break;
	case 21:
		ceramic__$Tween_TweenEasingFunction.elasticEaseInOut();
		break;
	case 22:
		ceramic__$Tween_TweenEasingFunction.elasticEaseOut();
		break;
	case 23:
		ceramic__$Tween_TweenEasingFunction.expoEaseIn();
		break;
	case 24:
		ceramic__$Tween_TweenEasingFunction.expoEaseInOut();
		break;
	case 25:
		ceramic__$Tween_TweenEasingFunction.expoEaseOut();
		break;
	case 26:
		ceramic__$Tween_TweenEasingFunction.sineEaseIn();
		break;
	case 27:
		ceramic__$Tween_TweenEasingFunction.sineEaseInOut();
		break;
	case 28:
		ceramic__$Tween_TweenEasingFunction.sineEaseOut();
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic__$Tween_TweenEasingFunction.customEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		ceramic__$Tween_TweenEasingFunction.custom();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic__$Tween_TweenEasingFunction.customEasing = easing1;
		ceramic__$Tween_TweenEasingFunction.custom();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		break;
	}
	return ceramic__$Tween_TweenEasingFunction.k;
};
ceramic_Tween.easingFunction = function(easing) {
	switch(easing._hx_index) {
	case 0:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
		break;
	case 1:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
		break;
	case 2:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
		break;
	case 3:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
		break;
	case 4:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
		break;
	case 5:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
		break;
	case 6:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
		break;
	case 7:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
		break;
	case 8:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
		break;
	case 9:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
		break;
	case 10:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
		break;
	case 11:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
		break;
	case 12:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
		break;
	case 13:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
		break;
	case 14:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
		break;
	case 15:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
		break;
	case 16:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
		break;
	case 17:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
		break;
	case 18:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
		break;
	case 19:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
		break;
	case 20:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
		break;
	case 21:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
		break;
	case 22:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
		break;
	case 23:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
		break;
	case 24:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
		break;
	case 25:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
		break;
	case 26:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
		break;
	case 27:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
		break;
	case 28:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = easing1;
		break;
	}
	var computedEasing = ceramic_Tween._computedEasingFunction;
	var customEasing = ceramic_Tween._computedCustomEasing;
	return function(value) {
		ceramic__$Tween_TweenEasingFunction.k = value;
		ceramic__$Tween_TweenEasingFunction.customEasing = customEasing;
		computedEasing();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		return ceramic__$Tween_TweenEasingFunction.k;
	};
};
ceramic_Tween.__super__ = ceramic_Entity;
ceramic_Tween.prototype = $extend(ceramic_Entity.prototype,{
	emitUpdate: function(value,time) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnUpdate[ii];
					++i;
				}
			}
			if(this.__cbOnceUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceUpdate[ii];
					var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceUpdate = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,time);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleValueTime) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValueTime != null) {
					_gthis.offUpdate(handleValueTime);
					handleValueTime = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValueTime = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleValueTime);
	}
	,onceUpdate: function(owner,handleValueTime) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValueTime != null) {
					_gthis.offUpdate(handleValueTime);
					handleValueTime = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValueTime = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleValueTime);
	}
	,offUpdate: function(handleValueTime) {
		if(handleValueTime != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleValueTime);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleValueTime);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,emitComplete: function() {
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnComplete[ii];
					++i;
				}
			}
			if(this.__cbOnceComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceComplete[ii];
					var unbind = this.__cbOnceOwnerUnbindComplete[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceComplete = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offComplete(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handle);
	}
	,onceComplete: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offComplete(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handle);
	}
	,offComplete: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handle);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handle);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,init: function() {
		if(this.duration <= 0.0) {
			ceramic_App.app.onceImmediate($bind(this,this.immediateComplete));
			return;
		}
		var easing = this.easing;
		switch(easing._hx_index) {
		case 0:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
			break;
		case 1:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
			break;
		case 2:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
			break;
		case 3:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
			break;
		case 4:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
			break;
		case 5:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
			break;
		case 6:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
			break;
		case 7:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
			break;
		case 8:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
			break;
		case 9:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
			break;
		case 10:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
			break;
		case 11:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
			break;
		case 12:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
			break;
		case 13:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
			break;
		case 14:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
			break;
		case 15:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
			break;
		case 16:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
			break;
		case 17:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
			break;
		case 18:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
			break;
		case 19:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
			break;
		case 20:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
			break;
		case 21:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
			break;
		case 22:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
			break;
		case 23:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
			break;
		case 24:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
			break;
		case 25:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
			break;
		case 26:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
			break;
		case 27:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
			break;
		case 28:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
			break;
		case 29:
			var x1 = easing.x1;
			var y1 = easing.y1;
			var x2 = easing.x2;
			var y2 = easing.y2;
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
			ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
			break;
		case 30:
			var easing1 = easing.easing;
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
			ceramic_Tween._computedCustomEasing = easing1;
			break;
		}
		this.computedEasing = ceramic_Tween._computedEasingFunction;
		this.customEasing = ceramic_Tween._computedCustomEasing;
		ceramic_Tween._computedEasingFunction = null;
		ceramic_Tween._computedCustomEasing = null;
		ceramic_Tween._tweens.push(this);
		this.remaining = this.duration;
		ceramic_App.app.onceImmediate($bind(this,this.immediateStart));
	}
	,updateFromTick: function(delta) {
		if(this.owner != null && this.owner._lifecycleState < 0) {
			this.destroy();
		} else {
			this.remaining -= delta;
			if(this.remaining <= 0) {
				this.emitUpdate(this.toValue,this.duration);
				this.emitComplete();
				this.destroy();
			} else {
				var elapsed = this.duration - this.remaining;
				ceramic__$Tween_TweenEasingFunction.k = elapsed / this.duration;
				var k = ceramic__$Tween_TweenEasingFunction.k;
				ceramic__$Tween_TweenEasingFunction.customEasing = this.customEasing;
				this.computedEasing();
				ceramic__$Tween_TweenEasingFunction.customEasing = null;
				this.emitUpdate(this.fromValue + (this.toValue - this.fromValue) * ceramic__$Tween_TweenEasingFunction.k,elapsed);
			}
		}
	}
	,immediateComplete: function() {
		this.emitUpdate(this.toValue,0);
		this.emitComplete();
		this.destroy();
	}
	,immediateStart: function() {
		this.emitUpdate(this.fromValue,0);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.easing = null;
		this.owner = null;
		this.computedEasing = null;
		this.customEasing = null;
		HxOverrides.remove(ceramic_Tween._tweens,this);
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offUpdate();
		this.offComplete();
	}
	,__class__: ceramic_Tween
});
var ceramic__$Tween_TweenEasingFunction = function() { };
$hxClasses["ceramic._Tween.TweenEasingFunction"] = ceramic__$Tween_TweenEasingFunction;
ceramic__$Tween_TweenEasingFunction.__name__ = "ceramic._Tween.TweenEasingFunction";
ceramic__$Tween_TweenEasingFunction.custom = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.customEasing(ceramic__$Tween_TweenEasingFunction.k);
};
ceramic__$Tween_TweenEasingFunction.none = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k >= 1 ? 1 : 0;
};
ceramic__$Tween_TweenEasingFunction.linear = function() {
};
ceramic__$Tween_TweenEasingFunction.backEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * (2.70158 * ceramic__$Tween_TweenEasingFunction.k - 1.70158);
};
ceramic__$Tween_TweenEasingFunction.backEaseInOut = function() {
	var s = 1.70158;
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * (ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * (((s *= 1.525) + 1) * ceramic__$Tween_TweenEasingFunction.k - s));
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * (((s *= 1.525) + 1) * ceramic__$Tween_TweenEasingFunction.k + s) + 2);
	}
};
ceramic__$Tween_TweenEasingFunction.backEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = (ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k - 1) * ceramic__$Tween_TweenEasingFunction.k * (2.70158 * ceramic__$Tween_TweenEasingFunction.k + 1.70158) + 1;
};
ceramic__$Tween_TweenEasingFunction.quadEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k *= ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quadEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * ((ceramic__$Tween_TweenEasingFunction.k - 1) * (ceramic__$Tween_TweenEasingFunction.k - 3) - 1);
	}
};
ceramic__$Tween_TweenEasingFunction.quadEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -ceramic__$Tween_TweenEasingFunction.k * (ceramic__$Tween_TweenEasingFunction.k - 2);
};
ceramic__$Tween_TweenEasingFunction.cubicEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.cubicEaseInOut = function() {
	var tmp;
	var tmp1 = ceramic__$Tween_TweenEasingFunction;
	if((tmp1.k /= 0.5) < 1) {
		tmp = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp1 = ceramic__$Tween_TweenEasingFunction;
		tmp = 0.5 * ((tmp1.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 2);
	}
	ceramic__$Tween_TweenEasingFunction.k = tmp;
};
ceramic__$Tween_TweenEasingFunction.cubicEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = --ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 1;
};
ceramic__$Tween_TweenEasingFunction.quartEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quartEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k - 2);
	}
};
ceramic__$Tween_TweenEasingFunction.quartEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -(--ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k - 1);
};
ceramic__$Tween_TweenEasingFunction.quintEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quintEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 2);
	}
};
ceramic__$Tween_TweenEasingFunction.quintEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = --ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 1;
};
ceramic__$Tween_TweenEasingFunction.bounceEaseIn = function() {
	var t = 1 - ceramic__$Tween_TweenEasingFunction.k;
	var result;
	if((t /= 1) < 0.363636363636363646) {
		result = 7.5625 * t * t;
	} else if(t < 0.727272727272727293) {
		result = 7.5625 * (t -= 0.545454545454545414) * t + 0.75;
	} else if(t < 0.909090909090909061) {
		result = 7.5625 * (t -= 0.818181818181818232) * t + 0.9375;
	} else {
		result = 7.5625 * (t -= 0.954545454545454586) * t + 0.984375;
	}
	ceramic__$Tween_TweenEasingFunction.k = 1 - result;
};
ceramic__$Tween_TweenEasingFunction.bounceEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k < .5) {
		var t = 1 - ceramic__$Tween_TweenEasingFunction.k * 2;
		var result;
		if((t /= 1) < 0.363636363636363646) {
			result = 7.5625 * t * t;
		} else if(t < 0.727272727272727293) {
			result = 7.5625 * (t -= 0.545454545454545414) * t + 0.75;
		} else if(t < 0.909090909090909061) {
			result = 7.5625 * (t -= 0.818181818181818232) * t + 0.9375;
		} else {
			result = 7.5625 * (t -= 0.954545454545454586) * t + 0.984375;
		}
		ceramic__$Tween_TweenEasingFunction.k = (1 - result) * 0.5;
	} else {
		var t = ceramic__$Tween_TweenEasingFunction.k * 2 - 1;
		var result;
		if((t /= 1) < 0.363636363636363646) {
			result = 7.5625 * t * t;
		} else if(t < 0.727272727272727293) {
			result = 7.5625 * (t -= 0.545454545454545414) * t + 0.75;
		} else if(t < 0.909090909090909061) {
			result = 7.5625 * (t -= 0.818181818181818232) * t + 0.9375;
		} else {
			result = 7.5625 * (t -= 0.954545454545454586) * t + 0.984375;
		}
		ceramic__$Tween_TweenEasingFunction.k = result * 0.5 + 0.5;
	}
};
ceramic__$Tween_TweenEasingFunction.bounceEaseOut = function() {
	var t = ceramic__$Tween_TweenEasingFunction.k;
	var result;
	if((t /= 1) < 0.363636363636363646) {
		result = 7.5625 * t * t;
	} else if(t < 0.727272727272727293) {
		result = 7.5625 * (t -= 0.545454545454545414) * t + 0.75;
	} else if(t < 0.909090909090909061) {
		result = 7.5625 * (t -= 0.818181818181818232) * t + 0.9375;
	} else {
		result = 7.5625 * (t -= 0.954545454545454586) * t + 0.984375;
	}
	ceramic__$Tween_TweenEasingFunction.k = result;
};
ceramic__$Tween_TweenEasingFunction._bounceEaseIn = function(t,b,c,d) {
	var t1 = d - t;
	var result;
	if((t1 /= d) < 0.363636363636363646) {
		result = c * (7.5625 * t1 * t1);
	} else if(t1 < 0.727272727272727293) {
		result = c * (7.5625 * (t1 -= 0.545454545454545414) * t1 + 0.75);
	} else if(t1 < 0.909090909090909061) {
		result = c * (7.5625 * (t1 -= 0.818181818181818232) * t1 + 0.9375);
	} else {
		result = c * (7.5625 * (t1 -= 0.954545454545454586) * t1 + 0.984375);
	}
	return c - result + b;
};
ceramic__$Tween_TweenEasingFunction._bounceEaseOut = function(t,b,c,d) {
	var result;
	if((t /= d) < 0.363636363636363646) {
		result = c * (7.5625 * t * t) + b;
	} else if(t < 0.727272727272727293) {
		result = c * (7.5625 * (t -= 0.545454545454545414) * t + 0.75) + b;
	} else if(t < 0.909090909090909061) {
		result = c * (7.5625 * (t -= 0.818181818181818232) * t + 0.9375) + b;
	} else {
		result = c * (7.5625 * (t -= 0.954545454545454586) * t + 0.984375) + b;
	}
	return result;
};
ceramic__$Tween_TweenEasingFunction.elasticEaseIn = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var a = 0.1;
	var p = 0.4;
	var s;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	ceramic__$Tween_TweenEasingFunction.k = -(a * Math.exp(6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p));
};
ceramic__$Tween_TweenEasingFunction.elasticEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) == 2) {
		ceramic__$Tween_TweenEasingFunction.k = 1;
		return;
	}
	var p = 0.449999999999999956;
	var s = p / 4;
	if(ceramic__$Tween_TweenEasingFunction.k < 1) {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * (Math.exp(6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p));
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = Math.exp(-6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	}
};
ceramic__$Tween_TweenEasingFunction.elasticEaseOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var a = 0.1;
	var p = 0.4;
	var s;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	ceramic__$Tween_TweenEasingFunction.k = a * Math.exp(-6.931471805599453 * ceramic__$Tween_TweenEasingFunction.k) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p) + 1;
};
ceramic__$Tween_TweenEasingFunction.expoEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k == 0 ? 0 : Math.exp(6.931471805599453 * (ceramic__$Tween_TweenEasingFunction.k - 1));
};
ceramic__$Tween_TweenEasingFunction.expoEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k /= 0.5) < 1.0) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * Math.exp(6.931471805599453 * (ceramic__$Tween_TweenEasingFunction.k - 1));
	} else {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * (2 - Math.exp(-6.931471805599453 * --ceramic__$Tween_TweenEasingFunction.k));
	}
};
ceramic__$Tween_TweenEasingFunction.expoEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k == 1 ? 1 : 1 - Math.exp(-6.931471805599453 * ceramic__$Tween_TweenEasingFunction.k);
};
ceramic__$Tween_TweenEasingFunction.sineEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = 1 - Math.cos(ceramic__$Tween_TweenEasingFunction.k * (Math.PI / 2));
};
ceramic__$Tween_TweenEasingFunction.sineEaseInOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -(Math.cos(Math.PI * ceramic__$Tween_TweenEasingFunction.k) - 1) / 2;
};
ceramic__$Tween_TweenEasingFunction.sineEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = Math.sin(ceramic__$Tween_TweenEasingFunction.k * (Math.PI / 2));
};
var ceramic_Utils = function() { };
$hxClasses["ceramic.Utils"] = ceramic_Utils;
ceramic_Utils.__name__ = "ceramic.Utils";
ceramic_Utils.realPath = function(path) {
	if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
		path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
	}
	return path;
};
ceramic_Utils.getRtti = function(c) {
	return ceramic_PlatformSpecific.getRtti(c);
};
ceramic_Utils.uniqueId = function() {
	switch(ceramic_Utils._nextUniqueIntCursor) {
	case 0:
		ceramic_Utils._nextUniqueInt0 = (ceramic_Utils._nextUniqueInt0 + 1) % 2147483647;
		break;
	case 1:
		ceramic_Utils._nextUniqueInt1 = (ceramic_Utils._nextUniqueInt1 + 1) % 2147483647;
		break;
	case 2:
		ceramic_Utils._nextUniqueInt2 = (ceramic_Utils._nextUniqueInt2 + 1) % 2147483647;
		break;
	case 3:
		ceramic_Utils._nextUniqueInt3 = (ceramic_Utils._nextUniqueInt3 + 1) % 2147483647;
		break;
	}
	ceramic_Utils._nextUniqueIntCursor = (ceramic_Utils._nextUniqueIntCursor + 1) % 4;
	var val = ceramic_Utils._nextUniqueInt0;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result1;
		if(q > 0) {
			var result2 = ceramic_Utils.base62Id(q);
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result1 = result2 + result3;
		} else {
			var result2;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result2 = String.fromCodePoint(ascii);
			} else {
				result2 = Std.string(r1).charAt(0);
			}
			result1 = Std.string(result2);
		}
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result = result1 + result2;
	} else {
		var result1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result1 = String.fromCodePoint(ascii);
		} else {
			result1 = Std.string(r).charAt(0);
		}
		result = Std.string(result1);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result1;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result2;
		if(q > 0) {
			var result3 = ceramic_Utils.base62Id(q);
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result2 = result3 + result4;
		} else {
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result2 = Std.string(result3);
		}
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result1 = result2 + result3;
	} else {
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result1 = Std.string(result2);
	}
	var val = ceramic_Utils._nextUniqueInt1;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result2;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result3;
		if(q > 0) {
			var result4 = ceramic_Utils.base62Id(q);
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result3 = result4 + result5;
		} else {
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result3 = Std.string(result4);
		}
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result2 = result3 + result4;
	} else {
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result2 = Std.string(result3);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result3;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result4;
		if(q > 0) {
			var result5 = ceramic_Utils.base62Id(q);
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result4 = result5 + result6;
		} else {
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result4 = Std.string(result5);
		}
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result3 = result4 + result5;
	} else {
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result3 = Std.string(result4);
	}
	var val = ceramic_Utils._nextUniqueInt2;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result4;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result5;
		if(q > 0) {
			var result6 = ceramic_Utils.base62Id(q);
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result5 = result6 + result7;
		} else {
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result5 = Std.string(result6);
		}
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result4 = result5 + result6;
	} else {
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result4 = Std.string(result5);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result5;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result6;
		if(q > 0) {
			var result7 = ceramic_Utils.base62Id(q);
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result6 = result7 + result8;
		} else {
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result6 = Std.string(result7);
		}
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result5 = result6 + result7;
	} else {
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result5 = Std.string(result6);
	}
	var val = ceramic_Utils._nextUniqueInt3;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result6;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result7;
		if(q > 0) {
			var result8 = ceramic_Utils.base62Id(q);
			var result9;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result9 = String.fromCodePoint(ascii);
			} else {
				result9 = Std.string(r1).charAt(0);
			}
			result7 = result8 + result9;
		} else {
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result7 = Std.string(result8);
		}
		var result8;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result8 = String.fromCodePoint(ascii);
		} else {
			result8 = Std.string(r).charAt(0);
		}
		result6 = result7 + result8;
	} else {
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result6 = Std.string(result7);
	}
	var result7 = result + "-" + result1 + "-" + result2 + "-" + result3 + "-" + result4 + "-" + result5 + "-" + result6;
	return result7;
};
ceramic_Utils.randomId = function(size) {
	if(size == null) {
		size = 32;
	}
	var chars = [];
	while(chars.length < size) {
		var val = null;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		var chunk;
		if(q > 0) {
			var val1 = q;
			if(val1 == null) {
				val1 = Math.random() * 2147483646 | 0;
			}
			var r1 = val1 % 62 | 0;
			var q1 = val1 / 62 | 0;
			var chunk1;
			if(q1 > 0) {
				var chunk2 = ceramic_Utils.base62Id(q1);
				var chunk3;
				if(r1 > 9) {
					var ascii = 65 + (r1 - 10);
					if(ascii > 90) {
						ascii += 6;
					}
					chunk3 = String.fromCodePoint(ascii);
				} else {
					chunk3 = Std.string(r1).charAt(0);
				}
				chunk1 = chunk2 + chunk3;
			} else {
				var chunk4;
				if(r1 > 9) {
					var ascii1 = 65 + (r1 - 10);
					if(ascii1 > 90) {
						ascii1 += 6;
					}
					chunk4 = String.fromCodePoint(ascii1);
				} else {
					chunk4 = Std.string(r1).charAt(0);
				}
				chunk1 = Std.string(chunk4);
			}
			var chunk5;
			if(r > 9) {
				var ascii2 = 65 + (r - 10);
				if(ascii2 > 90) {
					ascii2 += 6;
				}
				chunk5 = String.fromCodePoint(ascii2);
			} else {
				chunk5 = Std.string(r).charAt(0);
			}
			chunk = chunk1 + chunk5;
		} else {
			var chunk6;
			if(r > 9) {
				var ascii3 = 65 + (r - 10);
				if(ascii3 > 90) {
					ascii3 += 6;
				}
				chunk6 = String.fromCodePoint(ascii3);
			} else {
				chunk6 = Std.string(r).charAt(0);
			}
			chunk = Std.string(chunk6);
		}
		var _g = 0;
		var _g1 = chunk.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(chunk.charAt(i));
		}
	}
	ceramic_Extensions.shuffle(chars);
	return HxOverrides.substr(chars.join(""),0,size);
};
ceramic_Utils.persistentId = function(slot,size) {
	if(size == null) {
		size = 32;
	}
	if(slot == null) {
		slot = 0;
	}
	if(ceramic_Utils._persistentIds == null) {
		ceramic_Utils._persistentIds = new haxe_ds_IntMap();
	}
	var id = ceramic_Utils._persistentIds.h[slot];
	if(id != null) {
		return id;
	}
	id = ceramic_App.app.backend.io.readString("persistentId_" + slot);
	if(id != null) {
		ceramic_Utils._persistentIds.h[slot] = id;
		return id;
	}
	id = ceramic_Utils.randomId(size);
	if(!ceramic_App.app.backend.io.saveString("persistentId_" + slot,id)) {
		ceramic_App.app.logger.warning("Failed to save persistent id (" + id + ") at slot " + slot,{ fileName : "/Users/jeremyfa/Developer/ceramic/runtime/src/ceramic/Utils.hx", lineNumber : 115, className : "ceramic.Utils", methodName : "persistentId"});
	}
	ceramic_Utils._persistentIds.h[slot] = id;
	return id;
};
ceramic_Utils.resetPersistentId = function(slot) {
	if(slot == null) {
		slot = 0;
	}
	if(ceramic_Utils._persistentIds != null) {
		ceramic_Utils._persistentIds.remove(slot);
	}
	ceramic_App.app.backend.io.saveString("persistentId_" + slot,null);
};
ceramic_Utils.base62Id = function(val) {
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	if(q > 0) {
		var tmp = ceramic_Utils.base62Id(q);
		var tmp1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp1 = String.fromCodePoint(ascii);
		} else {
			tmp1 = (r == null ? "null" : "" + r).charAt(0);
		}
		return tmp + tmp1;
	} else {
		var tmp;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp = String.fromCodePoint(ascii);
		} else {
			tmp = (r == null ? "null" : "" + r).charAt(0);
		}
		return Std.string(tmp);
	}
};
ceramic_Utils.printStackTrace = function() {
	var result_b = "";
	var electronRunner = null;
	var jsError = null;
	
            try {
                throw new Error();
            } catch (e) {
                jsError = e;
            }
        ;
	var stack = ("" + Std.string(jsError.stack)).split("\n");
	var len = stack.length;
	var i = len - 1;
	var file = "";
	var line = 0;
	var isWin = navigator.platform.indexOf("Win") != -1;
	while(i >= 2) {
		var str = stack[i];
		str = StringTools.ltrim(str);
		if(electronRunner != null) {
			str = StringTools.replace(str,"http://localhost:" + Std.string(electronRunner.serverPort) + "/file:" + (isWin ? "/" : ""),"");
			str = StringTools.replace(str,"http://localhost:" + Std.string(electronRunner.serverPort) + "/",Std.string(electronRunner.appFiles) + "/");
		}
		var data = str;
		if(electronRunner != null) {
			electronRunner.consoleLog("[error] " + Std.string(data));
		} else {
			console.log("" + Std.string(data));
		}
		--i;
	}
	return result_b;
};
ceramic_Utils.stackItemToString = function(item) {
	var str = "";
	switch(item._hx_index) {
	case 0:
		str = "a C function";
		break;
	case 1:
		var m = item.m;
		str = "module " + m;
		break;
	case 2:
		var _g = item.column;
		var itm = item.s;
		var file = item.file;
		var line = item.line;
		if(itm != null) {
			str = ceramic_Utils.stackItemToString(itm) + " (";
		}
		str += file;
		str += " line ";
		str += line;
		if(itm != null) {
			str += ")";
		}
		break;
	case 3:
		var cname = item.classname;
		var meth = item.method;
		str += cname;
		str += ".";
		str += meth;
		break;
	case 4:
		var n = item.v;
		str += "local function #";
		str += n;
		break;
	}
	return str;
};
ceramic_Utils.radToDeg = function(rad) {
	return rad * 57.29577951308232;
};
ceramic_Utils.degToRad = function(deg) {
	return deg * 0.017453292519943295;
};
ceramic_Utils.round = function(value,decimals) {
	if(decimals == null) {
		decimals = 0;
	}
	if(decimals > 0) {
		var factor = 1.0;
		while(decimals-- > 0) factor *= 10.0;
		return Math.round(value * factor) / factor;
	} else {
		return Math.round(value);
	}
};
ceramic_Utils.clampDegrees = function(deg) {
	while(deg < 0) deg += 360;
	while(deg >= 360) deg -= 360;
	return deg;
};
ceramic_Utils.distance = function(x1,y1,x2,y2) {
	var dx = x2 - x1;
	var dy = y2 - y1;
	return Math.sqrt(dx * dx + dy * dy);
};
ceramic_Utils.hashCode = function(s) {
	var hash = 0;
	if(s.length == 0) {
		return hash;
	}
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		hash = (hash << 5) - hash + HxOverrides.cca(s,i);
		hash &= hash;
	}
	return hash;
};
ceramic_Utils.uniformFrequencyList = function(values,frequencies,size) {
	var list = [];
	var pickValues = [];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] = 0;
	}
	var _g = 0;
	var _g1 = frequencies.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] += frequencies[i];
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var index = _g++;
		var bestPick = 0;
		var bestPickValue = 0.0;
		var _g2 = 0;
		var _g3 = values.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var pickValue = pickValues[i];
			if(pickValue > bestPickValue) {
				bestPick = i;
				bestPickValue = pickValue;
			}
		}
		list.push(values[bestPick]);
		pickValues[bestPick] -= 1.0;
		var _g4 = 0;
		var _g5 = frequencies.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			pickValues[i1] += frequencies[i1];
		}
	}
	return list;
};
ceramic_Utils.upperCaseToCamelCase = function(input,firstLetterUppercase) {
	if(firstLetterUppercase == null) {
		firstLetterUppercase = true;
	}
	var res_b = "";
	var len = input.length;
	var i = 0;
	var nextLetterUpperCase = firstLetterUppercase;
	while(i < len) {
		var c = input.charAt(i);
		if(c == "_") {
			nextLetterUpperCase = true;
		} else if(nextLetterUpperCase) {
			nextLetterUpperCase = false;
			res_b += Std.string(c.toUpperCase());
		} else {
			res_b += Std.string(c.toLowerCase());
		}
		++i;
	}
	return res_b;
};
ceramic_Utils.camelCaseToUpperCase = function(input,firstLetterUppercase) {
	if(firstLetterUppercase == null) {
		firstLetterUppercase = true;
	}
	var res_b = "";
	var len = input.length;
	var i = 0;
	var canAddSpace = false;
	while(i < len) {
		var c = input.charAt(i);
		if(c == ".") {
			res_b += "_";
			canAddSpace = false;
		} else if(ceramic_Utils.RE_ASCII_CHAR.match(c)) {
			var uc = c.toUpperCase();
			var isUpperCase = c == uc;
			if(canAddSpace && isUpperCase) {
				res_b += "_";
				canAddSpace = false;
			}
			res_b += uc == null ? "null" : "" + uc;
			canAddSpace = !isUpperCase;
		} else {
			res_b += "_";
			canAddSpace = false;
		}
		++i;
	}
	var str = res_b;
	while(StringTools.endsWith(str,"_")) str = HxOverrides.substr(str,0,str.length - 1);
	return str;
};
ceramic_Utils.functionEquals = function(functionA,functionB) {
	return functionA == functionB;
};
ceramic_Utils.decodeUriParams = function(raw) {
	var result = new haxe_ds_StringMap();
	var parts = raw.split("&");
	var _g = 0;
	while(_g < parts.length) {
		var part = parts[_g];
		++_g;
		var equalIndex = part.indexOf("=");
		if(equalIndex != -1) {
			var s = part.substring(0,equalIndex);
			var key = decodeURIComponent(s.split("+").join(" "));
			var s1 = part.substring(equalIndex + 1);
			var value = decodeURIComponent(s1.split("+").join(" "));
			result.h[key] = value;
		}
	}
	return result;
};
ceramic_Utils.sinRatio = function(value) {
	if(value >= 1.0) {
		value %= 1.0;
	}
	return (Math.sin(value * Math.PI * 2) + 1.0) * 0.5;
};
ceramic_Utils.cosRatio = function(value) {
	if(value >= 1.0) {
		value %= 1.0;
	}
	return (Math.cos(value * Math.PI * 2) + 1.0) * 0.5;
};
ceramic_Utils.angleTo = function(x0,y0,x1,y1) {
	return Math.atan2(y1 - y0,x1 - x0) * 57.29577951308232 - 90;
};
var ceramic_WatchDirectory = function(updateInterval) {
	if(updateInterval == null) {
		updateInterval = 1.0;
	}
	this.chokidarWatchers = null;
	this.chokidarUpdatedFilesByWatchedDirectory = null;
	this.startingToWatchDirectories = null;
	this.watchedDirectories = null;
	ceramic_Entity.call(this);
	if(!ceramic_WatchDirectory.didTryRequireChokidar) {
		ceramic_WatchDirectory.didTryRequireChokidar = true;
		ceramic_WatchDirectory.fs = ceramic_PlatformSpecific.nodeRequire("fs");
		if(ceramic_WatchDirectory.fs != null) {
			ceramic_WatchDirectory.chokidar = ceramic_PlatformSpecific.nodeRequire("chokidar");
		}
	}
	this.updateInterval = updateInterval;
	ceramic_Timer.schedule(this,updateInterval,$bind(this,this.tick),updateInterval);
};
$hxClasses["ceramic.WatchDirectory"] = ceramic_WatchDirectory;
ceramic_WatchDirectory.__name__ = "ceramic.WatchDirectory";
ceramic_WatchDirectory.__super__ = ceramic_Entity;
ceramic_WatchDirectory.prototype = $extend(ceramic_Entity.prototype,{
	emitDirectoryChange: function(path,newFiles,previousFiles) {
		var len = 0;
		if(this.__cbOnDirectoryChange != null) {
			len += this.__cbOnDirectoryChange.length;
		}
		if(this.__cbOnceDirectoryChange != null) {
			len += this.__cbOnceDirectoryChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnDirectoryChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnDirectoryChange[ii];
					++i;
				}
			}
			if(this.__cbOnceDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceDirectoryChange.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceDirectoryChange[ii];
					var unbind = this.__cbOnceOwnerUnbindDirectoryChange[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceDirectoryChange = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(path,newFiles,previousFiles);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDirectoryChange: function(owner,handlePathNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "directoryChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handlePathNewFilesPreviousFiles != null) {
					_gthis.offDirectoryChange(handlePathNewFilesPreviousFiles);
					handlePathNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDirectoryChange == null) {
				this.__cbOnOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnOwnerUnbindDirectoryChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handlePathNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDirectoryChange == null) {
				this.__cbOnOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnOwnerUnbindDirectoryChange.push(null);
		}
		if(this.__cbOnDirectoryChange == null) {
			this.__cbOnDirectoryChange = [];
		}
		this.__cbOnDirectoryChange.push(handlePathNewFilesPreviousFiles);
	}
	,onceDirectoryChange: function(owner,handlePathNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "directoryChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handlePathNewFilesPreviousFiles != null) {
					_gthis.offDirectoryChange(handlePathNewFilesPreviousFiles);
					handlePathNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDirectoryChange == null) {
				this.__cbOnceOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnceOwnerUnbindDirectoryChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handlePathNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDirectoryChange == null) {
				this.__cbOnceOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnceOwnerUnbindDirectoryChange.push(null);
		}
		if(this.__cbOnceDirectoryChange == null) {
			this.__cbOnceDirectoryChange = [];
		}
		this.__cbOnceDirectoryChange.push(handlePathNewFilesPreviousFiles);
	}
	,offDirectoryChange: function(handlePathNewFilesPreviousFiles) {
		if(handlePathNewFilesPreviousFiles != null) {
			var index;
			var unbind;
			if(this.__cbOnDirectoryChange != null) {
				index = this.__cbOnDirectoryChange.indexOf(handlePathNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnDirectoryChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDirectoryChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDirectoryChange.splice(index,1);
				}
			}
			if(this.__cbOnceDirectoryChange != null) {
				index = this.__cbOnceDirectoryChange.indexOf(handlePathNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnceDirectoryChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDirectoryChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDirectoryChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDirectoryChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDirectoryChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDirectoryChange = null;
			}
			if(this.__cbOnceOwnerUnbindDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDirectoryChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDirectoryChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDirectoryChange = null;
			}
			this.__cbOnDirectoryChange = null;
			this.__cbOnceDirectoryChange = null;
		}
	}
	,listensDirectoryChange: function() {
		if(!(this.__cbOnDirectoryChange != null && this.__cbOnDirectoryChange.length > 0)) {
			if(this.__cbOnceDirectoryChange != null) {
				return this.__cbOnceDirectoryChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,watchDirectory: function(path) {
		var _gthis = this;
		if(this.watchedDirectories == null) {
			this.watchedDirectories = new haxe_ds_StringMap();
		}
		if(this.startingToWatchDirectories == null) {
			this.startingToWatchDirectories = new haxe_ds_StringMap();
		}
		this.startingToWatchDirectories.h[path] = true;
		ceramic_Runner.runInBackground(function() {
			var newFilesModificationTime = _gthis.computeFilesModificationTime(path);
			ceramic_Runner.runInMain(function() {
				if(!Object.prototype.hasOwnProperty.call(_gthis.startingToWatchDirectories.h,path)) {
					return;
				}
				var _this = _gthis.startingToWatchDirectories;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				_gthis.watchedDirectories.h[path] = newFilesModificationTime;
				if(ceramic_WatchDirectory.chokidar != null) {
					if(_gthis.chokidarUpdatedFilesByWatchedDirectory == null) {
						_gthis.chokidarUpdatedFilesByWatchedDirectory = new haxe_ds_StringMap();
					}
					_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path] = [];
					_gthis.watchWithChokidar(path);
				}
			});
		});
	}
	,watchWithChokidar: function(path) {
		var _gthis = this;
		var watcher = ceramic_WatchDirectory.chokidar.watch(".",{ ignoreInitial : true, disableGlobbing : true, cwd : path});
		if(this.chokidarWatchers == null) {
			this.chokidarWatchers = new haxe_ds_StringMap();
		}
		if(Object.prototype.hasOwnProperty.call(this.chokidarWatchers.h,path)) {
			this.chokidarWatchers.h[path].close();
		}
		this.chokidarWatchers.h[path] = watcher;
		watcher.on("add",function(name) {
			var stats = ceramic_WatchDirectory.fs.statSync(ceramic_Path.join([path,name]));
			if(!stats.isDirectory()) {
				_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 0, lastModified : stats.mtime.getTime() / 1000, name : name});
			}
		});
		watcher.on("change",function(name) {
			var stats = ceramic_WatchDirectory.fs.statSync(ceramic_Path.join([path,name]));
			if(!stats.isDirectory()) {
				_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 1, lastModified : stats.mtime.getTime() / 1000, name : name});
			}
		});
		watcher.on("unlink",function(name) {
			_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 2, lastModified : -1, name : name});
		});
	}
	,stopWatchingDirectory: function(path) {
		if(this.chokidarWatchers != null) {
			if(Object.prototype.hasOwnProperty.call(this.chokidarWatchers.h,path)) {
				this.chokidarWatchers.h[path].close();
				var _this = this.chokidarWatchers;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
			}
		}
		if(this.watchedDirectories == null && Object.prototype.hasOwnProperty.call(this.watchedDirectories.h,path)) {
			var _this = this.watchedDirectories;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			if(this.startingToWatchDirectories != null && Object.prototype.hasOwnProperty.call(this.startingToWatchDirectories.h,path)) {
				var _this = this.startingToWatchDirectories;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
			}
			return true;
		}
		if(this.startingToWatchDirectories != null && Object.prototype.hasOwnProperty.call(this.startingToWatchDirectories.h,path)) {
			var _this = this.startingToWatchDirectories;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			return true;
		}
		return false;
	}
	,tick: function() {
		if(this.watchedDirectories != null) {
			var paths = [];
			var h = this.watchedDirectories.h;
			var path_h = h;
			var path_keys = Object.keys(h);
			var path_length = path_keys.length;
			var path_current = 0;
			while(path_current < path_length) {
				var path = path_keys[path_current++];
				paths.push(path);
			}
			var _g = 0;
			while(_g < paths.length) {
				var path = paths[_g];
				++_g;
				this.checkWatchedDirectory(path);
			}
		}
	}
	,checkWatchedDirectory: function(path) {
		var _gthis = this;
		if(ceramic_WatchDirectory.chokidar != null) {
			if(Object.prototype.hasOwnProperty.call(this.chokidarUpdatedFilesByWatchedDirectory.h,path)) {
				var list = this.chokidarUpdatedFilesByWatchedDirectory.h[path];
				if(list.length > 0) {
					var previousFilesModificationTime = this.watchedDirectories.h[path];
					var newFilesModificationTime = new haxe_ds_StringMap();
					var h = previousFilesModificationTime.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g1_key = key;
						var _g1_value = _g_h[key];
						var key1 = _g1_key;
						var value = _g1_value;
						newFilesModificationTime.h[key1] = value;
					}
					var _g = 0;
					while(_g < list.length) {
						var info = list[_g];
						++_g;
						switch(info.status) {
						case 0:case 1:
							newFilesModificationTime.h[info.name] = info.lastModified;
							break;
						case 2:
							var key = info.name;
							if(Object.prototype.hasOwnProperty.call(newFilesModificationTime.h,key)) {
								delete(newFilesModificationTime.h[key]);
							}
							break;
						}
					}
					if(Object.prototype.hasOwnProperty.call(this.watchedDirectories.h,path)) {
						this.watchedDirectories.h[path] = newFilesModificationTime;
						this.emitDirectoryChange(path,newFilesModificationTime,previousFilesModificationTime);
					}
					list.splice(0,list.length);
				}
			}
		} else {
			var previousFilesModificationTime = this.watchedDirectories.h[path];
			ceramic_Runner.runInBackground(function() {
				var newFilesModificationTime = _gthis.computeFilesModificationTime(path);
				var didChange = false;
				var h = newFilesModificationTime.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					var _g1_key = key;
					var _g1_value = _g_h[key];
					var path1 = _g1_key;
					var mtime = _g1_value;
					if(!Object.prototype.hasOwnProperty.call(previousFilesModificationTime.h,path1)) {
						didChange = true;
						break;
					} else if(mtime > previousFilesModificationTime.h[path1]) {
						didChange = true;
						break;
					}
				}
				if(!didChange) {
					var h = previousFilesModificationTime.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g1_key = key;
						var _g1_value = _g_h[key];
						var path1 = _g1_key;
						var mtime = _g1_value;
						if(!Object.prototype.hasOwnProperty.call(newFilesModificationTime.h,path1)) {
							didChange = true;
							break;
						}
					}
				}
				if(didChange) {
					ceramic_Runner.runInMain(function() {
						if(Object.prototype.hasOwnProperty.call(_gthis.watchedDirectories.h,path)) {
							_gthis.watchedDirectories.h[path] = newFilesModificationTime;
							_gthis.emitDirectoryChange(path,newFilesModificationTime,previousFilesModificationTime);
						}
					});
				}
			});
		}
	}
	,computeFilesModificationTime: function(path) {
		var result = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = ceramic_Files.getFlatDirectory(path);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var value = ceramic_Files.getLastModified(ceramic_Path.join([path,file]));
			result.h[file] = value;
		}
		return result;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offDirectoryChange();
	}
	,__class__: ceramic_WatchDirectory
});
var ceramic_macros_DefinesMacro = function() { };
$hxClasses["ceramic.macros.DefinesMacro"] = ceramic_macros_DefinesMacro;
ceramic_macros_DefinesMacro.__name__ = "ceramic.macros.DefinesMacro";
var ceramic_macros_PluginsMacro = function() { };
$hxClasses["ceramic.macros.PluginsMacro"] = ceramic_macros_PluginsMacro;
ceramic_macros_PluginsMacro.__name__ = "ceramic.macros.PluginsMacro";
var clay_Clay = function(configure,events) {
	this.windowInBackground = false;
	this.ready = false;
	this.freeze = false;
	this.nextTick = 0;
	this.immediateShutdown = false;
	this.timestamp = -1;
	this.hasShutdown = false;
	this.shuttingDown = false;
	clay_Clay.app = this;
	this.extractAppId();
	this.config = this.defaultConfig();
	configure(this.config);
	this.events = events;
	this.io = new clay_web_WebIO(this);
	clay_Immediate.flush();
	this.assets = new clay_web_WebAssets(this);
	clay_Immediate.flush();
	this.audio = new clay_web_WebAudio(this);
	clay_Immediate.flush();
	this.input = new clay_Input(this);
	clay_Immediate.flush();
	this.runtime = new clay_web_WebRuntime(this);
	clay_Immediate.flush();
	this.init();
};
$hxClasses["clay.Clay"] = clay_Clay;
clay_Clay.__name__ = "clay.Clay";
clay_Clay.prototype = {
	set_freeze: function(freeze) {
		this.freeze = freeze;
		if(freeze) {
			this.events.freeze();
			this.audio.suspend();
		} else {
			this.events.unfreeze();
			this.audio.resume();
		}
		return freeze;
	}
	,init: function() {
		clay_Log.debug("Clay / init",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/Clay.hx", lineNumber : 152, className : "clay.Clay", methodName : "init"});
		this.io.init();
		clay_Immediate.flush();
		this.audio.init();
		clay_Immediate.flush();
		this.input.init();
		clay_Immediate.flush();
		this.runtime.init();
		clay_Immediate.flush();
		clay_Log.debug("Clay / ready",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/Clay.hx", lineNumber : 166, className : "clay.Clay", methodName : "init"});
		this.runtime.ready();
		clay_Immediate.flush();
		this.audio.ready();
		clay_Immediate.flush();
		this.timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		this.ready = true;
		this.nextTick = this.timestamp;
		this.updateScreen();
		this.events.ready();
		var shouldExit = this.runtime.run();
		if(shouldExit && !(this.hasShutdown || this.shuttingDown)) {
			this.shutdown();
		}
	}
	,shutdown: function() {
		if(this.shuttingDown) {
			clay_Log.debug("Clay / shutdown() called again, already shutting down - ignoring",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/Clay.hx", lineNumber : 191, className : "clay.Clay", methodName : "shutdown"});
			return;
		}
		if(this.hasShutdown) {
			throw haxe_Exception.thrown("Clay / calling shutdown() more than once is disallowed");
		}
		this.shuttingDown = true;
		this.io.shutdown();
		this.audio.shutdown();
		this.input.shutdown();
		this.runtime.shutdown(this.immediateShutdown);
		clay_Log.debug("Clay / shutdown",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/Clay.hx", lineNumber : 207, className : "clay.Clay", methodName : "shutdown"});
		this.hasShutdown = true;
	}
	,emitQuit: function() {
		this.shutdown();
	}
	,shouldUpdate: function(newTimestamp) {
		if(this.config.updateRate > 0) {
			if(newTimestamp < this.nextTick) {
				return false;
			}
			while(this.nextTick <= newTimestamp) this.nextTick += this.config.updateRate;
		} else {
			this.nextTick = newTimestamp;
		}
		return true;
	}
	,emitTick: function(newTimestamp) {
		if(this.freeze) {
			return;
		}
		clay_Immediate.flush();
		this.updateScreen();
		if(!this.shuttingDown && this.ready) {
			var delta = newTimestamp - this.timestamp;
			this.timestamp = newTimestamp;
			this.audio.tick(delta);
			this.events.tick(delta);
		}
	}
	,emitWindowEvent: function(type,timestamp,windowId,x,y) {
		this.events.windowEvent(type,timestamp,windowId,x,y);
	}
	,emitAppEvent: function(type) {
		this.events.appEvent(type);
	}
	,extractAppId: function() {
		var rawAppId = "\"myproject\"";
		if(StringTools.startsWith(rawAppId,"\"")) {
			this.appId = JSON.parse(rawAppId);
		} else {
			this.appId = rawAppId;
		}
	}
	,defaultConfig: function() {
		var _g = clay_web_WebRuntime.defaultConfig();
		return new clay_Config(this.defaultWindowConfig(),this.defaultRenderConfig(),_g,null);
	}
	,defaultWindowConfig: function() {
		var $window = new clay_WindowConfig(false,false,true,false,536805376,536805376,960,640,"clay app",false,0.0666666666666666657);
		return $window;
	}
	,defaultRenderConfig: function() {
		return new clay_RenderConfig(0,0,0,8,8,8,8,new clay_graphics_Color(0,0,0,1),new clay_RenderConfigWebGL(1,null,null,null,null,null,null,null,null));
	}
	,defaultRuntimeConfig: function() {
		return new clay_web_WebConfig(null,null,null,null,null,null,null);
	}
	,copyWindowConfig: function(config) {
		return new clay_WindowConfig(config.fullscreen,config.trueFullscreen,config.resizable,config.borderless,config.x,config.y,config.width,config.height,"" + config.title,config.noInput,config.backgroundSleep);
	}
	,copyRenderConfig: function(config) {
		return new clay_RenderConfig(config.depth,config.stencil,config.antialiasing,config.redBits,config.greenBits,config.blueBits,config.alphaBits,new clay_graphics_Color(config.defaultClear.r,config.defaultClear.g,config.defaultClear.b,config.defaultClear.a),new clay_RenderConfigWebGL(config.webgl.version,null,null,null,null,null,null,null,null));
	}
	,updateScreen: function() {
		this.screenDensity = clay_Clay.app.runtime.windowDevicePixelRatio();
		var _this = clay_Clay.app.runtime;
		this.screenWidth = Math.round(Math.round(_this.windowW * _this.windowDevicePixelRatio()) / this.screenDensity);
		var _this = clay_Clay.app.runtime;
		this.screenHeight = Math.round(Math.round(_this.windowH * _this.windowDevicePixelRatio()) / this.screenDensity);
	}
	,__class__: clay_Clay
	,__properties__: {set_freeze:"set_freeze"}
};
var clay_RenderConfig = function(depth,stencil,antialiasing,redBits,greenBits,blueBits,alphaBits,defaultClear,webgl) {
	this.webgl = null;
	this.defaultClear = new clay_graphics_Color(0,0,0,1);
	this.alphaBits = 8;
	this.blueBits = 8;
	this.greenBits = 8;
	this.redBits = 8;
	this.antialiasing = 0;
	this.stencil = 0;
	this.depth = 0;
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialiasing != null) {
		this.antialiasing = antialiasing;
	}
	if(redBits != null) {
		this.redBits = redBits;
	}
	if(greenBits != null) {
		this.greenBits = greenBits;
	}
	if(blueBits != null) {
		this.blueBits = blueBits;
	}
	if(alphaBits != null) {
		this.alphaBits = alphaBits;
	}
	if(defaultClear != null) {
		this.defaultClear = defaultClear;
	}
	if(webgl != null) {
		this.webgl = webgl;
	}
};
$hxClasses["clay.RenderConfig"] = clay_RenderConfig;
clay_RenderConfig.__name__ = "clay.RenderConfig";
clay_RenderConfig.prototype = {
	__class__: clay_RenderConfig
};
var clay_RenderConfigWebGL = function(version,alpha,depth,stencil,antialias,premultipliedAlpha,preserveDrawingBuffer,preferLowPowerToHighPerformance,failIfMajorPerformanceCaveat) {
	this.failIfMajorPerformanceCaveat = false;
	this.preferLowPowerToHighPerformance = false;
	this.preserveDrawingBuffer = false;
	this.premultipliedAlpha = false;
	this.antialias = true;
	this.stencil = false;
	this.depth = true;
	this.alpha = false;
	this.version = 1;
	if(version != null) {
		this.version = version;
	}
	if(alpha != null) {
		this.alpha = alpha;
	}
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialias != null) {
		this.antialias = antialias;
	}
	if(premultipliedAlpha != null) {
		this.premultipliedAlpha = premultipliedAlpha;
	}
	if(preserveDrawingBuffer != null) {
		this.preserveDrawingBuffer = preserveDrawingBuffer;
	}
	if(preferLowPowerToHighPerformance != null) {
		this.preferLowPowerToHighPerformance = preferLowPowerToHighPerformance;
	}
	if(failIfMajorPerformanceCaveat != null) {
		this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
	}
};
$hxClasses["clay.RenderConfigWebGL"] = clay_RenderConfigWebGL;
clay_RenderConfigWebGL.__name__ = "clay.RenderConfigWebGL";
clay_RenderConfigWebGL.prototype = {
	__class__: clay_RenderConfigWebGL
};
var clay_WindowConfig = function(fullscreen,trueFullscreen,resizable,borderless,x,y,width,height,title,noInput,backgroundSleep) {
	this.backgroundSleep = 0.0666666666666666657;
	this.noInput = false;
	this.title = null;
	this.height = 640;
	this.width = 960;
	this.y = 0;
	this.x = 0;
	this.borderless = false;
	this.resizable = true;
	this.trueFullscreen = false;
	this.fullscreen = false;
	if(fullscreen != null) {
		this.fullscreen = fullscreen;
	}
	if(trueFullscreen != null) {
		this.trueFullscreen = trueFullscreen;
	}
	if(resizable != null) {
		this.resizable = resizable;
	}
	if(borderless != null) {
		this.borderless = borderless;
	}
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(title != null) {
		this.title = title;
	}
	if(noInput != null) {
		this.noInput = noInput;
	}
	if(backgroundSleep != null) {
		this.backgroundSleep = backgroundSleep;
	}
};
$hxClasses["clay.WindowConfig"] = clay_WindowConfig;
clay_WindowConfig.__name__ = "clay.WindowConfig";
clay_WindowConfig.prototype = {
	__class__: clay_WindowConfig
};
var clay_Config = function($window,render,runtime,updateRate) {
	this.updateRate = 0;
	this.runtime = null;
	this.render = null;
	this.window = null;
	if($window != null) {
		this.window = $window;
	}
	if(render != null) {
		this.render = render;
	}
	if(runtime != null) {
		this.runtime = runtime;
	}
	if(updateRate != null) {
		this.updateRate = updateRate;
	}
};
$hxClasses["clay.Config"] = clay_Config;
clay_Config.__name__ = "clay.Config";
clay_Config.prototype = {
	__class__: clay_Config
};
var clay_Extensions = function() { };
$hxClasses["clay.Extensions"] = clay_Extensions;
clay_Extensions.__name__ = "clay.Extensions";
clay_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
clay_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
var clay_Image = function(width,height,widthActual,heightActual,bitsPerPixel,sourceBitsPerPixel,pixels) {
	this.pixels = null;
	this.sourceBitsPerPixel = 4;
	this.bitsPerPixel = 4;
	this.heightActual = 0;
	this.widthActual = 0;
	this.height = 0;
	this.width = 0;
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(widthActual != null) {
		this.widthActual = widthActual;
	}
	if(heightActual != null) {
		this.heightActual = heightActual;
	}
	if(bitsPerPixel != null) {
		this.bitsPerPixel = bitsPerPixel;
	}
	if(sourceBitsPerPixel != null) {
		this.sourceBitsPerPixel = sourceBitsPerPixel;
	}
	if(pixels != null) {
		this.pixels = pixels;
	}
};
$hxClasses["clay.Image"] = clay_Image;
clay_Image.__name__ = "clay.Image";
clay_Image.prototype = {
	premultiplyAlpha: function() {
		if(this.bitsPerPixel == 4) {
			var pixels = this.pixels;
			var count = pixels.length;
			var index = 0;
			while(index < count) {
				var r = pixels[index];
				var g = pixels[index + 1];
				var b = pixels[index + 2];
				var a = pixels[index + 3] / 255.0;
				pixels[index] = r * a | 0;
				pixels[index + 1] = g * a | 0;
				pixels[index + 2] = b * a | 0;
				index += 4;
			}
		} else {
			clay_Log.warning("Can only premultiply alpha on images with 4 bits per pixels (RGBA)",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/Image.hx", lineNumber : 47, className : "clay.Image", methodName : "premultiplyAlpha"});
		}
	}
	,__class__: clay_Image
};
var clay_Immediate = function() { };
$hxClasses["clay.Immediate"] = clay_Immediate;
clay_Immediate.__name__ = "clay.Immediate";
clay_Immediate.push = function(handleImmediate) {
	if(handleImmediate == null) {
		throw haxe_Exception.thrown("Immediate callback should not be null!");
	}
	if(clay_Immediate.immediateCallbacksLen < clay_Immediate.immediateCallbacksCapacity) {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen] = handleImmediate;
		clay_Immediate.immediateCallbacksLen++;
	} else {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen++] = handleImmediate;
		clay_Immediate.immediateCallbacksCapacity++;
	}
};
clay_Immediate.flush = function() {
	var didFlush = false;
	while(clay_Immediate.immediateCallbacksLen > 0) {
		didFlush = true;
		var pool = ceramic_ArrayPool.pool(clay_Immediate.immediateCallbacksLen);
		var callbacks = pool.get();
		var len = clay_Immediate.immediateCallbacksLen;
		clay_Immediate.immediateCallbacksLen = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			callbacks.vector[i] = clay_Immediate.immediateCallbacks[i];
			clay_Immediate.immediateCallbacks[i] = null;
		}
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var cb = callbacks.vector[i1];
			cb();
		}
		pool.release(callbacks);
	}
	return didFlush;
};
var clay_Input = function(app) {
	this.app = app;
	this.modState = new clay_ModState();
	this.modState.none = true;
};
$hxClasses["clay.Input"] = clay_Input;
clay_Input.__name__ = "clay.Input";
clay_Input.prototype = {
	init: function() {
	}
	,shutdown: function() {
	}
	,emitKeyDown: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyDown(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitKeyUp: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyUp(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitText: function(text,start,length,type,timestamp,windowId) {
		this.app.events.text(text,start,length,type,timestamp,windowId);
	}
	,emitMouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
		this.app.events.mouseMove(x,y,xrel,yrel,timestamp,windowId);
	}
	,emitMouseDown: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseDown(x,y,button,timestamp,windowId);
	}
	,emitMouseUp: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseUp(x,y,button,timestamp,windowId);
	}
	,emitMouseWheel: function(x,y,timestamp,windowId) {
		this.app.events.mouseWheel(x,y,timestamp,windowId);
	}
	,emitTouchDown: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchDown(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchUp: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchMove: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
	}
	,emitGamepadAxis: function(gamepad,axis,value,timestamp) {
		this.app.events.gamepadAxis(gamepad,axis,value,timestamp);
	}
	,emitGamepadDown: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadDown(gamepad,button,value,timestamp);
	}
	,emitGamepadUp: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadUp(gamepad,button,value,timestamp);
	}
	,emitGamepadDevice: function(gamepad,name,type,timestamp) {
		this.app.events.gamepadDevice(gamepad,name,type,timestamp);
	}
	,__class__: clay_Input
};
var clay_KeyCode = {};
clay_KeyCode.$name = function(keyCode) {
	if((keyCode & clay_ScanCode.MASK) != 0) {
		return clay_ScanCode.$name(keyCode & ~clay_ScanCode.MASK);
	}
	switch(keyCode) {
	case 8:
		return clay_ScanCode.$name(42);
	case 9:
		return clay_ScanCode.$name(43);
	case 13:
		return clay_ScanCode.$name(40);
	case 27:
		return clay_ScanCode.$name(41);
	case 32:
		return clay_ScanCode.$name(44);
	case 97:
		return clay_ScanCode.$name(4);
	case 98:
		return clay_ScanCode.$name(5);
	case 99:
		return clay_ScanCode.$name(6);
	case 100:
		return clay_ScanCode.$name(7);
	case 101:
		return clay_ScanCode.$name(8);
	case 102:
		return clay_ScanCode.$name(9);
	case 103:
		return clay_ScanCode.$name(10);
	case 104:
		return clay_ScanCode.$name(11);
	case 105:
		return clay_ScanCode.$name(12);
	case 106:
		return clay_ScanCode.$name(13);
	case 107:
		return clay_ScanCode.$name(14);
	case 108:
		return clay_ScanCode.$name(15);
	case 109:
		return clay_ScanCode.$name(16);
	case 110:
		return clay_ScanCode.$name(17);
	case 111:
		return clay_ScanCode.$name(18);
	case 112:
		return clay_ScanCode.$name(19);
	case 113:
		return clay_ScanCode.$name(20);
	case 114:
		return clay_ScanCode.$name(21);
	case 115:
		return clay_ScanCode.$name(22);
	case 116:
		return clay_ScanCode.$name(23);
	case 117:
		return clay_ScanCode.$name(24);
	case 118:
		return clay_ScanCode.$name(25);
	case 119:
		return clay_ScanCode.$name(26);
	case 120:
		return clay_ScanCode.$name(27);
	case 121:
		return clay_ScanCode.$name(28);
	case 122:
		return clay_ScanCode.$name(29);
	case 127:
		return clay_ScanCode.$name(76);
	default:
		return String.fromCodePoint(keyCode);
	}
};
clay_KeyCode.toScanCode = function(keycode) {
	if((keycode & clay_ScanCode.MASK) != 0) {
		return keycode & ~clay_ScanCode.MASK;
	}
	switch(keycode) {
	case 8:
		return 42;
	case 9:
		return 43;
	case 13:
		return 40;
	case 27:
		return 41;
	case 32:
		return 44;
	case 47:
		return 56;
	case 48:
		return 39;
	case 49:
		return 30;
	case 50:
		return 31;
	case 51:
		return 32;
	case 52:
		return 33;
	case 53:
		return 34;
	case 54:
		return 35;
	case 55:
		return 36;
	case 56:
		return 37;
	case 57:
		return 38;
	case 59:
		return 51;
	case 61:
		return 46;
	case 91:
		return 47;
	case 92:
		return 49;
	case 93:
		return 48;
	case 96:
		return 53;
	case 97:
		return 4;
	case 98:
		return 5;
	case 99:
		return 6;
	case 100:
		return 7;
	case 101:
		return 8;
	case 102:
		return 9;
	case 103:
		return 10;
	case 104:
		return 11;
	case 105:
		return 12;
	case 106:
		return 13;
	case 107:
		return 14;
	case 108:
		return 15;
	case 109:
		return 16;
	case 110:
		return 17;
	case 111:
		return 18;
	case 112:
		return 19;
	case 113:
		return 20;
	case 114:
		return 21;
	case 115:
		return 22;
	case 116:
		return 23;
	case 117:
		return 24;
	case 118:
		return 25;
	case 119:
		return 26;
	case 120:
		return 27;
	case 121:
		return 28;
	case 122:
		return 29;
	}
	return 0;
};
clay_KeyCode.toString = function(this1) {
	return "KeyCode(" + this1 + " " + clay_KeyCode.$name(this1) + ")";
};
var clay_Log = function() { };
$hxClasses["clay.Log"] = clay_Log;
clay_Log.__name__ = "clay.Log";
clay_Log.debug = function(message,pos) {
};
clay_Log.info = function(message,pos) {
	haxe_Log.trace("[info] " + message,pos);
};
clay_Log.warning = function(message,pos) {
	haxe_Log.trace("[warning] " + message,pos);
};
clay_Log.error = function(message,pos) {
	haxe_Log.trace("[error] " + message,pos);
};
clay_Log.success = function(message,pos) {
	haxe_Log.trace("[success] " + message,pos);
};
var clay_Macros = function() { };
$hxClasses["clay.Macros"] = clay_Macros;
clay_Macros.__name__ = "clay.Macros";
var clay_ScanCode = {};
clay_ScanCode.$name = function(scanCode) {
	var res = null;
	if(scanCode >= 0 && scanCode < clay_ScanCode.scanCodeNames.length) {
		res = clay_ScanCode.scanCodeNames[scanCode];
	}
	if(res != null) {
		return res;
	} else {
		return "";
	}
};
clay_ScanCode.toString = function(this1) {
	return "ScanCode(" + this1 + " " + clay_ScanCode.$name(this1) + ")";
};
var clay_GamepadDeviceEventType = {};
clay_GamepadDeviceEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "DEVICE_ADDED";
	case 2:
		return "DEVICE_REMOVED";
	case 3:
		return "DEVICE_REMAPPED";
	default:
		return "" + this1;
	}
};
var clay_ModState = function() {
	this.meta = false;
	this.alt = false;
	this.shift = false;
	this.ctrl = false;
	this.mode = false;
	this.caps = false;
	this.num = false;
	this.rmeta = false;
	this.lmeta = false;
	this.ralt = false;
	this.lalt = false;
	this.rctrl = false;
	this.lctrl = false;
	this.rshift = false;
	this.lshift = false;
	this.none = false;
};
$hxClasses["clay.ModState"] = clay_ModState;
clay_ModState.__name__ = "clay.ModState";
clay_ModState.prototype = {
	toString: function() {
		var s = "{ \"ModState\":true ";
		if(this.none) {
			return s + ", \"none\":true }";
		}
		if(this.lshift) {
			s += ", \"lshift\":true";
		}
		if(this.rshift) {
			s += ", \"rshift\":true";
		}
		if(this.lctrl) {
			s += ", \"lctrl\":true";
		}
		if(this.rctrl) {
			s += ", \"rctrl\":true";
		}
		if(this.lalt) {
			s += ", \"lalt\":true";
		}
		if(this.ralt) {
			s += ", \"ralt\":true";
		}
		if(this.lmeta) {
			s += ", \"lmeta\":true";
		}
		if(this.rmeta) {
			s += ", \"rmeta\":true";
		}
		if(this.num) {
			s += ", \"num\":true";
		}
		if(this.caps) {
			s += ", \"caps\":true";
		}
		if(this.mode) {
			s += ", \"mode\":true";
		}
		if(this.ctrl) {
			s += ", \"ctrl\":true";
		}
		if(this.shift) {
			s += ", \"shift\":true";
		}
		if(this.alt) {
			s += ", \"alt\":true";
		}
		if(this.meta) {
			s += ", \"meta\":true";
		}
		s += "}";
		return s;
	}
	,__class__: clay_ModState
};
var clay_TextEventType = {};
clay_TextEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "EDIT";
	case 2:
		return "INPUT";
	default:
		return "" + this1;
	}
};
var clay_WindowEventType = {};
clay_WindowEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "SHOWN";
	case 2:
		return "HIDDEN";
	case 3:
		return "EXPOSED";
	case 4:
		return "MOVED";
	case 5:
		return "RESIZED";
	case 6:
		return "SIZE_CHANGED";
	case 7:
		return "MINIMIZED";
	case 8:
		return "MAXIMIZED";
	case 9:
		return "RESTORED";
	case 10:
		return "ENTER";
	case 11:
		return "LEAVE";
	case 12:
		return "FOCUS_GAINED";
	case 13:
		return "FOCUS_LOST";
	case 14:
		return "CLOSE";
	case 15:
		return "ENTER_FULLSCREEN";
	case 16:
		return "EXIT_FULLSCREEN";
	default:
		return "" + this1;
	}
};
var clay_AppEventType = {};
clay_AppEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 11:
		return "TERMINATING";
	case 12:
		return "LOW_MEMORY";
	case 13:
		return "WILL_ENTER_BACKGROUND";
	case 14:
		return "DID_ENTER_BACKGROUND";
	case 15:
		return "WILL_ENTER_FOREGROUND";
	case 16:
		return "DID_ENTER_FOREGROUND";
	default:
		return "" + this1;
	}
};
var clay_Utils = function() { };
$hxClasses["clay.Utils"] = clay_Utils;
clay_Utils.__name__ = "clay.Utils";
clay_Utils.uniqueId = function() {
	switch(clay_Utils._nextUniqueIntCursor) {
	case 0:
		clay_Utils._nextUniqueInt0 = (clay_Utils._nextUniqueInt0 + 1) % 2147483647;
		break;
	case 1:
		clay_Utils._nextUniqueInt1 = (clay_Utils._nextUniqueInt1 + 1) % 2147483647;
		break;
	case 2:
		clay_Utils._nextUniqueInt2 = (clay_Utils._nextUniqueInt2 + 1) % 2147483647;
		break;
	case 3:
		clay_Utils._nextUniqueInt3 = (clay_Utils._nextUniqueInt3 + 1) % 2147483647;
		break;
	}
	clay_Utils._nextUniqueIntCursor = (clay_Utils._nextUniqueIntCursor + 1) % 4;
	var val = clay_Utils._nextUniqueInt0;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result1;
		if(q > 0) {
			var result2 = clay_Utils.base62Id(q);
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result1 = result2 + result3;
		} else {
			var result2;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result2 = String.fromCodePoint(ascii);
			} else {
				result2 = Std.string(r1).charAt(0);
			}
			result1 = Std.string(result2);
		}
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result = result1 + result2;
	} else {
		var result1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result1 = String.fromCodePoint(ascii);
		} else {
			result1 = Std.string(r).charAt(0);
		}
		result = Std.string(result1);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result1;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result2;
		if(q > 0) {
			var result3 = clay_Utils.base62Id(q);
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result2 = result3 + result4;
		} else {
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result2 = Std.string(result3);
		}
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result1 = result2 + result3;
	} else {
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result1 = Std.string(result2);
	}
	var val = clay_Utils._nextUniqueInt1;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result2;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result3;
		if(q > 0) {
			var result4 = clay_Utils.base62Id(q);
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result3 = result4 + result5;
		} else {
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result3 = Std.string(result4);
		}
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result2 = result3 + result4;
	} else {
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result2 = Std.string(result3);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result3;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result4;
		if(q > 0) {
			var result5 = clay_Utils.base62Id(q);
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result4 = result5 + result6;
		} else {
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result4 = Std.string(result5);
		}
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result3 = result4 + result5;
	} else {
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result3 = Std.string(result4);
	}
	var val = clay_Utils._nextUniqueInt2;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result4;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result5;
		if(q > 0) {
			var result6 = clay_Utils.base62Id(q);
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result5 = result6 + result7;
		} else {
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result5 = Std.string(result6);
		}
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result4 = result5 + result6;
	} else {
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result4 = Std.string(result5);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result5;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result6;
		if(q > 0) {
			var result7 = clay_Utils.base62Id(q);
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result6 = result7 + result8;
		} else {
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result6 = Std.string(result7);
		}
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result5 = result6 + result7;
	} else {
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result5 = Std.string(result6);
	}
	var val = clay_Utils._nextUniqueInt3;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result6;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result7;
		if(q > 0) {
			var result8 = clay_Utils.base62Id(q);
			var result9;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result9 = String.fromCodePoint(ascii);
			} else {
				result9 = Std.string(r1).charAt(0);
			}
			result7 = result8 + result9;
		} else {
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result7 = Std.string(result8);
		}
		var result8;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result8 = String.fromCodePoint(ascii);
		} else {
			result8 = Std.string(r).charAt(0);
		}
		result6 = result7 + result8;
	} else {
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result6 = Std.string(result7);
	}
	var result7 = result + "-" + result1 + "-" + result2 + "-" + result3 + "-" + result4 + "-" + result5 + "-" + result6;
	return result7;
};
clay_Utils.base62Id = function(val) {
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	if(q > 0) {
		var tmp = clay_Utils.base62Id(q);
		var tmp1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp1 = String.fromCodePoint(ascii);
		} else {
			tmp1 = (r == null ? "null" : "" + r).charAt(0);
		}
		return tmp + tmp1;
	} else {
		var tmp;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp = String.fromCodePoint(ascii);
		} else {
			tmp = (r == null ? "null" : "" + r).charAt(0);
		}
		return Std.string(tmp);
	}
};
var clay_audio_AudioDataOptions = function(id,rate,length,channels,bitsPerSample,format,samples,isStream) {
	this.isStream = null;
	this.samples = null;
	this.format = null;
	this.bitsPerSample = null;
	this.channels = null;
	this.length = null;
	this.rate = null;
	this.id = null;
	if(id != null) {
		this.id = id;
	}
	if(rate != null) {
		this.rate = rate;
	}
	if(length != null) {
		this.length = length;
	}
	if(channels != null) {
		this.channels = channels;
	}
	if(bitsPerSample != null) {
		this.bitsPerSample = bitsPerSample;
	}
	if(format != null) {
		this.format = format;
	}
	if(samples != null) {
		this.samples = samples;
	}
	if(isStream != null) {
		this.isStream = isStream;
	}
};
$hxClasses["clay.audio.AudioDataOptions"] = clay_audio_AudioDataOptions;
clay_audio_AudioDataOptions.__name__ = "clay.audio.AudioDataOptions";
clay_audio_AudioDataOptions.prototype = {
	__class__: clay_audio_AudioDataOptions
};
var clay_audio_AudioData = function(app,options) {
	this.destroyed = false;
	this.isStream = false;
	this.format = 0;
	this.bitsPerSample = 16;
	this.channels = 1;
	this.length = 0;
	this.rate = 44100;
	this.id = "AudioData";
	this.app = app;
	if(options.id != null) {
		this.id = options.id;
	}
	if(options.rate != null) {
		this.rate = options.rate;
	}
	if(options.length != null) {
		this.length = options.length;
	}
	if(options.format != null) {
		this.format = options.format;
	}
	if(options.channels != null) {
		this.channels = options.channels;
	}
	if(options.bitsPerSample != null) {
		this.bitsPerSample = options.bitsPerSample;
	}
	if(options.isStream != null) {
		this.isStream = options.isStream;
	}
	if(options.samples != null) {
		this.samples = options.samples;
	}
	options = null;
};
$hxClasses["clay.audio.AudioData"] = clay_audio_AudioData;
clay_audio_AudioData.__name__ = "clay.audio.AudioData";
clay_audio_AudioData.prototype = {
	destroy: function() {
		if(this.destroyed) {
			return;
		}
		clay_Log.debug("Audio / destroy AudioData `" + this.id + "`",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/audio/AudioData.hx", lineNumber : 95, className : "clay.audio.AudioData", methodName : "destroy"});
		this.destroyed = true;
		this.id = null;
		this.samples = null;
	}
	,seek: function(to) {
		return false;
	}
	,portion: function(into,start,len,intoResult) {
		return intoResult;
	}
	,toString: function() {
		var tmp = "{ \"AudioData\":true, \"id\":" + this.id + ", \"rate\":" + this.rate + ", \"length\":" + this.length + ", \"channels\":" + this.channels + ", \"format\":\"";
		var tmp1;
		if(this.format == null) {
			tmp1 = "null";
		} else {
			var this1 = this.format;
			if(this1 == null) {
				tmp1 = "" + this1;
			} else {
				switch(this1) {
				case 0:
					tmp1 = "UNKNOWN";
					break;
				case 1:
					tmp1 = "CUSTOM";
					break;
				case 2:
					tmp1 = "OGG";
					break;
				case 3:
					tmp1 = "WAV";
					break;
				case 4:
					tmp1 = "PCM";
					break;
				default:
					tmp1 = "" + this1;
				}
			}
		}
		return tmp + tmp1 + "\", \"isStream\":" + Std.string(this.isStream) + " }";
	}
	,__class__: clay_audio_AudioData
};
var clay_audio_AudioEvent = {};
clay_audio_AudioEvent.toString = function(this1) {
	switch(this1) {
	case 0:
		return "END";
	case 1:
		return "DESTROYED";
	case 2:
		return "DESTROYED_SOURCE";
	default:
		return "" + this1;
	}
};
var clay_audio_AudioFormat = {};
clay_audio_AudioFormat.toString = function(this1) {
	if(this1 == null) {
		return "" + this1;
	} else {
		switch(this1) {
		case 0:
			return "UNKNOWN";
		case 1:
			return "CUSTOM";
		case 2:
			return "OGG";
		case 3:
			return "WAV";
		case 4:
			return "PCM";
		default:
			return "" + this1;
		}
	}
};
clay_audio_AudioFormat.fromPath = function(path) {
	var ext = ceramic_Path.extension(path);
	switch(ext.toLowerCase()) {
	case "ogg":
		return 2;
	case "pcm":
		return 4;
	case "wav":
		return 3;
	default:
		return 0;
	}
};
var clay_audio_AudioInstance = function(source,handle) {
	this.destroyed = false;
	this.source = source;
	this.handle = handle;
};
$hxClasses["clay.audio.AudioInstance"] = clay_audio_AudioInstance;
clay_audio_AudioInstance.__name__ = "clay.audio.AudioInstance";
clay_audio_AudioInstance.prototype = {
	hasEnded: function() {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance hasEnded queried after being destroyed");
		}
		return this.source.app.audio.stateOf(this.handle) == 2;
	}
	,destroy: function() {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance being destroyed more than once");
		}
		this.source.app.audio.handleInstanceDestroyed(this.handle);
		this.source.instanceKilled(this);
		this.destroyed = true;
		this.source = null;
		this.handle = -1;
	}
	,dataGet: function(into,start,length,intoResult) {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance dataGet queried after being destroyed");
		}
		return this.source.data.portion(into,start,length,intoResult);
	}
	,dataSeek: function(toSamples) {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance dataSeek queried after being destroyed");
		}
		return this.source.data.seek(toSamples);
	}
	,__class__: clay_audio_AudioInstance
};
var clay_audio_AudioSource = function(app,data) {
	this.destroyed = false;
	this.streamBufferCount = 2;
	this.streamBufferLength = 176400;
	this.app = app;
	this.data = data;
	this.sourceId = clay_Utils.uniqueId();
	clay_Log.debug("AudioSource / `" + this.sourceId + "` / " + this.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/audio/AudioSource.hx", lineNumber : 34, className : "clay.audio.AudioSource", methodName : "new"});
	this.instances = [];
};
$hxClasses["clay.audio.AudioSource"] = clay_audio_AudioSource;
clay_audio_AudioSource.__name__ = "clay.audio.AudioSource";
clay_audio_AudioSource.prototype = {
	instance: function(handle) {
		var instance = new clay_audio_AudioInstance(this,handle);
		if(this.instances.indexOf(instance) == -1) {
			this.instances.push(instance);
		}
		return instance;
	}
	,bytesToSeconds: function(bytes) {
		var word = this.data.bitsPerSample == 16 ? 2 : 1;
		var sampleFrames = this.data.rate * this.data.channels * word;
		return bytes / sampleFrames;
	}
	,secondsToBytes: function(seconds) {
		var word = this.data.bitsPerSample == 16 ? 2 : 1;
		var sampleFrames = this.data.rate * this.data.channels * word;
		return seconds * sampleFrames | 0;
	}
	,getDuration: function() {
		return this.bytesToSeconds(this.data.length);
	}
	,destroy: function() {
		if(this.destroyed) {
			clay_Log.debug("AudioSource / destroying already destroyed source!",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/audio/AudioSource.hx", lineNumber : 82, className : "clay.audio.AudioSource", methodName : "destroy"});
			return;
		}
		this.destroyed = true;
		var c = this.instances.length;
		var i = 0;
		clay_Log.debug("AudioSource / destroy / " + this.sourceId + " / " + this.data.id + ", stream=" + Std.string(this.data.isStream) + ", instances=" + c,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/audio/AudioSource.hx", lineNumber : 91, className : "clay.audio.AudioSource", methodName : "destroy"});
		while(i < c) {
			var instance = this.instances.pop();
			instance.destroy();
			instance = null;
			++i;
		}
		this.app.audio.handleSourceDestroyed(this);
		this.data.destroy();
		this.data = null;
		this.instances = null;
		this.app = null;
	}
	,instanceKilled: function(instance) {
		HxOverrides.remove(this.instances,instance);
	}
	,__class__: clay_audio_AudioSource
};
var clay_audio_AudioState = {};
clay_audio_AudioState.toString = function(this1) {
	switch(this1) {
	case -1:
		return "INVALID";
	case 0:
		return "PAUSED";
	case 1:
		return "PLAYING";
	case 2:
		return "STOPPED";
	default:
		return "" + this1;
	}
};
var clay_base_BaseAssets = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseAssets"] = clay_base_BaseAssets;
clay_base_BaseAssets.__name__ = "clay.base.BaseAssets";
clay_base_BaseAssets.prototype = {
	isSynchronous: function() {
		return false;
	}
	,fullPath: function(path) {
		if(ceramic_Path.isAbsolute(path)) {
			return path;
		} else {
			return ceramic_Path.join([this.app.io.appPath(),path]);
		}
	}
	,loadImage: function(path,components,callback) {
		if(components == null) {
			components = 4;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,__class__: clay_base_BaseAssets
};
var clay_base_BaseAudio = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseAudio"] = clay_base_BaseAudio;
clay_base_BaseAudio.__name__ = "clay.base.BaseAudio";
clay_base_BaseAudio.prototype = {
	isSynchronous: function() {
		return false;
	}
	,init: function() {
	}
	,ready: function() {
	}
	,tick: function(delta) {
	}
	,shutdown: function() {
	}
	,loadData: function(path,isStream,format,callback) {
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,emitAudioEvent: function(event,handle) {
		this.app.events.audioEvent(event,handle);
	}
	,__class__: clay_base_BaseAudio
};
var clay_base_BaseIO = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseIO"] = clay_base_BaseIO;
clay_base_BaseIO.__name__ = "clay.base.BaseIO";
clay_base_BaseIO.prototype = {
	init: function() {
	}
	,shutdown: function() {
	}
	,isSynchronous: function() {
		return false;
	}
	,appPath: function() {
		return null;
	}
	,appPathPrefs: function() {
		return null;
	}
	,loadData: function(path,binary,callback) {
		if(binary == null) {
			binary = false;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,__class__: clay_base_BaseIO
};
var clay_base_BaseRuntime = function(app) {
	this.name = null;
	this.app = app;
};
$hxClasses["clay.base.BaseRuntime"] = clay_base_BaseRuntime;
clay_base_BaseRuntime.__name__ = "clay.base.BaseRuntime";
clay_base_BaseRuntime.prototype = {
	init: function() {
	}
	,shutdown: function(immediate) {
		if(immediate == null) {
			immediate = false;
		}
	}
	,ready: function() {
	}
	,run: function() {
		return true;
	}
	,windowDevicePixelRatio: function() {
		return 1.0;
	}
	,windowWidth: function() {
		return 0;
	}
	,windowHeight: function() {
		return 0;
	}
	,__class__: clay_base_BaseRuntime
};
var clay_buffers_Float32Array = {};
clay_buffers_Float32Array._new = function(_elements) {
	var this1 = new Float32Array(_elements);
	return this1;
};
clay_buffers_Float32Array.fromArray = function(_array) {
	return new Float32Array(_array);
};
clay_buffers_Float32Array.fromView = function(_view) {
	return new Float32Array(_view);
};
clay_buffers_Float32Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Float32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Float32Array.toString = function(this1) {
	return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Int32Array = {};
clay_buffers_Int32Array._new = function(_elements) {
	var this1 = new Int32Array(_elements);
	return this1;
};
clay_buffers_Int32Array.fromArray = function(_array) {
	return new Int32Array(_array);
};
clay_buffers_Int32Array.fromView = function(_view) {
	return new Int32Array(_view);
};
clay_buffers_Int32Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Int32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Int32Array.toString = function(this1) {
	return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Uint16Array = {};
clay_buffers_Uint16Array._new = function(_elements) {
	var this1 = new Uint16Array(_elements);
	return this1;
};
clay_buffers_Uint16Array.fromArray = function(_array) {
	return new Uint16Array(_array);
};
clay_buffers_Uint16Array.fromView = function(_view) {
	return new Uint16Array(_view);
};
clay_buffers_Uint16Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Uint16Array(_buffer,_byteOffset,_byteLength / 2 | 0);
};
clay_buffers_Uint16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Uint16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Uint16Array.toString = function(this1) {
	return "Uint16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Uint8Array = {};
clay_buffers_Uint8Array._new = function(_elements) {
	var this1 = new Uint8Array(_elements);
	return this1;
};
clay_buffers_Uint8Array.fromArray = function(_array) {
	return new Uint8Array(_array);
};
clay_buffers_Uint8Array.fromView = function(_view) {
	return new Uint8Array(_view);
};
clay_buffers_Uint8Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Uint8Array(_buffer,_byteOffset,_byteLength);
};
clay_buffers_Uint8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Uint8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Uint8Array.toString = function(this1) {
	return "Uint8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_graphics_Color = function(r,g,b,a) {
	this.a = 1;
	this.b = 0;
	this.g = 0;
	this.r = 0;
	if(r != null) {
		this.r = r;
	}
	if(g != null) {
		this.g = g;
	}
	if(b != null) {
		this.b = b;
	}
	if(a != null) {
		this.a = a;
	}
};
$hxClasses["clay.graphics.Color"] = clay_graphics_Color;
clay_graphics_Color.__name__ = "clay.graphics.Color";
clay_graphics_Color.prototype = {
	__class__: clay_graphics_Color
};
var clay_graphics_Texture = function() {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.filterMag = 9729;
	this.filterMin = 9729;
	this.pixels = null;
	this.heightActual = -1;
	this.widthActual = -1;
	this.height = -1;
	this.width = -1;
	this.dataType = 5121;
	this.type = 3553;
	this.format = 6408;
	this.compressed = false;
	this.textureId = null;
	clay_Resource.call(this);
	this.index = clay_graphics_Texture._nextIndex++;
};
$hxClasses["clay.graphics.Texture"] = clay_graphics_Texture;
clay_graphics_Texture.__name__ = "clay.graphics.Texture";
clay_graphics_Texture.fromImage = function(image,premultiplyAlpha) {
	if(premultiplyAlpha == null) {
		premultiplyAlpha = false;
	}
	var texture = new clay_graphics_Texture();
	texture.premultiplyAlpha = premultiplyAlpha;
	if(premultiplyAlpha && false) {
		image.premultiplyAlpha();
	}
	if(image.bitsPerPixel != 4) {
		throw haxe_Exception.thrown("Image must have 4 bits per pixels (RGBA format)");
	}
	texture.width = image.width;
	texture.height = image.height;
	texture.widthActual = image.widthActual;
	texture.heightActual = image.heightActual;
	texture.pixels = image.pixels;
	return texture;
};
clay_graphics_Texture.__super__ = clay_Resource;
clay_graphics_Texture.prototype = $extend(clay_Resource.prototype,{
	set_filterMin: function(filterMin) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10241,filterMin);
		}
		return this.filterMin = filterMin;
	}
	,set_filterMag: function(filterMag) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10240,filterMag);
		}
		return this.filterMag = filterMag;
	}
	,set_wrapS: function(wrapS) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
		}
		return this.wrapS = wrapS;
	}
	,set_wrapT: function(wrapT) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
		}
		return this.wrapT = wrapT;
	}
	,init: function() {
		this.textureId = clay_opengl_web_GL.gl.createTexture();
		if(this.width > 0 && this.widthActual <= 0) {
			this.widthActual = this.width;
		}
		if(this.height > 0 && this.heightActual <= 0) {
			this.heightActual = this.height;
		}
		this.bind();
		clay_opengl_web_GL.gl.texParameteri(3553,10241,this.filterMin);
		clay_opengl_web_GL.gl.texParameteri(3553,10240,this.filterMag);
		clay_opengl_web_GL.gl.texParameteri(3553,10243,this.wrapT);
		clay_opengl_web_GL.gl.texParameteri(3553,10242,this.wrapS);
		if(this.pixels != null) {
			if(this.width <= 0 || this.height <= 0) {
				throw haxe_Exception.thrown("Provided texture pixels with invalid size (width=" + this.width + " height=" + this.height + ")");
			}
			this.submit(this.pixels);
		}
	}
	,destroy: function() {
		if(this.textureId != null) {
			var textureId = this.textureId;
			clay_opengl_web_GL.gl.deleteTexture(textureId);
			var _g = 0;
			var _g1 = clay_opengl_GLGraphics._boundTexture2D.length;
			while(_g < _g1) {
				var i = _g++;
				if(clay_opengl_GLGraphics._boundTexture2D[i] == textureId) {
					clay_opengl_GLGraphics._boundTexture2D[i] = null;
				}
			}
			this.textureId = null;
		}
	}
	,bind: function(slot) {
		if(slot == null) {
			slot = 0;
		}
		if(slot != -1) {
			if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
				clay_opengl_GLGraphics._activeTextureSlot = slot;
				while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
				clay_opengl_web_GL.gl.activeTexture(33984 + slot);
			}
		}
		if(this.type == 3553) {
			var textureId = this.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
	}
	,submit: function(pixels) {
		var size = clay_opengl_web_GL.gl.getParameter(3379);
		if(size <= 0) {
			size = 4096;
		}
		var max = size;
		if(pixels == null) {
			pixels = this.pixels;
		}
		if(pixels == null) {
			throw haxe_Exception.thrown("Cannot submit texture pixels: pixels is null");
		}
		if(this.widthActual > max) {
			throw haxe_Exception.thrown("Texture actual width bigger than maximum hardware size (width=" + this.widthActual + " max=" + max + ")");
		}
		if(this.heightActual > max) {
			throw haxe_Exception.thrown("Texture actual height bigger than maximum hardware size (height=" + this.heightActual + " max=" + max + ")");
		}
		this.bind();
		if(this.type == 3553) {
			if(this.compressed) {
				var format = this.format;
				var width = this.widthActual;
				var height = this.heightActual;
				clay_opengl_web_GL.gl.pixelStorei(37441,this.premultiplyAlpha ? 1 : 0);
				clay_opengl_web_GL.gl.compressedTexImage2D(3553,0,format,width,height,0,pixels);
			} else {
				var format = this.format;
				var width = this.widthActual;
				var height = this.heightActual;
				var dataType = this.dataType;
				clay_opengl_web_GL.gl.pixelStorei(37441,this.premultiplyAlpha ? 1 : 0);
				clay_opengl_web_GL.gl.texImage2D(3553,0,format,width,height,0,format,dataType,pixels);
			}
		}
	}
	,fetch: function(into,x,y,w,h) {
		if(h == null) {
			h = -1;
		}
		if(w == null) {
			w = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(w <= 0) {
			w = this.width;
		}
		if(h <= 0) {
			h = this.height;
		}
		this.bind();
		if(this.type == 3553) {
			clay_opengl_GLGraphics.fetchTexture2dPixels(into,x,y,w,h);
		}
		return into;
	}
	,__class__: clay_graphics_Texture
	,__properties__: {set_wrapT:"set_wrapT",set_wrapS:"set_wrapS",set_filterMag:"set_filterMag",set_filterMin:"set_filterMin"}
});
var clay_graphics_RenderTexture = function() {
	this.antialiasing = 0;
	this.stencil = false;
	clay_graphics_Texture.call(this);
};
$hxClasses["clay.graphics.RenderTexture"] = clay_graphics_RenderTexture;
clay_graphics_RenderTexture.__name__ = "clay.graphics.RenderTexture";
clay_graphics_RenderTexture.__super__ = clay_graphics_Texture;
clay_graphics_RenderTexture.prototype = $extend(clay_graphics_Texture.prototype,{
	init: function() {
		clay_graphics_Texture.prototype.init.call(this);
		var size = clay_opengl_web_GL.gl.getParameter(3379);
		if(size <= 0) {
			size = 4096;
		}
		var max = size;
		if(this.widthActual > max) {
			throw haxe_Exception.thrown("RenderTexture actual width bigger than maximum hardware size (width=" + this.widthActual + " max=" + max + ")");
		}
		if(this.heightActual > max) {
			throw haxe_Exception.thrown("RenderTexture actual height bigger than maximum hardware size (height=" + this.heightActual + " max=" + max + ")");
		}
		this.bind();
		this.renderTarget = clay_opengl_GLGraphics.createRenderTarget(this.textureId,this.width,this.height,this.stencil,this.antialiasing,0,this.format,this.dataType);
	}
	,destroy: function() {
		clay_graphics_Texture.prototype.destroy.call(this);
		if(this.renderTarget != null) {
			clay_opengl_GLGraphics.deleteRenderTarget(this.renderTarget);
			this.renderTarget = null;
		}
	}
	,__class__: clay_graphics_RenderTexture
});
var clay_graphics_TextureAndSlot = function(texture,slot) {
	this.texture = texture;
	this.slot = slot;
};
$hxClasses["clay.graphics.TextureAndSlot"] = clay_graphics_TextureAndSlot;
clay_graphics_TextureAndSlot.__name__ = "clay.graphics.TextureAndSlot";
clay_graphics_TextureAndSlot.prototype = {
	__class__: clay_graphics_TextureAndSlot
};
var clay_graphics_Uniforms = function(gpuShader) {
	this.dirtyTextures = [];
	this.dirtyColors = [];
	this.dirtyMatrix4s = [];
	this.dirtyVector4s = [];
	this.dirtyVector3s = [];
	this.dirtyVector2s = [];
	this.dirtyFloatArrays = [];
	this.dirtyFloats = [];
	this.dirtyInts = [];
	this.textures = new haxe_ds_StringMap();
	this.colors = new haxe_ds_StringMap();
	this.matrix4s = new haxe_ds_StringMap();
	this.vector4s = new haxe_ds_StringMap();
	this.vector3s = new haxe_ds_StringMap();
	this.vector2s = new haxe_ds_StringMap();
	this.floatArrays = new haxe_ds_StringMap();
	this.floats = new haxe_ds_StringMap();
	this.ints = new haxe_ds_StringMap();
	this.gpuShader = gpuShader;
};
$hxClasses["clay.graphics.Uniforms"] = clay_graphics_Uniforms;
clay_graphics_Uniforms.__name__ = "clay.graphics.Uniforms";
clay_graphics_Uniforms.prototype = {
	setInt: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.ints.h[name] = value;
		this.dirtyInts.push(name);
	}
	,setFloat: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floats.h[name] = value;
		this.dirtyFloats.push(name);
	}
	,setFloatArray: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floatArrays.h[name] = value;
		this.dirtyFloatArrays.push(name);
	}
	,setVector2: function(name,x,y) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector2s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
		} else {
			var this1 = this.vector2s;
			var value = new clay_graphics_Vector2(x,y);
			this1.h[name] = value;
		}
		this.dirtyVector2s.push(name);
	}
	,setVector3: function(name,x,y,z) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector3s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
		} else {
			var this1 = this.vector3s;
			var value = new clay_graphics_Vector3(x,y,z);
			this1.h[name] = value;
		}
		this.dirtyVector3s.push(name);
	}
	,setVector4: function(name,x,y,z,w) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector4s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
			existing.w = w;
		} else {
			var this1 = this.vector4s;
			var value = new clay_graphics_Vector4(x,y,z,w);
			this1.h[name] = value;
		}
		this.dirtyVector4s.push(name);
	}
	,setMatrix4: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.matrix4s.h[name];
		if(existing == null) {
			var this1 = new Float32Array(16);
			existing = this1;
			this.matrix4s.h[name] = existing;
		}
		existing[0] = value[0];
		existing[1] = value[1];
		existing[2] = value[2];
		existing[3] = value[3];
		existing[4] = value[4];
		existing[5] = value[5];
		existing[6] = value[6];
		existing[7] = value[7];
		existing[8] = value[8];
		existing[9] = value[9];
		existing[10] = value[10];
		existing[11] = value[11];
		existing[12] = value[12];
		existing[13] = value[13];
		existing[14] = value[14];
		existing[15] = value[15];
		this.dirtyMatrix4s.push(name);
	}
	,setColor: function(name,r,g,b,a) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.colors.h[name];
		if(existing != null) {
			existing.r = r;
			existing.g = g;
			existing.b = b;
			existing.a = a;
		} else {
			var this1 = this.colors;
			var value = new clay_graphics_Color(r,g,b,a);
			this1.h[name] = value;
		}
		this.dirtyColors.push(name);
	}
	,setTexture: function(name,slot,texture) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.textures.h[name];
		if(existing != null) {
			existing.texture = texture;
			existing.slot = slot;
		} else {
			var this1 = this.textures;
			var value = new clay_graphics_TextureAndSlot(texture,slot);
			this1.h[name] = value;
		}
		if(this.dirtyTextures.indexOf(name) == -1) {
			this.dirtyTextures.push(name);
		}
	}
	,apply: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		while(this.dirtyInts.length > 0) {
			var name = this.dirtyInts.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.ints.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1i(location,value);
		}
		while(this.dirtyFloats.length > 0) {
			var name = this.dirtyFloats.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floats.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1f(location,value);
		}
		while(this.dirtyFloatArrays.length > 0) {
			var name = this.dirtyFloatArrays.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floatArrays.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1fv(location,value);
		}
		while(this.dirtyVector2s.length > 0) {
			var name = this.dirtyVector2s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector2s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform2f(location,x,y);
		}
		while(this.dirtyVector3s.length > 0) {
			var name = this.dirtyVector3s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector3s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
		}
		while(this.dirtyVector4s.length > 0) {
			var name = this.dirtyVector4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector4s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			var w = value.w;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
		}
		while(this.dirtyMatrix4s.length > 0) {
			var name = this.dirtyMatrix4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.matrix4s.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
		}
		while(this.dirtyColors.length > 0) {
			var name = this.dirtyColors.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.colors.h[name];
			var shader = this.gpuShader;
			var r = value.r;
			var g = value.g;
			var b = value.b;
			var a = value.a;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
		}
		var _g = 0;
		var _g1 = this.dirtyTextures.length;
		while(_g < _g1) {
			var i = _g++;
			var name = this.dirtyTextures[i];
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.textures.h[name];
			if(value.texture.type == 3553) {
				clay_opengl_GLGraphics.setTexture2dUniform(this.gpuShader,location,value.slot,value.texture.textureId);
			}
		}
	}
	,clone: function() {
		var uniforms = new clay_graphics_Uniforms(this.gpuShader);
		return uniforms;
	}
	,__class__: clay_graphics_Uniforms
};
var clay_graphics_Vector2 = function(x,y) {
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
};
$hxClasses["clay.graphics.Vector2"] = clay_graphics_Vector2;
clay_graphics_Vector2.__name__ = "clay.graphics.Vector2";
clay_graphics_Vector2.prototype = {
	__class__: clay_graphics_Vector2
};
var clay_graphics_Vector3 = function(x,y,z) {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
};
$hxClasses["clay.graphics.Vector3"] = clay_graphics_Vector3;
clay_graphics_Vector3.__name__ = "clay.graphics.Vector3";
clay_graphics_Vector3.prototype = {
	__class__: clay_graphics_Vector3
};
var clay_graphics_Vector4 = function(x,y,z,w) {
	this.w = 0;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
	if(w != null) {
		this.w = w;
	}
};
$hxClasses["clay.graphics.Vector4"] = clay_graphics_Vector4;
clay_graphics_Vector4.__name__ = "clay.graphics.Vector4";
clay_graphics_Vector4.prototype = {
	__class__: clay_graphics_Vector4
};
var clay_opengl_GLGraphics = function() { };
$hxClasses["clay.opengl.GLGraphics"] = clay_opengl_GLGraphics;
clay_opengl_GLGraphics.__name__ = "clay.opengl.GLGraphics";
clay_opengl_GLGraphics.setup = function() {
	clay_opengl_GLGraphics._defaultFramebuffer = clay_opengl_web_GL.gl.getParameter(36006);
	clay_opengl_GLGraphics._defaultRenderbuffer = clay_opengl_web_GL.gl.getParameter(36007);
	clay_opengl_GLGraphics._didFetchDefaultBuffers = true;
};
clay_opengl_GLGraphics.clear = function(r,g,b,a,clearDepth) {
	if(clearDepth == null) {
		clearDepth = true;
	}
	clay_opengl_web_GL.gl.clearColor(r,g,b,a);
	if(clearDepth && clay_Clay.app.config.render.depth > 0) {
		clay_opengl_web_GL.gl.clear(16640);
		clay_opengl_web_GL.gl.clearDepth(1.0);
	} else {
		clay_opengl_web_GL.gl.clear(16384);
	}
};
clay_opengl_GLGraphics.createTextureId = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_GLGraphics.setActiveTexture = function(slot) {
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
};
clay_opengl_GLGraphics.deleteTexture = function(textureId) {
	clay_opengl_web_GL.gl.deleteTexture(textureId);
	var _g = 0;
	var _g1 = clay_opengl_GLGraphics._boundTexture2D.length;
	while(_g < _g1) {
		var i = _g++;
		if(clay_opengl_GLGraphics._boundTexture2D[i] == textureId) {
			clay_opengl_GLGraphics._boundTexture2D[i] = null;
		}
	}
};
clay_opengl_GLGraphics.setViewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_GLGraphics.bindTexture2d = function(textureId) {
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
		clay_opengl_web_GL.gl.bindTexture(3553,textureId);
	}
};
clay_opengl_GLGraphics.maxTextureSize = function() {
	var size = clay_opengl_web_GL.gl.getParameter(3379);
	if(size <= 0) {
		size = 4096;
	}
	return size;
};
clay_opengl_GLGraphics.needsPreprocessedPremultipliedAlpha = function() {
	return false;
};
clay_opengl_GLGraphics.submitCompressedTexture2dPixels = function(level,format,width,height,pixels,premultipliedAlpha) {
	clay_opengl_web_GL.gl.pixelStorei(37441,premultipliedAlpha ? 1 : 0);
	clay_opengl_web_GL.gl.compressedTexImage2D(3553,level,format,width,height,0,pixels);
};
clay_opengl_GLGraphics.submitTexture2dPixels = function(level,format,width,height,dataType,pixels,premultipliedAlpha) {
	clay_opengl_web_GL.gl.pixelStorei(37441,premultipliedAlpha ? 1 : 0);
	clay_opengl_web_GL.gl.texImage2D(3553,level,format,width,height,0,format,dataType,pixels);
};
clay_opengl_GLGraphics.fetchTexture2dPixels = function(into,x,y,w,h) {
	if(into == null) {
		throw haxe_Exception.thrown("Texture fetch requires a valid buffer to store the pixels.");
	}
	var textureId = clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot];
	var required = w * h * 4;
	if(into.length < required) {
		throw haxe_Exception.thrown("Texture fetch requires at least " + required + " (w * h * 4) bytes for the pixels, you have " + into.length + "!");
	}
	var fb = clay_opengl_web_GL.gl.createFramebuffer();
	clay_opengl_web_GL.gl.bindFramebuffer(36160,fb);
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(clay_opengl_web_GL.gl.checkFramebufferStatus(36160) != 36053) {
		throw haxe_Exception.thrown("Incomplete framebuffer");
	}
	clay_opengl_web_GL.gl.readPixels(x,y,w,h,6408,5121,into);
	clay_opengl_web_GL.gl.bindFramebuffer(36160,null);
	clay_opengl_web_GL.gl.deleteFramebuffer(fb);
	fb = null;
};
clay_opengl_GLGraphics.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_GLGraphics.bindFramebuffer = function(framebuffer) {
	if(clay_opengl_GLGraphics._boundFramebuffer != framebuffer) {
		clay_opengl_GLGraphics._boundFramebuffer = framebuffer;
		if(framebuffer == null) {
			framebuffer = clay_opengl_GLGraphics._defaultFramebuffer;
		}
		clay_opengl_web_GL.gl.bindFramebuffer(36160,framebuffer);
	}
};
clay_opengl_GLGraphics.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_GLGraphics.bindRenderbuffer = function(renderbuffer) {
	if(clay_opengl_GLGraphics._boundRenderbuffer != renderbuffer) {
		clay_opengl_GLGraphics._boundRenderbuffer = renderbuffer;
		if(renderbuffer == null) {
			renderbuffer = clay_opengl_GLGraphics._defaultRenderbuffer;
		}
		clay_opengl_web_GL.gl.bindRenderbuffer(36161,renderbuffer);
	}
};
clay_opengl_GLGraphics.setTexture2dMinFilter = function(minFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10241,minFilter);
};
clay_opengl_GLGraphics.setTexture2dMagFilter = function(magFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10240,magFilter);
};
clay_opengl_GLGraphics.setTexture2dWrapS = function(wrapS) {
	clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
};
clay_opengl_GLGraphics.setTexture2dWrapT = function(wrapT) {
	clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
};
clay_opengl_GLGraphics.configureRenderTargetBuffersStorage = function(renderTarget,textureId,width,height,stencil,antialiasing) {
	var framebuffer = renderTarget.framebuffer;
	var renderbuffer = renderTarget.renderbuffer;
	clay_opengl_GLGraphics.bindFramebuffer(framebuffer);
	clay_opengl_GLGraphics.bindRenderbuffer(renderbuffer);
	if(stencil) {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,34041,width,height);
	} else {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,33189,width,height);
	}
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(stencil) {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);
	} else {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);
	}
	var status = clay_opengl_web_GL.gl.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	case 36055:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	case 36057:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	case 36059:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
	case 36060:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
	case 36061:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
	default:
		throw haxe_Exception.thrown("Incomplete framebuffer: " + status);
	}
	clay_opengl_GLGraphics.bindFramebuffer(null);
	clay_opengl_GLGraphics.bindRenderbuffer(null);
};
clay_opengl_GLGraphics.createRenderTarget = function(textureId,width,height,stencil,antialiasing,level,format,dataType) {
	var renderTarget = new clay_opengl_GLGraphics_$RenderTarget();
	clay_opengl_web_GL.gl.texImage2D(3553,level,format,width,height,0,format,dataType,null);
	renderTarget.framebuffer = clay_opengl_web_GL.gl.createFramebuffer();
	renderTarget.renderbuffer = clay_opengl_web_GL.gl.createRenderbuffer();
	var framebuffer = renderTarget.framebuffer;
	var renderbuffer = renderTarget.renderbuffer;
	clay_opengl_GLGraphics.bindFramebuffer(framebuffer);
	clay_opengl_GLGraphics.bindRenderbuffer(renderbuffer);
	if(stencil) {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,34041,width,height);
	} else {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,33189,width,height);
	}
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(stencil) {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);
	} else {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);
	}
	var status = clay_opengl_web_GL.gl.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	case 36055:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	case 36057:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	case 36059:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
	case 36060:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
	case 36061:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
	default:
		throw haxe_Exception.thrown("Incomplete framebuffer: " + status);
	}
	clay_opengl_GLGraphics.bindFramebuffer(null);
	clay_opengl_GLGraphics.bindRenderbuffer(null);
	return renderTarget;
};
clay_opengl_GLGraphics.deleteRenderTarget = function(renderTarget) {
	if(renderTarget.framebuffer != null) {
		if(clay_opengl_GLGraphics._boundFramebuffer == renderTarget.framebuffer) {
			clay_opengl_GLGraphics._boundFramebuffer = null;
		}
		clay_opengl_web_GL.gl.deleteFramebuffer(renderTarget.framebuffer);
		renderTarget.framebuffer = null;
	}
	if(renderTarget.renderbuffer != null) {
		if(clay_opengl_GLGraphics._boundRenderbuffer == renderTarget.renderbuffer) {
			clay_opengl_GLGraphics._boundRenderbuffer = null;
		}
		clay_opengl_web_GL.gl.deleteRenderbuffer(renderTarget.renderbuffer);
		renderTarget.renderbuffer = null;
	}
};
clay_opengl_GLGraphics.setRenderTarget = function(renderTarget) {
	if(renderTarget != null) {
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
	} else {
		clay_opengl_GLGraphics.bindFramebuffer(null);
		clay_opengl_GLGraphics.bindRenderbuffer(null);
	}
};
clay_opengl_GLGraphics.enableBlending = function() {
	clay_opengl_web_GL.gl.enable(3042);
};
clay_opengl_GLGraphics.disableBlending = function() {
	clay_opengl_web_GL.gl.disable(3042);
};
clay_opengl_GLGraphics.createShader = function(vertSource,fragSource,attributes,textures) {
	if(vertSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: vertSource is null!");
	}
	if(fragSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: fragSource is null!");
	}
	var shader = new clay_opengl_GLGraphics_$GpuShader();
	shader.vertShader = clay_opengl_GLGraphics.compileGLShader(35633,vertSource);
	if(shader.vertShader == null) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	shader.fragShader = clay_opengl_GLGraphics.compileGLShader(35632,fragSource);
	if(shader.fragShader == null) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(!clay_opengl_GLGraphics.linkShader(shader,attributes)) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(textures != null) {
		clay_opengl_GLGraphics.configureShaderTextureSlots(shader,textures);
	}
	return shader;
};
clay_opengl_GLGraphics.linkShader = function(shader,attributes) {
	var program = clay_opengl_web_GL.gl.createProgram();
	clay_opengl_web_GL.gl.attachShader(program,shader.vertShader);
	clay_opengl_web_GL.gl.attachShader(program,shader.fragShader);
	if(attributes != null) {
		var _g = 0;
		var _g1 = attributes.length;
		while(_g < _g1) {
			var i = _g++;
			clay_opengl_web_GL.gl.bindAttribLocation(program,i,attributes[i]);
		}
	}
	clay_opengl_web_GL.gl.linkProgram(program);
	if(clay_opengl_web_GL.gl.getProgramParameter(program,35714) == 0) {
		clay_Log.error("\tFailed to link shader program:",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/opengl/GLGraphics.hx", lineNumber : 570, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		var items = clay_opengl_web_GL.gl.getProgramInfoLog(program).split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		clay_Log.error(items.join("\n"),{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/opengl/GLGraphics.hx", lineNumber : 571, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		clay_opengl_web_GL.gl.deleteProgram(program);
		return false;
	}
	shader.program = program;
	return true;
};
clay_opengl_GLGraphics.configureShaderTextureSlots = function(shader,textures) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	var _g = 0;
	var _g1 = textures.length;
	while(_g < _g1) {
		var i = _g++;
		var texture = textures[i];
		var attr = clay_opengl_web_GL.gl.getUniformLocation(shader.program,texture);
		if(attr != null) {
			clay_opengl_web_GL.gl.uniform1i(attr,i);
			shader.textures[i] = texture;
		}
	}
};
clay_opengl_GLGraphics.useShader = function(shader) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
};
clay_opengl_GLGraphics.deleteShader = function(shader) {
	if(clay_opengl_GLGraphics._boundProgram == shader.program) {
		clay_opengl_GLGraphics._boundProgram = null;
	}
	if(shader.vertShader != null) {
		clay_opengl_web_GL.gl.deleteShader(shader.vertShader);
		shader.vertShader = null;
	}
	if(shader.fragShader != null) {
		clay_opengl_web_GL.gl.deleteShader(shader.fragShader);
		shader.fragShader = null;
	}
	if(shader.program != null) {
		clay_opengl_web_GL.gl.deleteProgram(shader.program);
		shader.program = null;
	}
};
clay_opengl_GLGraphics.compileGLShader = function(type,source) {
	var shader = clay_opengl_web_GL.gl.createShader(type);
	clay_opengl_web_GL.gl.shaderSource(shader,source);
	clay_opengl_web_GL.gl.compileShader(shader);
	var compileLog = clay_opengl_web_GL.gl.getShaderInfoLog(shader);
	var log = "";
	if(compileLog != null && compileLog.length > 0) {
		var isFrag = type == 35632;
		var typeName = isFrag ? "frag" : "vert";
		log += "\n\t// start -- (" + typeName + ") compile log --\n";
		var items = compileLog.split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		log += items.join("\n");
		log += "\n\t// end --\n";
	}
	if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
		clay_Log.error("GL / Failed to compile shader:",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/opengl/GLGraphics.hx", lineNumber : 658, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		var tmp;
		if(log.length == 0) {
			var items = clay_opengl_web_GL.gl.getShaderInfoLog(shader).split("\n");
			var _g = [];
			var _g1 = 0;
			var _g2 = items;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(StringTools.trim(v) != "") {
					_g.push(v);
				}
			}
			items = _g;
			var result = new Array(items.length);
			var _g = 0;
			var _g1 = items.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = "\t\t" + StringTools.trim(items[i]);
			}
			items = result;
			tmp = items.join("\n");
		} else {
			tmp = log;
		}
		clay_Log.error(tmp,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/opengl/GLGraphics.hx", lineNumber : 659, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		clay_opengl_web_GL.gl.deleteShader(shader);
		shader = null;
	}
	return shader;
};
clay_opengl_GLGraphics.getUniformLocation = function(shader,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(shader.program,name);
};
clay_opengl_GLGraphics.setIntUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,value);
};
clay_opengl_GLGraphics.setFloatUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1f(location,value);
};
clay_opengl_GLGraphics.setFloatArrayUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1fv(location,value);
};
clay_opengl_GLGraphics.setVector2Uniform = function(shader,location,x,y) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_GLGraphics.setVector3Uniform = function(shader,location,x,y,z) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_GLGraphics.setVector4Uniform = function(shader,location,x,y,z,w) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_GLGraphics.setColorUniform = function(shader,location,r,g,b,a) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
};
clay_opengl_GLGraphics.setMatrix4Uniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
};
clay_opengl_GLGraphics.setTexture2dUniform = function(shader,location,slot,texture) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,slot);
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != texture) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = texture;
		clay_opengl_web_GL.gl.bindTexture(3553,texture);
	}
};
clay_opengl_GLGraphics.setBlendFuncSeparate = function(srcRgb,dstRgb,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRgb,dstRgb,srcAlpha,dstAlpha);
};
clay_opengl_GLGraphics.ensureNoError = function() {
	var error = clay_opengl_web_GL.gl.getError();
	if(error != 0) {
		throw haxe_Exception.thrown("Failed with GL error: " + error);
	}
};
var clay_opengl_GLGraphics_$RenderTarget = function() {
};
$hxClasses["clay.opengl.GLGraphics_RenderTarget"] = clay_opengl_GLGraphics_$RenderTarget;
clay_opengl_GLGraphics_$RenderTarget.__name__ = "clay.opengl.GLGraphics_RenderTarget";
clay_opengl_GLGraphics_$RenderTarget.prototype = {
	__class__: clay_opengl_GLGraphics_$RenderTarget
};
var clay_opengl_GLGraphics_$GpuShader = function() {
	this.textures = [];
};
$hxClasses["clay.opengl.GLGraphics_GpuShader"] = clay_opengl_GLGraphics_$GpuShader;
clay_opengl_GLGraphics_$GpuShader.__name__ = "clay.opengl.GLGraphics_GpuShader";
clay_opengl_GLGraphics_$GpuShader.prototype = {
	__class__: clay_opengl_GLGraphics_$GpuShader
};
var clay_opengl_web_GL = function() { };
$hxClasses["clay.opengl.web.GL"] = clay_opengl_web_GL;
clay_opengl_web_GL.__name__ = "clay.opengl.web.GL";
clay_opengl_web_GL.__properties__ = {get_version:"get_version"};
clay_opengl_web_GL.versionString = function() {
	var ver = clay_opengl_web_GL.gl.getParameter(7938);
	var slver = clay_opengl_web_GL.gl.getParameter(35724);
	var ren = clay_opengl_web_GL.gl.getParameter(7937);
	var ven = clay_opengl_web_GL.gl.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
clay_opengl_web_GL.activeTexture = function(texture) {
	clay_opengl_web_GL.gl.activeTexture(texture);
};
clay_opengl_web_GL.attachShader = function(program,shader) {
	clay_opengl_web_GL.gl.attachShader(program,shader);
};
clay_opengl_web_GL.bindAttribLocation = function(program,index,name) {
	clay_opengl_web_GL.gl.bindAttribLocation(program,index,name);
};
clay_opengl_web_GL.bindBuffer = function(target,buffer) {
	clay_opengl_web_GL.gl.bindBuffer(target,buffer);
};
clay_opengl_web_GL.bindFramebuffer = function(target,framebuffer) {
	clay_opengl_web_GL.gl.bindFramebuffer(target,framebuffer);
};
clay_opengl_web_GL.bindRenderbuffer = function(target,renderbuffer) {
	clay_opengl_web_GL.gl.bindRenderbuffer(target,renderbuffer);
};
clay_opengl_web_GL.bindTexture = function(target,texture) {
	clay_opengl_web_GL.gl.bindTexture(target,texture);
};
clay_opengl_web_GL.blendColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.blendColor(red,green,blue,alpha);
};
clay_opengl_web_GL.blendEquation = function(mode) {
	clay_opengl_web_GL.gl.blendEquation(mode);
};
clay_opengl_web_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	clay_opengl_web_GL.gl.blendEquationSeparate(modeRGB,modeAlpha);
};
clay_opengl_web_GL.blendFunc = function(sfactor,dfactor) {
	clay_opengl_web_GL.gl.blendFunc(sfactor,dfactor);
};
clay_opengl_web_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
clay_opengl_web_GL.bufferData = function(target,data,usage) {
	clay_opengl_web_GL.gl.bufferData(target,data,usage);
};
clay_opengl_web_GL.bufferSubData = function(target,offset,data) {
	clay_opengl_web_GL.gl.bufferSubData(target,offset,data);
};
clay_opengl_web_GL.checkFramebufferStatus = function(target) {
	return clay_opengl_web_GL.gl.checkFramebufferStatus(target);
};
clay_opengl_web_GL.clear = function(mask) {
	clay_opengl_web_GL.gl.clear(mask);
};
clay_opengl_web_GL.clearColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.clearColor(red,green,blue,alpha);
};
clay_opengl_web_GL.clearDepth = function(depth) {
	clay_opengl_web_GL.gl.clearDepth(depth);
};
clay_opengl_web_GL.clearStencil = function(s) {
	clay_opengl_web_GL.gl.clearStencil(s);
};
clay_opengl_web_GL.colorMask = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.colorMask(red,green,blue,alpha);
};
clay_opengl_web_GL.compileShader = function(shader) {
	clay_opengl_web_GL.gl.compileShader(shader);
};
clay_opengl_web_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	clay_opengl_web_GL.gl.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
clay_opengl_web_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	clay_opengl_web_GL.gl.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
clay_opengl_web_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	clay_opengl_web_GL.gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
clay_opengl_web_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	clay_opengl_web_GL.gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
clay_opengl_web_GL.createBuffer = function() {
	return clay_opengl_web_GL.gl.createBuffer();
};
clay_opengl_web_GL.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_web_GL.createProgram = function() {
	return clay_opengl_web_GL.gl.createProgram();
};
clay_opengl_web_GL.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_web_GL.createShader = function(type) {
	return clay_opengl_web_GL.gl.createShader(type);
};
clay_opengl_web_GL.createTexture = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_web_GL.cullFace = function(mode) {
	clay_opengl_web_GL.gl.cullFace(mode);
};
clay_opengl_web_GL.deleteBuffer = function(buffer) {
	clay_opengl_web_GL.gl.deleteBuffer(buffer);
};
clay_opengl_web_GL.deleteFramebuffer = function(framebuffer) {
	clay_opengl_web_GL.gl.deleteFramebuffer(framebuffer);
};
clay_opengl_web_GL.deleteProgram = function(program) {
	clay_opengl_web_GL.gl.deleteProgram(program);
};
clay_opengl_web_GL.deleteRenderbuffer = function(renderbuffer) {
	clay_opengl_web_GL.gl.deleteRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.deleteShader = function(shader) {
	clay_opengl_web_GL.gl.deleteShader(shader);
};
clay_opengl_web_GL.deleteTexture = function(texture) {
	clay_opengl_web_GL.gl.deleteTexture(texture);
};
clay_opengl_web_GL.depthFunc = function(func) {
	clay_opengl_web_GL.gl.depthFunc(func);
};
clay_opengl_web_GL.depthMask = function(flag) {
	clay_opengl_web_GL.gl.depthMask(flag);
};
clay_opengl_web_GL.depthRange = function(zNear,zFar) {
	clay_opengl_web_GL.gl.depthRange(zNear,zFar);
};
clay_opengl_web_GL.detachShader = function(program,shader) {
	clay_opengl_web_GL.gl.detachShader(program,shader);
};
clay_opengl_web_GL.disable = function(cap) {
	clay_opengl_web_GL.gl.disable(cap);
};
clay_opengl_web_GL.disableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.disableVertexAttribArray(index);
};
clay_opengl_web_GL.drawArrays = function(mode,first,count) {
	clay_opengl_web_GL.gl.drawArrays(mode,first,count);
};
clay_opengl_web_GL.drawElements = function(mode,count,type,offset) {
	clay_opengl_web_GL.gl.drawElements(mode,count,type,offset);
};
clay_opengl_web_GL.enable = function(cap) {
	clay_opengl_web_GL.gl.enable(cap);
};
clay_opengl_web_GL.enableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.enableVertexAttribArray(index);
};
clay_opengl_web_GL.finish = function() {
	clay_opengl_web_GL.gl.finish();
};
clay_opengl_web_GL.flush = function() {
	clay_opengl_web_GL.gl.flush();
};
clay_opengl_web_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	clay_opengl_web_GL.gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
clay_opengl_web_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	clay_opengl_web_GL.gl.framebufferTexture2D(target,attachment,textarget,texture,level);
};
clay_opengl_web_GL.frontFace = function(mode) {
	clay_opengl_web_GL.gl.frontFace(mode);
};
clay_opengl_web_GL.generateMipmap = function(target) {
	clay_opengl_web_GL.gl.generateMipmap(target);
};
clay_opengl_web_GL.getActiveAttrib = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveAttrib(program,index);
};
clay_opengl_web_GL.getActiveUniform = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveUniform(program,index);
};
clay_opengl_web_GL.getAttachedShaders = function(program) {
	return clay_opengl_web_GL.gl.getAttachedShaders(program);
};
clay_opengl_web_GL.getAttribLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getAttribLocation(program,name);
};
clay_opengl_web_GL.getBufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getBufferParameter(target,pname);
};
clay_opengl_web_GL.getContextAttributes = function() {
	return clay_opengl_web_GL.gl.getContextAttributes();
};
clay_opengl_web_GL.getError = function() {
	return clay_opengl_web_GL.gl.getError();
};
clay_opengl_web_GL.getExtension = function(name) {
	return clay_opengl_web_GL.gl.getExtension(name);
};
clay_opengl_web_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return clay_opengl_web_GL.gl.getFramebufferAttachmentParameter(target,attachment,pname);
};
clay_opengl_web_GL.getParameter = function(pname) {
	return clay_opengl_web_GL.gl.getParameter(pname);
};
clay_opengl_web_GL.getProgramInfoLog = function(program) {
	return clay_opengl_web_GL.gl.getProgramInfoLog(program);
};
clay_opengl_web_GL.getProgramParameter = function(program,pname) {
	return clay_opengl_web_GL.gl.getProgramParameter(program,pname);
};
clay_opengl_web_GL.getRenderbufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getRenderbufferParameter(target,pname);
};
clay_opengl_web_GL.getShaderInfoLog = function(shader) {
	return clay_opengl_web_GL.gl.getShaderInfoLog(shader);
};
clay_opengl_web_GL.getShaderParameter = function(shader,pname) {
	return clay_opengl_web_GL.gl.getShaderParameter(shader,pname);
};
clay_opengl_web_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return clay_opengl_web_GL.gl.getShaderPrecisionFormat(shadertype,precisiontype);
};
clay_opengl_web_GL.getShaderSource = function(shader) {
	return clay_opengl_web_GL.gl.getShaderSource(shader);
};
clay_opengl_web_GL.getSupportedExtensions = function() {
	return clay_opengl_web_GL.gl.getSupportedExtensions();
};
clay_opengl_web_GL.getTexParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getTexParameter(target,pname);
};
clay_opengl_web_GL.getUniform = function(program,location) {
	return clay_opengl_web_GL.gl.getUniform(program,location);
};
clay_opengl_web_GL.getUniformLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(program,name);
};
clay_opengl_web_GL.getVertexAttrib = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttrib(index,pname);
};
clay_opengl_web_GL.getVertexAttribOffset = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttribOffset(index,pname);
};
clay_opengl_web_GL.hint = function(target,mode) {
	clay_opengl_web_GL.gl.hint(target,mode);
};
clay_opengl_web_GL.isBuffer = function(buffer) {
	return clay_opengl_web_GL.gl.isBuffer(buffer);
};
clay_opengl_web_GL.isEnabled = function(cap) {
	return clay_opengl_web_GL.gl.isEnabled(cap);
};
clay_opengl_web_GL.isFramebuffer = function(framebuffer) {
	return clay_opengl_web_GL.gl.isFramebuffer(framebuffer);
};
clay_opengl_web_GL.isProgram = function(program) {
	return clay_opengl_web_GL.gl.isProgram(program);
};
clay_opengl_web_GL.isRenderbuffer = function(renderbuffer) {
	return clay_opengl_web_GL.gl.isRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.isShader = function(shader) {
	return clay_opengl_web_GL.gl.isShader(shader);
};
clay_opengl_web_GL.isTexture = function(texture) {
	return clay_opengl_web_GL.gl.isTexture(texture);
};
clay_opengl_web_GL.lineWidth = function(width) {
	clay_opengl_web_GL.gl.lineWidth(width);
};
clay_opengl_web_GL.linkProgram = function(program) {
	clay_opengl_web_GL.gl.linkProgram(program);
};
clay_opengl_web_GL.pixelStorei = function(pname,param) {
	clay_opengl_web_GL.gl.pixelStorei(pname,param);
};
clay_opengl_web_GL.polygonOffset = function(factor,units) {
	clay_opengl_web_GL.gl.polygonOffset(factor,units);
};
clay_opengl_web_GL.readPixels = function(x,y,width,height,format,type,data) {
	clay_opengl_web_GL.gl.readPixels(x,y,width,height,format,type,data);
};
clay_opengl_web_GL.renderbufferStorage = function(target,internalformat,width,height) {
	clay_opengl_web_GL.gl.renderbufferStorage(target,internalformat,width,height);
};
clay_opengl_web_GL.sampleCoverage = function(value,invert) {
	clay_opengl_web_GL.gl.sampleCoverage(value,invert);
};
clay_opengl_web_GL.scissor = function(x,y,width,height) {
	clay_opengl_web_GL.gl.scissor(x,y,width,height);
};
clay_opengl_web_GL.shaderSource = function(shader,source) {
	clay_opengl_web_GL.gl.shaderSource(shader,source);
};
clay_opengl_web_GL.stencilFunc = function(func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFunc(func,ref,mask);
};
clay_opengl_web_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFuncSeparate(face,func,ref,mask);
};
clay_opengl_web_GL.stencilMask = function(mask) {
	clay_opengl_web_GL.gl.stencilMask(mask);
};
clay_opengl_web_GL.stencilMaskSeparate = function(face,mask) {
	clay_opengl_web_GL.gl.stencilMaskSeparate(face,mask);
};
clay_opengl_web_GL.stencilOp = function(fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOp(fail,zfail,zpass);
};
clay_opengl_web_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOpSeparate(face,fail,zfail,zpass);
};
clay_opengl_web_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	clay_opengl_web_GL.gl.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
clay_opengl_web_GL.texParameterf = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameterf(target,pname,param);
};
clay_opengl_web_GL.texParameteri = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameteri(target,pname,param);
};
clay_opengl_web_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	clay_opengl_web_GL.gl.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
clay_opengl_web_GL.uniform1f = function(location,x) {
	clay_opengl_web_GL.gl.uniform1f(location,x);
};
clay_opengl_web_GL.uniform1fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1fv(location,data);
};
clay_opengl_web_GL.uniform1i = function(location,x) {
	clay_opengl_web_GL.gl.uniform1i(location,x);
};
clay_opengl_web_GL.uniform1iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1iv(location,data);
};
clay_opengl_web_GL.uniform2f = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_web_GL.uniform2fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2fv(location,data);
};
clay_opengl_web_GL.uniform2i = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2i(location,x,y);
};
clay_opengl_web_GL.uniform2iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2iv(location,data);
};
clay_opengl_web_GL.uniform3f = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_web_GL.uniform3fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3fv(location,data);
};
clay_opengl_web_GL.uniform3i = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3i(location,x,y,z);
};
clay_opengl_web_GL.uniform3iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3iv(location,data);
};
clay_opengl_web_GL.uniform4f = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4fv(location,data);
};
clay_opengl_web_GL.uniform4i = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4i(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4iv(location,data);
};
clay_opengl_web_GL.uniformMatrix2fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix2fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix3fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix3fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix4fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,transpose,data);
};
clay_opengl_web_GL.useProgram = function(program) {
	clay_opengl_web_GL.gl.useProgram(program);
};
clay_opengl_web_GL.validateProgram = function(program) {
	clay_opengl_web_GL.gl.validateProgram(program);
};
clay_opengl_web_GL.vertexAttrib1f = function(indx,x) {
	clay_opengl_web_GL.gl.vertexAttrib1f(indx,x);
};
clay_opengl_web_GL.vertexAttrib1fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib1fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib2f = function(indx,x,y) {
	clay_opengl_web_GL.gl.vertexAttrib2f(indx,x,y);
};
clay_opengl_web_GL.vertexAttrib2fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib2fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib3f = function(indx,x,y,z) {
	clay_opengl_web_GL.gl.vertexAttrib3f(indx,x,y,z);
};
clay_opengl_web_GL.vertexAttrib3fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib3fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	clay_opengl_web_GL.gl.vertexAttrib4f(indx,x,y,z,w);
};
clay_opengl_web_GL.vertexAttrib4fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib4fv(indx,data);
};
clay_opengl_web_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	clay_opengl_web_GL.gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
clay_opengl_web_GL.viewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_web_GL.get_version = function() {
	return 7938;
};
var clay_web_WebAssets = function(app) {
	clay_base_BaseAssets.call(this,app);
};
$hxClasses["clay.web.WebAssets"] = clay_web_WebAssets;
clay_web_WebAssets.__name__ = "clay.web.WebAssets";
clay_web_WebAssets.__super__ = clay_base_BaseAssets;
clay_web_WebAssets.prototype = $extend(clay_base_BaseAssets.prototype,{
	isSynchronous: function() {
		return false;
	}
	,loadImage: function(path,components,callback) {
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(path == null) {
			throw haxe_Exception.thrown("Image path is null!");
		}
		var ext = ceramic_Path.extension(path);
		this.app.io.loadData(path,true,function(bytes) {
			if(bytes == null) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(null);
					});
				}
				return;
			}
			_gthis.imageFromBytes(bytes,ext,4,function(image) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(image);
					});
				}
			});
		});
		return null;
	}
	,decodeImageFromElement: function(elem) {
		var widthPot = this.nearestPowerOfTwo(elem.width);
		var heightPot = this.nearestPowerOfTwo(elem.height);
		var imageBytes = this.potBytesFromElement(elem.width,elem.height,widthPot,heightPot,elem);
		var image = new clay_Image(elem.width,elem.height,widthPot,heightPot,4,4,imageBytes);
		imageBytes = null;
		return image;
	}
	,imageFromBytes: function(bytes,ext,components,callback) {
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(bytes == null) {
			throw haxe_Exception.thrown("Image bytes are null!");
		}
		var str = "";
		var i = 0;
		var len = bytes.length;
		while(i < len) {
			var code = bytes[i++] & 255;
			str += String.fromCodePoint(code);
		}
		var b64 = window.btoa(str);
		var src = "data:image/" + ext + ";base64," + b64;
		var img = new Image();
		img.onload = function(_) {
			var image = _gthis.decodeImageFromElement(img);
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(image);
				});
			}
		};
		img.onerror = function(e) {
			clay_Log.error("failed to load image from bytes, on error: " + e,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAssets.hx", lineNumber : 198, className : "clay.web.WebAssets", methodName : "imageFromBytes"});
		};
		img.src = src;
		return null;
	}
	,nearestPowerOfTwo: function(value) {
		if(!clay_web_WebAssets.POT) {
			return value;
		}
		--value;
		value |= value >> 1;
		value |= value >> 2;
		value |= value >> 4;
		value |= value >> 8;
		value |= value >> 16;
		return ++value;
	}
	,potBytesFromPixels: function(width,height,widthPot,heightPot,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPot;
		tmpCanvas.height = heightPot;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		var imageBytes = null;
		var pixels = new Uint8ClampedArray(source.buffer);
		var imgdata = tmpContext.createImageData(width,height);
		imgdata.data.set(pixels);
		try {
			tmpContext.putImageData(imgdata,0,0);
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		imgdata = null;
		return new Uint8Array(imageBytes.data);
	}
	,potBytesFromElement: function(width,height,widthPot,heightPot,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPot;
		tmpCanvas.height = heightPot;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		tmpContext.drawImage(source,0,0,width,height);
		var imageBytes = null;
		try {
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			clay_Log.info(tips,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAssets.hx", lineNumber : 309, className : "clay.web.WebAssets", methodName : "potBytesFromElement"});
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		return new Uint8Array(imageBytes.data);
	}
	,__class__: clay_web_WebAssets
});
var clay_web_WebAudio = function(app) {
	this.active = false;
	this.handleSeq = 0;
	this.suspended = false;
	clay_base_BaseAudio.call(this,app);
	this.instances = new haxe_ds_IntMap();
};
$hxClasses["clay.web.WebAudio"] = clay_web_WebAudio;
clay_web_WebAudio.__name__ = "clay.web.WebAudio";
clay_web_WebAudio.__super__ = clay_base_BaseAudio;
clay_web_WebAudio.prototype = $extend(clay_base_BaseAudio.prototype,{
	init: function() {
		this.initWebAudio();
	}
	,initWebAudio: function() {
		try {
			this.context = new AudioContext();
		} catch( _g ) {
			try {
				this.context = new window.webkitAudioContext();
			} catch( _g1 ) {
				clay_Log.debug("Audio / webaudio / no AudioContext could be created! No audio loading or playback will be available.",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 73, className : "clay.web.WebAudio", methodName : "initWebAudio"});
				return;
			}
		}
		if(this.context == null) {
			throw haxe_Exception.thrown("Audio / webaudio / no AudioContext could be created, is the Web Audio API supported?");
		}
		var info = "channelCount: " + this.context.destination.channelCount + ", " + ("channelCountMode: \"" + this.context.destination.channelCountMode + "\", ") + ("channelInterpretation: \"" + this.context.destination.channelInterpretation + "\", ") + ("maxChannelCount: " + this.context.destination.maxChannelCount + ", ") + ("numberOfInputs: " + this.context.destination.numberOfInputs + ", ") + ("numberOfOutputs: " + this.context.destination.numberOfOutputs);
		clay_Log.debug("Audio / webaudio: " + Std.string(this.context) + " / sampleRate: " + this.context.sampleRate + " / destination: " + info,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 89, className : "clay.web.WebAudio", methodName : "initWebAudio"});
		this.active = true;
	}
	,shutdown: function() {
		this.context.close();
	}
	,soundOf: function(handle) {
		return this.instances.h[handle];
	}
	,playBuffer: function(data) {
		var node = this.context.createBufferSource();
		node.buffer = data.buffer;
		return node;
	}
	,playBufferAgain: function(handle,sound,startTime) {
		sound.bufferNode = this.playBuffer(sound.source.data);
		sound.bufferNode.connect(sound.panNode);
		sound.bufferNode.loop = sound.loop;
		sound.panNode.connect(sound.gainNode);
		sound.gainNode.connect(this.context.destination);
		sound.bufferNode.start(0,startTime);
		var _g = $bind(this,this.destroySound);
		var sound1 = sound;
		var tmp = function() {
			_g(sound1);
		};
		sound.bufferNode.onended = tmp;
	}
	,playInstance: function(handle,source,inst,data,bufferNode,volume,loop) {
		var _gthis = this;
		var gain = this.context.createGain();
		var pan = this.context.createPanner();
		var node = null;
		var panVal = 0;
		gain.gain.value = volume;
		pan.panningModel = "equalpower";
		pan.setPosition(Math.cos(-1.5707),0,Math.sin(1.5707));
		if(bufferNode != null) {
			node = bufferNode;
			bufferNode.loop = loop;
		}
		if(data.mediaNode != null) {
			node = data.mediaNode;
			data.mediaElem.loop = loop;
		}
		node.connect(pan);
		pan.connect(gain);
		gain.connect(this.context.destination);
		var sound = { handle : handle, source : source, instance : inst, bufferNode : bufferNode, mediaNode : data.mediaNode, mediaElem : data.mediaElem, gainNode : gain, panNode : pan, state : 1, loop : loop, pan : 0, timeResumeAppTime : this.app.timestamp, timeResume : 0.0, timePause : null};
		this.instances.h[handle] = sound;
		if(bufferNode != null) {
			bufferNode.start(0);
			var _g = $bind(this,this.destroySound);
			var sound1 = sound;
			bufferNode.onended = function() {
				_g(sound1);
			};
		}
		if(data.mediaNode != null) {
			data.mediaElem.play();
			data.mediaNode.addEventListener("ended",function() {
				_gthis.app.events.audioEvent(0,handle);
				sound.state = 2;
			});
		}
	}
	,play: function(source,volume,paused) {
		var data = source.data;
		var handle = this.handleSeq;
		var inst = source.instance(handle);
		if(source.data.isStream) {
			data.mediaElem.play();
			data.mediaElem.volume = 1.0;
			this.playInstance(handle,source,inst,data,null,volume,false);
		} else {
			this.playInstance(handle,source,inst,data,this.playBuffer(data),volume,false);
		}
		this.handleSeq++;
		return handle;
	}
	,loop: function(source,volume,paused) {
		var data = source.data;
		var handle = this.handleSeq;
		var inst = source.instance(handle);
		if(source.data.isStream) {
			data.mediaElem.play();
			data.mediaElem.volume = 1.0;
			this.playInstance(handle,source,inst,data,null,volume,true);
		} else {
			this.playInstance(handle,source,inst,data,this.playBuffer(data),volume,true);
		}
		this.handleSeq++;
		return handle;
	}
	,stopBuffer: function(sound) {
		sound.bufferNode.stop();
		sound.bufferNode.disconnect();
		sound.gainNode.disconnect();
		sound.panNode.disconnect();
		sound.bufferNode = null;
	}
	,pause: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / pause handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 260, className : "clay.web.WebAudio", methodName : "pause"});
		var timePause = sound.timeResume + this.app.timestamp - sound.timeResumeAppTime;
		var duration = sound.source.getDuration();
		if(duration > 0) {
			if(sound.loop) {
				timePause %= duration;
			} else if(timePause > duration) {
				timePause = duration;
			}
		}
		sound.timePause = timePause;
		sound.state = 0;
		if(sound.bufferNode != null) {
			this.stopBuffer(sound);
		} else if(sound.mediaNode != null) {
			sound.mediaElem.pause();
		}
	}
	,unPause: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		if(sound.state != 0) {
			return;
		}
		clay_Log.debug("Audio / unpause handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 290, className : "clay.web.WebAudio", methodName : "unPause"});
		sound.timeResume = sound.timePause != null ? sound.timePause : 0;
		sound.timeResumeAppTime = this.app.timestamp;
		if(sound.mediaNode == null) {
			this.playBufferAgain(handle,sound,sound.timePause);
		} else {
			sound.mediaElem.play();
		}
		sound.state = 1;
	}
	,destroySound: function(sound) {
		if(sound.bufferNode != null) {
			sound.bufferNode.stop();
			sound.bufferNode.disconnect();
			sound.bufferNode = null;
		}
		if(sound.mediaNode != null) {
			sound.mediaElem.pause();
			sound.mediaElem.currentTime = 0;
			sound.mediaNode.disconnect();
			sound.mediaElem = null;
			sound.mediaNode = null;
		}
		if(sound.gainNode != null) {
			sound.gainNode.disconnect();
			sound.gainNode = null;
		}
		if(sound.panNode != null) {
			sound.panNode.disconnect();
			sound.panNode = null;
		}
		this.instances.remove(sound.handle);
		sound = null;
	}
	,stop: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / stop handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 342, className : "clay.web.WebAudio", methodName : "stop"});
		this.destroySound(sound);
		sound.state = 2;
	}
	,volume: function(handle,volume) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / volume=" + volume + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 356, className : "clay.web.WebAudio", methodName : "volume"});
		sound.gainNode.gain.value = volume;
	}
	,pan: function(handle,pan) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / pan=" + pan + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 368, className : "clay.web.WebAudio", methodName : "pan"});
		sound.pan = pan;
		sound.panNode.setPosition(Math.cos((pan - 1) * 1.5707),0,Math.sin((pan + 1) * 1.5707));
	}
	,pitch: function(handle,pitch) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / pitch=" + pitch + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 384, className : "clay.web.WebAudio", methodName : "pitch"});
		if(sound.bufferNode != null) {
			sound.bufferNode.playbackRate.value = pitch;
		} else if(sound.mediaNode != null) {
			sound.mediaElem.playbackRate = pitch;
		}
	}
	,position: function(handle,time) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / position=" + time + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 400, className : "clay.web.WebAudio", methodName : "position"});
		if(sound.bufferNode != null) {
			this.stopBuffer(sound);
			this.playBufferAgain(handle,sound,time);
		} else {
			sound.mediaElem.currentTime = time;
		}
	}
	,volumeOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		return sound.gainNode.gain.value;
	}
	,panOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		return sound.pan;
	}
	,pitchOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		var result = 1.0;
		if(sound.bufferNode != null) {
			result = sound.bufferNode.playbackRate.value;
		} else if(sound.mediaNode != null) {
			result = sound.mediaElem.playbackRate;
		}
		return result;
	}
	,positionOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		if(sound.bufferNode != null) {
			switch(sound.state) {
			case -1:case 2:
				return 0.0;
			case 0:case 1:
				var time;
				switch(sound.state) {
				case 0:
					time = sound.timePause;
					break;
				case 1:
					time = sound.timeResume + (this.app.timestamp - sound.timeResumeAppTime);
					break;
				default:
					time = 0.0;
				}
				var duration = sound.source.getDuration();
				if(duration > 0) {
					if(sound.loop) {
						time %= duration;
					} else if(time > duration) {
						time = duration;
					}
				}
				return time;
			}
		} else {
			return sound.mediaElem.currentTime;
		}
	}
	,stateOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return -1;
		}
		return sound.state;
	}
	,loopOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return false;
		}
		return sound.loop;
	}
	,instanceOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return null;
		}
		return sound.instance;
	}
	,suspend: function() {
		if(!this.active) {
			return;
		}
		if(this.suspended) {
			return;
		}
		this.suspended = true;
		this.active = false;
		this.context.suspend();
	}
	,resume: function() {
		if(this.active) {
			return;
		}
		if(!this.suspended) {
			return;
		}
		this.suspended = false;
		this.active = true;
		this.context.resume();
	}
	,loadData: function(path,isStream,format,callback) {
		if(path == null) {
			throw haxe_Exception.thrown("path is null!");
		}
		if(!this.active) {
			clay_Log.error("Audio / WebAudio context unavailable",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 547, className : "clay.web.WebAudio", methodName : "loadData"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
			return null;
		}
		if(isStream) {
			this.loadDataFromStream(path,format,callback);
			return null;
		}
		this.loadDataFromSound(path,format,callback);
		return null;
	}
	,dataFromBytes: function(id,bytes,format,callback) {
		var _gthis = this;
		if(!this.active) {
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
			return;
		}
		this.context.decodeAudioData(bytes.buffer,function(buffer) {
			var data = new clay_web__$WebAudio_WebAudioData(_gthis.app,buffer,null,null,new clay_audio_AudioDataOptions(id,buffer.sampleRate | 0,buffer.length,buffer.numberOfChannels,null,format,null,false));
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(data);
				});
			}
		},function() {
			clay_Log.error("Audio / failed to decode audio for `" + id + "`",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 598, className : "clay.web.WebAudio", methodName : "dataFromBytes"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
		});
	}
	,handleSourceDestroyed: function(source) {
	}
	,handleInstanceDestroyed: function(handle) {
	}
	,loadDataFromSound: function(path,format,callback) {
		var _gthis = this;
		this.app.io.loadData(path,true,function(bytes) {
			_gthis.dataFromBytes(path,bytes,format,callback);
		});
	}
	,loadDataFromStream: function(path,format,callback) {
		var _gthis = this;
		var element = new Audio(path);
		element.autoplay = false;
		element.controls = false;
		element.preload = "auto";
		element.onerror = function(err) {
			var error;
			switch(element.error.code) {
			case 1:
				error = "MEDIA_ERR_ABORTED";
				break;
			case 2:
				error = "MEDIA_ERR_NETWORK";
				break;
			case 3:
				error = "MEDIA_ERR_DECODE";
				break;
			case 4:
				error = "MEDIA_ERR_SRC_NOT_SUPPORTED";
				break;
			case 5:
				error = "MEDIA_ERR_ENCRYPTED";
				break;
			default:
				error = "unknown error";
			}
			clay_Log.error("Audio / failed to load `" + path + "` as stream : `" + error + "`",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebAudio.hx", lineNumber : 652, className : "clay.web.WebAudio", methodName : "loadDataFromStream"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
		};
		element.onloadedmetadata = function(_) {
			var node = _gthis.context.createMediaElementSource(element);
			var bytesPerSample = 2;
			var rate = _gthis.context.sampleRate | 0;
			var channels = node.channelCount;
			var sampleFrames = rate * channels * bytesPerSample;
			var length = element.duration * sampleFrames | 0;
			var data = new clay_web__$WebAudio_WebAudioData(_gthis.app,null,node,element,new clay_audio_AudioDataOptions(path,rate,length,channels,null,format,null,true));
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(data);
				});
			}
		};
	}
	,__class__: clay_web_WebAudio
});
var clay_web__$WebAudio_WebAudioData = function(app,buffer,mediaNode,mediaElem,options) {
	this.buffer = buffer;
	this.mediaNode = mediaNode;
	this.mediaElem = mediaElem;
	clay_audio_AudioData.call(this,app,options);
};
$hxClasses["clay.web._WebAudio.WebAudioData"] = clay_web__$WebAudio_WebAudioData;
clay_web__$WebAudio_WebAudioData.__name__ = "clay.web._WebAudio.WebAudioData";
clay_web__$WebAudio_WebAudioData.__super__ = clay_audio_AudioData;
clay_web__$WebAudio_WebAudioData.prototype = $extend(clay_audio_AudioData.prototype,{
	destroy: function() {
		this.buffer = null;
		this.mediaNode = null;
		this.mediaElem = null;
		clay_audio_AudioData.prototype.destroy.call(this);
	}
	,__class__: clay_web__$WebAudio_WebAudioData
});
var clay_web_WebConfig = function(windowId,windowParent,preventDefaultContextMenu,preventDefaultMouseWheel,preventDefaultTouches,preventDefaultKeys,mouseUseBrowserWindowEvents) {
	this.mouseUseBrowserWindowEvents = true;
	this.preventDefaultKeys = [1073741904,1073741903,1073741906,1073741905,8,9,127,32];
	this.preventDefaultTouches = true;
	this.preventDefaultMouseWheel = true;
	this.preventDefaultContextMenu = true;
	this.windowParent = window.document.body;
	this.windowId = "app";
	if(windowId != null) {
		this.windowId = windowId;
	}
	if(windowParent != null) {
		this.windowParent = windowParent;
	}
	if(preventDefaultContextMenu != null) {
		this.preventDefaultContextMenu = preventDefaultContextMenu;
	}
	if(preventDefaultMouseWheel != null) {
		this.preventDefaultMouseWheel = preventDefaultMouseWheel;
	}
	if(preventDefaultTouches != null) {
		this.preventDefaultTouches = preventDefaultTouches;
	}
	if(preventDefaultKeys != null) {
		this.preventDefaultKeys = preventDefaultKeys;
	}
	if(mouseUseBrowserWindowEvents != null) {
		this.mouseUseBrowserWindowEvents = mouseUseBrowserWindowEvents;
	}
};
$hxClasses["clay.web.WebConfig"] = clay_web_WebConfig;
clay_web_WebConfig.__name__ = "clay.web.WebConfig";
clay_web_WebConfig.prototype = {
	__class__: clay_web_WebConfig
};
var clay_web_WebIO = function(app) {
	clay_base_BaseIO.call(this,app);
};
$hxClasses["clay.web.WebIO"] = clay_web_WebIO;
clay_web_WebIO.__name__ = "clay.web.WebIO";
clay_web_WebIO.__super__ = clay_base_BaseIO;
clay_web_WebIO.prototype = $extend(clay_base_BaseIO.prototype,{
	isSynchronous: function() {
		return false;
	}
	,loadData: function(path,binary,callback) {
		if(binary == null) {
			binary = false;
		}
		if(path == null) {
			throw haxe_Exception.thrown("Path is null!");
		}
		var async = true;
		var request = new XMLHttpRequest();
		request.open("GET",path,async);
		if(binary) {
			request.overrideMimeType("text/plain; charset=x-user-defined");
		} else {
			request.overrideMimeType("text/plain; charset=UTF-8");
		}
		if(async) {
			request.responseType = "arraybuffer";
		}
		request.onload = function(data) {
			if(request.status == 200) {
				var this1 = new Uint8Array(request.response);
				var data1 = this1;
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(data1);
					});
				}
			} else {
				clay_Log.error("Request status was " + request.status + " / " + request.statusText,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebIO.hx", lineNumber : 102, className : "clay.web.WebIO", methodName : "loadData"});
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(data);
					});
				}
			}
		};
		request.send();
		return null;
	}
	,__class__: clay_web_WebIO
});
var clay_web_WebRuntime = function(app) {
	this.touches = new ceramic_IntMap();
	this.windowDpr = 1.0;
	this.windowY = 0;
	this.windowX = 0;
	this.skipKeyboardEvents = false;
	this.skipMouseEvents = false;
	this.gamepadsSupported = false;
	clay_base_BaseRuntime.call(this,app);
};
$hxClasses["clay.web.WebRuntime"] = clay_web_WebRuntime;
clay_web_WebRuntime.__name__ = "clay.web.WebRuntime";
clay_web_WebRuntime.timestamp = function() {
	return window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
};
clay_web_WebRuntime.defaultConfig = function() {
	return new clay_web_WebConfig("app",window.document.body,true,true,true,[1073741904,1073741903,1073741906,1073741905,8,9,127,32],true);
};
clay_web_WebRuntime.__super__ = clay_base_BaseRuntime;
clay_web_WebRuntime.prototype = $extend(clay_base_BaseRuntime.prototype,{
	init: function() {
		clay_web_WebRuntime.timestampStart = window.performance.now() / 1000.0;
		this.name = "web";
		this.initGamepads();
	}
	,ready: function() {
		this.createWindow();
		clay_Log.debug("Web / ready",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 74, className : "clay.web.WebRuntime", methodName : "ready"});
	}
	,run: function() {
		clay_Log.debug("Web / run",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 80, className : "clay.web.WebRuntime", methodName : "run"});
		this.loop(0);
		return false;
	}
	,loop: function(t) {
		if(t == null) {
			t = 0.016;
		}
		if(this.app.hasShutdown) {
			return false;
		}
		if(this.app.ready) {
			if(this.gamepadsSupported) {
				this.pollGamepads();
			}
			this.updateWindowBounds();
		}
		var newTimestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		if(this.app.shouldUpdate(newTimestamp)) {
			this.app.emitTick(newTimestamp);
		}
		if(!this.app.shuttingDown) {
			window.requestAnimationFrame($bind(this,this.loop));
		}
		return true;
	}
	,createWindow: function() {
		var config = this.app.config.window;
		this.window = window.document.createElement("canvas");
		this.windowDpr = this.windowDevicePixelRatio();
		this.window.width = Math.floor(config.width * this.windowDpr);
		this.window.height = Math.floor(config.height * this.windowDpr);
		this.windowW = config.width;
		this.windowH = config.height;
		this.window.style.width = config.width + "px";
		this.window.style.height = config.height + "px";
		this.window.style.background = "#000000";
		clay_Log.debug("Web / Created window at " + this.windowX + "," + this.windowY + " - " + this.window.width + "x" + this.window.height + " pixels (" + config.width + "x" + config.height + "@" + this.windowDpr + "x)",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 139, className : "clay.web.WebRuntime", methodName : "createWindow"});
		this.window.id = this.app.config.runtime.windowId;
		this.app.config.runtime.windowParent.appendChild(this.window);
		if(config.title != null) {
			window.document.title = config.title;
		}
		if(!this.createRenderContext(this.window)) {
			this.createRenderContextFailed();
			return;
		}
		this.postRenderContext(this.window);
		this.setupEvents();
	}
	,createRenderContext: function($window) {
		var config = this.app.config.render;
		var attr = this.applyGLAttributes(config);
		var gl = null;
		if(config.webgl.version != 1) {
			gl = $window.getContext("webgl" + config.webgl.version,attr);
			if(gl == null) {
				gl = $window.getContext("experimental-webgl" + config.webgl.version,attr);
			}
		}
		if(gl == null) {
			gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL($window,attr);
		}
		clay_opengl_web_GL.gl = gl;
		clay_Log.debug("GL / context: " + Std.string(gl != null),{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 181, className : "clay.web.WebRuntime", methodName : "createRenderContext"});
		return gl != null;
	}
	,createRenderContextFailed: function() {
		var msg = "WebGL is required to run this!<br/><br/>";
		msg += "visit <a style=\"color:#06b4fb; text-decoration:none;\" href=\"http://get.webgl.org/\">get.webgl.com</a> for info<br/>";
		msg += "and contact the developer of this app";
		var textEl = window.document.createElement("div");
		var overlayEl = window.document.createElement("div");
		textEl.style.marginLeft = "auto";
		textEl.style.marginRight = "auto";
		textEl.style.color = "#d3d3d3";
		textEl.style.marginTop = "5em";
		textEl.style.fontSize = "1.4em";
		textEl.style.fontFamily = "Helvetica, sans-serif";
		textEl.innerHTML = msg;
		overlayEl.style.top = "0";
		overlayEl.style.left = "0";
		overlayEl.style.width = "100%";
		overlayEl.style.height = "100%";
		overlayEl.style.display = "block";
		overlayEl.style.minWidth = "100%";
		overlayEl.style.minHeight = "100%";
		overlayEl.style.textAlign = "center";
		overlayEl.style.position = "absolute";
		overlayEl.style.background = "rgba(1,1,1,0.90)";
		overlayEl.appendChild(textEl);
		window.document.body.appendChild(overlayEl);
		throw haxe_Exception.thrown("Web / Failed to create render context");
	}
	,applyGLAttributes: function(config) {
		var attr = { alpha : config.webgl.alpha, antialias : config.webgl.antialias, depth : config.webgl.depth, stencil : config.webgl.stencil, failIfMajorPerformanceCaveat : config.webgl.failIfMajorPerformanceCaveat, premultipliedAlpha : config.webgl.premultipliedAlpha, preserveDrawingBuffer : config.webgl.preserveDrawingBuffer};
		if(config.antialiasing > 0) {
			attr.antialias = true;
		}
		if(config.depth > 0) {
			attr.depth = true;
		}
		if(config.stencil > 0) {
			attr.stencil = true;
		}
		return attr;
	}
	,postRenderContext: function($window) {
		var color = this.app.config.render.defaultClear;
		clay_opengl_web_GL.gl.clearDepth(1.0);
		clay_opengl_web_GL.gl.clearStencil(0);
		clay_opengl_web_GL.gl.clearColor(color.r,color.g,color.b,color.a);
		clay_opengl_web_GL.gl.clear(17664);
	}
	,setupEvents: function() {
		window.document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenChange));
		window.document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenError));
		this.window.addEventListener("mouseenter",$bind(this,this.handleMouseEnter));
		this.window.addEventListener("mouseleave",$bind(this,this.handleMouseLeave));
		window.document.addEventListener("visibilitychange",$bind(this,this.handleVisibilityChange));
		window.document.addEventListener("keydown",$bind(this,this.handleKeyDown));
		window.document.addEventListener("keyup",$bind(this,this.handleKeyUp));
		window.document.addEventListener("keypress",$bind(this,this.handleKeyPress));
		this.window.addEventListener("contextmenu",$bind(this,this.handleContextMenu));
		var eventsWindow = this.app.config.runtime.mouseUseBrowserWindowEvents ? window : this.window;
		eventsWindow.addEventListener("mousedown",$bind(this,this.handleMouseDown));
		eventsWindow.addEventListener("mouseup",$bind(this,this.handleMouseUp));
		eventsWindow.addEventListener("mousemove",$bind(this,this.handleMouseMove));
		this.window.addEventListener("wheel",$bind(this,this.handleWheel));
		this.window.addEventListener("touchstart",$bind(this,this.handleTouchStart));
		this.window.addEventListener("touchend",$bind(this,this.handleTouchEnd));
		this.window.addEventListener("touchmove",$bind(this,this.handleTouchMove));
		window.addEventListener("gamepadconnected",$bind(this,this.handleGamepadConnected));
		window.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadDisconnected));
	}
	,handleVisibilityChange: function(_) {
		if(window.document.hidden) {
			this.app.emitWindowEvent(2,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(7,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(13,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		} else {
			this.app.emitWindowEvent(1,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(9,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(12,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		}
	}
	,handleContextMenu: function(ev) {
		if(this.app.config.runtime.preventDefaultContextMenu) {
			ev.preventDefault();
		}
	}
	,handleFullscreenChange: function(ev) {
		var document = window.document;
		var fullscreenElement = document.fullscreenElement;
		if(fullscreenElement != null) {
			clay_Log.debug("Web / Entering fullscreen (id=" + fullscreenElement.id + ")",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 345, className : "clay.web.WebRuntime", methodName : "handleFullscreenChange"});
			this.app.config.window.fullscreen = true;
			this.app.emitWindowEvent(15,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		} else {
			clay_Log.debug("Web / Leaving fullscreen",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 350, className : "clay.web.WebRuntime", methodName : "handleFullscreenChange"});
			this.app.config.window.fullscreen = false;
			this.app.emitWindowEvent(16,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		}
	}
	,handleFullscreenError: function(ev) {
		clay_Log.warning("Web / Failed to change fullscreen setting: " + Std.string(ev),{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 359, className : "clay.web.WebRuntime", methodName : "handleFullscreenError"});
	}
	,handleMouseEnter: function(ev) {
		this.app.emitWindowEvent(10,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
	}
	,handleMouseLeave: function(ev) {
		this.app.emitWindowEvent(11,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
	}
	,handleMouseDown: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseDown(x,y,button,timestamp,1);
	}
	,handleMouseUp: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseUp(x,y,button,timestamp,1);
	}
	,handleMouseMove: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var movementX = ev.movementX == null ? 0 : ev.movementX;
		var movementY = ev.movementY == null ? 0 : ev.movementY;
		movementX = Math.floor(movementX * this.windowDpr);
		movementY = Math.floor(movementY * this.windowDpr);
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseMove(x,y,movementX,movementY,timestamp,1);
	}
	,handleWheel: function(ev) {
		if(this.app.config.runtime.preventDefaultMouseWheel) {
			ev.preventDefault();
		}
		if(this.skipMouseEvents) {
			return;
		}
		var wheelFactor = 0.1;
		var _this = this.app.input;
		var x = Math.round(ev.deltaX * wheelFactor);
		var y = Math.round(ev.deltaY * wheelFactor);
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseWheel(x,y,timestamp,1);
	}
	,handleTouchStart: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			} else {
				touchInfo.x = x;
				touchInfo.y = y;
			}
			var _this = this.app.input;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchDown(x,y,0,0,touchId,timestamp);
		}
	}
	,handleTouchEnd: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,handleTouchMove: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,handleKeyDown: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = clay_KeyCode.toScanCode(keyCode);
		var modState = this.modStateFromEvent(ev);
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		var _this = this.app.input;
		var repeat = ev.repeat;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.keyDown(keyCode,scanCode,repeat,modState,timestamp,1);
	}
	,handleKeyUp: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = clay_KeyCode.toScanCode(keyCode);
		var modState = this.modStateFromEvent(ev);
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		var _this = this.app.input;
		var repeat = ev.repeat;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.keyUp(keyCode,scanCode,repeat,modState,timestamp,1);
	}
	,handleKeyPress: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		if(ev.which != 0 && ev.keyCode != 8 && ev.keyCode != 13) {
			var code = ev.charCode;
			var text = String.fromCodePoint(code);
			var _this = this.app.input;
			var length = text.length;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.text(text,0,length,2,timestamp,1);
		}
	}
	,handleGamepadConnected: function(ev) {
		clay_Log.debug("Gamepad connected at index " + ev.gamepad.index + ": " + ev.gamepad.id + ". " + ev.gamepad.buttons.length + " buttons, " + ev.gamepad.axes.length + " axes",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 629, className : "clay.web.WebRuntime", methodName : "handleGamepadConnected"});
		var gamepad = ev.gamepad;
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var name = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,name,1,timestamp);
	}
	,handleGamepadDisconnected: function(ev) {
		clay_Log.debug("Gamepad disconnected at index " + ev.gamepad.index + ": " + ev.gamepad.id,{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 644, className : "clay.web.WebRuntime", methodName : "handleGamepadDisconnected"});
		var gamepad = ev.gamepad;
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var name = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,name,2,timestamp);
	}
	,convertKeyCode: function(domKeyCode) {
		if(domKeyCode >= 65 && domKeyCode <= 90) {
			return domKeyCode + 32;
		}
		return clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode(domKeyCode);
	}
	,modStateFromEvent: function(keyEvent) {
		var none = !keyEvent.altKey && !keyEvent.ctrlKey && !keyEvent.metaKey && !keyEvent.shiftKey;
		this.app.input.modState.none = none;
		this.app.input.modState.lshift = keyEvent.shiftKey;
		this.app.input.modState.rshift = keyEvent.shiftKey;
		this.app.input.modState.lctrl = keyEvent.ctrlKey;
		this.app.input.modState.rctrl = keyEvent.ctrlKey;
		this.app.input.modState.lalt = keyEvent.altKey;
		this.app.input.modState.ralt = keyEvent.altKey;
		this.app.input.modState.lmeta = keyEvent.metaKey;
		this.app.input.modState.rmeta = keyEvent.metaKey;
		this.app.input.modState.num = false;
		this.app.input.modState.caps = false;
		this.app.input.modState.mode = false;
		this.app.input.modState.ctrl = keyEvent.ctrlKey;
		this.app.input.modState.shift = keyEvent.shiftKey;
		this.app.input.modState.alt = keyEvent.altKey;
		this.app.input.modState.meta = keyEvent.metaKey;
		return this.app.input.modState;
	}
	,getWindowX: function(bounds) {
		return Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
	}
	,getWindowY: function(bounds) {
		return Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
	}
	,translateMouseX: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageX - this.windowX));
	}
	,translateMouseY: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageY - this.windowY));
	}
	,updateWindowBounds: function() {
		var dpr = this.windowDpr;
		this.windowDpr = this.windowDevicePixelRatio();
		var bounds = this.window.getBoundingClientRect();
		var x = Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
		var y = Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
		var w = Math.round(bounds.width);
		var h = Math.round(bounds.height);
		if(x != this.windowX || y != this.windowY) {
			this.windowX = x;
			this.windowY = y;
			this.app.emitWindowEvent(4,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.windowX,this.windowY);
		}
		if(w != this.windowW || h != this.windowH || dpr != this.windowDpr) {
			this.windowW = w;
			this.windowH = h;
			this.window.width = Math.floor(this.windowW * this.windowDpr);
			this.window.height = Math.floor(this.windowH * this.windowDpr);
			this.app.emitWindowEvent(6,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.window.width,this.window.height);
		}
	}
	,initGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			this.gamepadsSupported = true;
			this.gamepadButtonCache = [];
			this.gamepadAxisCache = [];
			var _g = 0;
			while(_g < list.length) {
				var gamepad = list[_g];
				++_g;
				if(gamepad != null) {
					if(this.gamepadButtonCache[gamepad.index] == null) {
						this.gamepadButtonCache[gamepad.index] = [];
						var _g1 = 0;
						var _g2 = gamepad.buttons.length;
						while(_g1 < _g2) {
							var i = _g1++;
							this.gamepadButtonCache[gamepad.index].push(0);
						}
						this.gamepadAxisCache[gamepad.index] = [];
						var _g3 = 0;
						var _g4 = gamepad.axes.length;
						while(_g3 < _g4) {
							var i1 = _g3++;
							this.gamepadAxisCache[gamepad.index].push(0);
						}
					}
				}
			}
		} else {
			clay_Log.warning("Gamepads are not supported in this browser :(",{ fileName : "/Users/jeremyfa/Developer/ceramic/git/clay/src/clay/web/WebRuntime.hx", lineNumber : 764, className : "clay.web.WebRuntime", methodName : "initGamepads"});
		}
	}
	,getGamepadList: function() {
		if($global.navigator.getGamepads != null) {
			return $global.navigator.getGamepads();
		}
		if($global.navigator.webkitGetGamepads != null) {
			return $global.navigator.webkitGetGamepads();
		}
		return null;
	}
	,initGamepadCacheIfNeeded: function(gamepad) {
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
	}
	,deleteGamepadCache: function(gamepad) {
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
	}
	,pollGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			var len = list.length;
			var index = 0;
			while(index < len) {
				var gamepad = list[index];
				if(gamepad == null) {
					++index;
					continue;
				}
				if(this.gamepadButtonCache[gamepad.index] == null) {
					this.gamepadButtonCache[gamepad.index] = [];
					var _g = 0;
					var _g1 = gamepad.buttons.length;
					while(_g < _g1) {
						var i = _g++;
						this.gamepadButtonCache[gamepad.index].push(0);
					}
					this.gamepadAxisCache[gamepad.index] = [];
					var _g2 = 0;
					var _g3 = gamepad.axes.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						this.gamepadAxisCache[gamepad.index].push(0);
					}
				}
				var axisCache = this.gamepadAxisCache[gamepad.index];
				var _g4 = 0;
				var _g5 = gamepad.axes.length;
				while(_g4 < _g5) {
					var axisIndex = _g4++;
					var axis = gamepad.axes[axisIndex];
					if(axis != axisCache[axisIndex]) {
						axisCache[axisIndex] = axis;
						var _this = this.app.input;
						var gamepad1 = gamepad.index;
						var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
						_this.app.events.gamepadAxis(gamepad1,axisIndex,axis,timestamp);
					}
				}
				var buttonCache = this.gamepadButtonCache[gamepad.index];
				var _g6 = 0;
				var _g7 = gamepad.buttons.length;
				while(_g6 < _g7) {
					var buttonIndex = _g6++;
					var button = gamepad.buttons[buttonIndex];
					if(button.value != buttonCache[buttonIndex]) {
						buttonCache[buttonIndex] = button.value;
						if(button.pressed) {
							var _this1 = this.app.input;
							var gamepad2 = gamepad.index;
							var value = button.value;
							var timestamp1 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this1.app.events.gamepadDown(gamepad2,buttonIndex,value,timestamp1);
						} else {
							var _this2 = this.app.input;
							var gamepad3 = gamepad.index;
							var value1 = button.value;
							var timestamp2 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this2.app.events.gamepadUp(gamepad3,buttonIndex,value1,timestamp2);
						}
					}
				}
				++index;
			}
		}
	}
	,windowDevicePixelRatio: function() {
		if(window.devicePixelRatio == null) {
			return 1.0;
		} else {
			return window.devicePixelRatio;
		}
	}
	,windowWidth: function() {
		return Math.round(this.windowW * this.windowDevicePixelRatio());
	}
	,windowHeight: function() {
		return Math.round(this.windowH * this.windowDevicePixelRatio());
	}
	,setWindowFullscreen: function(fullscreen) {
		if(fullscreen) {
			this.window.requestFullscreen();
		} else {
			window.document.exitFullscreen();
		}
		return true;
	}
	,setWindowTitle: function(title) {
		this.app.config.window.title = title;
		window.document.title = title;
	}
	,__class__: clay_web_WebRuntime
});
var clay_web__$WebRuntime_DOMKeys = function() { };
$hxClasses["clay.web._WebRuntime.DOMKeys"] = clay_web__$WebRuntime_DOMKeys;
clay_web__$WebRuntime_DOMKeys.__name__ = "clay.web._WebRuntime.DOMKeys";
clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode = function(keyCode) {
	switch(keyCode) {
	case 16:
		return 1073742049;
	case 17:
		return 1073742048;
	case 18:
		return 1073742050;
	case 20:
		return 1073741881;
	case 33:
		return 1073741899;
	case 34:
		return 1073741902;
	case 35:
		return 1073741901;
	case 36:
		return 1073741898;
	case 37:
		return 1073741904;
	case 38:
		return 1073741906;
	case 39:
		return 1073741903;
	case 40:
		return 1073741905;
	case 44:
		return 1073741894;
	case 45:
		return 1073741897;
	case 46:
		return 127;
	case 91:
		return 1073742051;
	case 93:
		return 1073742055;
	case 96:
		return 1073741922;
	case 97:
		return 1073741913;
	case 98:
		return 1073741914;
	case 99:
		return 1073741915;
	case 100:
		return 1073741916;
	case 101:
		return 1073741917;
	case 102:
		return 1073741918;
	case 103:
		return 1073741919;
	case 104:
		return 1073741920;
	case 105:
		return 1073741921;
	case 106:
		return 1073741909;
	case 107:
		return 1073741911;
	case 109:
		return 1073741910;
	case 110:
		return 1073742044;
	case 111:
		return 1073741908;
	case 112:
		return 1073741882;
	case 113:
		return 1073741883;
	case 114:
		return 1073741884;
	case 115:
		return 1073741885;
	case 116:
		return 1073741886;
	case 117:
		return 1073741887;
	case 118:
		return 1073741888;
	case 119:
		return 1073741889;
	case 120:
		return 1073741890;
	case 121:
		return 1073741891;
	case 122:
		return 1073741892;
	case 123:
		return 1073741893;
	case 124:
		return 1073741928;
	case 125:
		return 1073741929;
	case 126:
		return 1073741930;
	case 127:
		return 1073741931;
	case 128:
		return 1073741932;
	case 129:
		return 1073741933;
	case 130:
		return 1073741934;
	case 131:
		return 1073741935;
	case 132:
		return 1073741936;
	case 133:
		return 1073741937;
	case 134:
		return 1073741938;
	case 135:
		return 1073741939;
	case 144:
		return 1073741907;
	case 160:
		return 94;
	case 161:
		return 33;
	case 162:
		return 34;
	case 163:
		return 35;
	case 164:
		return 36;
	case 165:
		return 37;
	case 166:
		return 38;
	case 167:
		return 95;
	case 168:
		return 40;
	case 169:
		return 41;
	case 170:
		return 42;
	case 171:
		return 43;
	case 172:
		return 92;
	case 173:
		return 45;
	case 174:
		return 91;
	case 175:
		return 93;
	case 176:
		return 96;
	case 181:
		return 1073742086;
	case 182:
		return 1073741953;
	case 183:
		return 1073741952;
	case 188:
		return 44;
	case 190:
		return 46;
	case 191:
		return 47;
	case 192:
		return 96;
	case 219:
		return 91;
	case 220:
		return 92;
	case 221:
		return 93;
	case 222:
		return 39;
	case 224:
		return 1073742051;
	}
	return keyCode;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:"haxe.rtti.CType",__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:"haxe.rtti.Rights",__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:"haxe.rtti.TypeTree",__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var c = this1;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				var this1 = x1;
				tdynamic = this.xtype(this1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			var this1 = xdoc;
			tmp1 = haxe_xml_Access.get_innerData(this1);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					var this1 = x1;
					from.push({ t : this.xtype(this1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				var this2 = x2;
				athis = this.xtype(this2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					var this3 = x3;
					to.push({ t : this.xtype(this3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				var this1 = tx;
				t = this.xtype(this1);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.__properties__ = {get_innerHTML:"get_innerHTML",get_innerData:"get_innerData"};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hsluv_Geometry = function() { };
$hxClasses["hsluv.Geometry"] = hsluv_Geometry;
hsluv_Geometry.__name__ = "hsluv.Geometry";
hsluv_Geometry.intersectLineLine = function(a,b) {
	var x = (a.intercept - b.intercept) / (b.slope - a.slope);
	var y = a.slope * x + a.intercept;
	return { x : x, y : y};
};
hsluv_Geometry.distanceFromOrigin = function(point) {
	return Math.sqrt(Math.pow(point.x,2) + Math.pow(point.y,2));
};
hsluv_Geometry.distanceLineFromOrigin = function(line) {
	return Math.abs(line.intercept) / Math.sqrt(Math.pow(line.slope,2) + 1);
};
hsluv_Geometry.perpendicularThroughPoint = function(line,point) {
	var slope = -1 / line.slope;
	var intercept = point.y - slope * point.x;
	return { slope : slope, intercept : intercept};
};
hsluv_Geometry.angleFromOrigin = function(point) {
	return Math.atan2(point.y,point.x);
};
hsluv_Geometry.normalizeAngle = function(angle) {
	var m = 2 * Math.PI;
	return (angle % m + m) % m;
};
hsluv_Geometry.lengthOfRayUntilIntersect = function(theta,line) {
	return line.intercept / (Math.sin(theta) - line.slope * Math.cos(theta));
};
var hsluv_Hsluv = function() { };
$hxClasses["hsluv.Hsluv"] = hsluv_Hsluv;
hsluv_Hsluv.__name__ = "hsluv.Hsluv";
hsluv_Hsluv.getBounds = function(L) {
	var result = [];
	var sub1 = Math.pow(L + 16,3) / 1560896;
	var sub2 = sub1 > hsluv_Hsluv.epsilon ? sub1 : L / hsluv_Hsluv.kappa;
	var _g = 0;
	while(_g < 3) {
		var c = _g++;
		var m1 = hsluv_Hsluv.m[c][0];
		var m2 = hsluv_Hsluv.m[c][1];
		var m3 = hsluv_Hsluv.m[c][2];
		var top1 = (284517 * m1 - 94839 * m3) * sub2;
		var top2 = (838422 * m3 + 769860 * m2 + 731718 * m1) * L * sub2 - 0 * L;
		var bottom = (632260 * m3 - 126452 * m2) * sub2;
		result.push({ slope : top1 / bottom, intercept : top2 / bottom});
		var top11 = (284517 * m1 - 94839 * m3) * sub2;
		var top21 = (838422 * m3 + 769860 * m2 + 731718 * m1) * L * sub2 - 769860 * L;
		var bottom1 = (632260 * m3 - 126452 * m2) * sub2 + 126452;
		result.push({ slope : top11 / bottom1, intercept : top21 / bottom1});
	}
	return result;
};
hsluv_Hsluv.maxSafeChromaForL = function(L) {
	var bounds = hsluv_Hsluv.getBounds(L);
	var min = Infinity;
	var _g = 0;
	while(_g < bounds.length) {
		var bound = bounds[_g];
		++_g;
		var length = hsluv_Geometry.distanceLineFromOrigin(bound);
		min = Math.min(min,length);
	}
	return min;
};
hsluv_Hsluv.maxChromaForLH = function(L,H) {
	var hrad = H / 360 * Math.PI * 2;
	var bounds = hsluv_Hsluv.getBounds(L);
	var min = Infinity;
	var _g = 0;
	while(_g < bounds.length) {
		var bound = bounds[_g];
		++_g;
		var length = hsluv_Geometry.lengthOfRayUntilIntersect(hrad,bound);
		if(length >= 0) {
			min = Math.min(min,length);
		}
	}
	return min;
};
hsluv_Hsluv.dotProduct = function(a,b) {
	var sum = 0;
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		sum += a[i] * b[i];
	}
	return sum;
};
hsluv_Hsluv.fromLinear = function(c) {
	if(c <= 0.0031308) {
		return 12.92 * c;
	} else {
		return 1.055 * Math.pow(c,0.416666666666666685) - 0.055;
	}
};
hsluv_Hsluv.toLinear = function(c) {
	if(c > 0.04045) {
		return Math.pow((c + 0.055) / 1.055,2.4);
	} else {
		return c / 12.92;
	}
};
hsluv_Hsluv.xyzToRgb = function(tuple,result) {
	var dp0 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[0],tuple));
	var dp1 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[1],tuple));
	var dp2 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[2],tuple));
	if(result == null) {
		result = [0,0,0];
	}
	result[0] = dp0;
	result[1] = dp1;
	result[2] = dp2;
	return result;
};
hsluv_Hsluv.rgbToXyz = function(tuple,result) {
	var t0 = tuple[0];
	var t1 = tuple[1];
	var t2 = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	result[0] = hsluv_Hsluv.toLinear(t0);
	result[1] = hsluv_Hsluv.toLinear(t1);
	result[2] = hsluv_Hsluv.toLinear(t2);
	var dp0 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[0],result);
	var dp1 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[1],result);
	var dp2 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[2],result);
	result[0] = dp0;
	result[1] = dp1;
	result[2] = dp2;
	return result;
};
hsluv_Hsluv.yToL = function(Y) {
	if(Y <= hsluv_Hsluv.epsilon) {
		return Y / hsluv_Hsluv.refY * hsluv_Hsluv.kappa;
	} else {
		return 116 * Math.pow(Y / hsluv_Hsluv.refY,0.333333333333333315) - 16;
	}
};
hsluv_Hsluv.lToY = function(L) {
	if(L <= 8) {
		return hsluv_Hsluv.refY * L / hsluv_Hsluv.kappa;
	} else {
		return hsluv_Hsluv.refY * Math.pow((L + 16) / 116,3);
	}
};
hsluv_Hsluv.xyzToLuv = function(tuple,result) {
	var X = tuple[0];
	var Y = tuple[1];
	var Z = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var divider = X + 15 * Y + 3 * Z;
	var varU = 4 * X;
	var varV = 9 * Y;
	if(divider != 0) {
		varU /= divider;
		varV /= divider;
	} else {
		varU = NaN;
		varV = NaN;
	}
	var L = hsluv_Hsluv.yToL(Y);
	if(L == 0) {
		result[0] = 0;
		result[1] = 0;
		result[2] = 0;
		return result;
	}
	var U = 13 * L * (varU - hsluv_Hsluv.refU);
	var V = 13 * L * (varV - hsluv_Hsluv.refV);
	result[0] = L;
	result[1] = U;
	result[2] = V;
	return result;
};
hsluv_Hsluv.luvToXyz = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	var L = tuple[0];
	var U = tuple[1];
	var V = tuple[2];
	if(L == 0) {
		result[0] = 0;
		result[1] = 1;
		result[2] = 2;
		return result;
	}
	var varU = U / (13 * L) + hsluv_Hsluv.refU;
	var varV = V / (13 * L) + hsluv_Hsluv.refV;
	var Y = hsluv_Hsluv.lToY(L);
	var X = 0 - 9 * Y * varU / ((varU - 4) * varV - varU * varV);
	var Z = (9 * Y - 15 * varV * Y - varV * X) / (3 * varV);
	result[0] = X;
	result[1] = Y;
	result[2] = Z;
	return result;
};
hsluv_Hsluv.luvToLch = function(tuple,result) {
	var L = tuple[0];
	var U = tuple[1];
	var V = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var C = Math.sqrt(U * U + V * V);
	var H;
	if(C < 0.00000001) {
		H = 0;
	} else {
		var Hrad = Math.atan2(V,U);
		H = Hrad * 180.0 / Math.PI;
		if(H < 0) {
			H = 360 + H;
		}
	}
	result[0] = L;
	result[1] = C;
	result[2] = H;
	return result;
};
hsluv_Hsluv.lchToLuv = function(tuple,result) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var Hrad = H / 360.0 * 2 * Math.PI;
	var U = Math.cos(Hrad) * C;
	var V = Math.sin(Hrad) * C;
	result[0] = L;
	result[1] = U;
	result[2] = V;
	return result;
};
hsluv_Hsluv.hsluvToLch = function(tuple,result) {
	var H = tuple[0];
	var S = tuple[1];
	var L = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	if(L > 99.9999999) {
		result[0] = 100;
		result[1] = 0;
		result[2] = H;
		return result;
	}
	if(L < 0.00000001) {
		result[0] = 0;
		result[1] = 0;
		result[2] = H;
		return result;
	}
	var max = hsluv_Hsluv.maxChromaForLH(L,H);
	var C = max / 100 * S;
	result[0] = L;
	result[1] = C;
	result[2] = H;
	return result;
};
hsluv_Hsluv.lchToHsluv = function(tuple,result) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	if(L > 99.9999999) {
		result[0] = H;
		result[1] = 0;
		result[2] = 100;
		return result;
	}
	if(L < 0.00000001) {
		result[0] = H;
		result[1] = 0;
		result[2] = 0;
		return result;
	}
	var max = hsluv_Hsluv.maxChromaForLH(L,H);
	var S = C / max * 100;
	result[0] = H;
	result[1] = S;
	result[2] = L;
	return result;
};
hsluv_Hsluv.hpluvToLch = function(tuple) {
	var H = tuple[0];
	var S = tuple[1];
	var L = tuple[2];
	if(L > 99.9999999) {
		return [100,0,H];
	}
	if(L < 0.00000001) {
		return [0,0,H];
	}
	var max = hsluv_Hsluv.maxSafeChromaForL(L);
	var C = max / 100 * S;
	return [L,C,H];
};
hsluv_Hsluv.lchToHpluv = function(tuple) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(L > 99.9999999) {
		return [H,0,100];
	}
	if(L < 0.00000001) {
		return [H,0,0];
	}
	var max = hsluv_Hsluv.maxSafeChromaForL(L);
	var S = C / max * 100;
	return [H,S,L];
};
hsluv_Hsluv.rgbToHex = function(tuple) {
	var h = "#";
	var chan = tuple[0];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	var chan = tuple[1];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	var chan = tuple[2];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	return h;
};
hsluv_Hsluv.hexToRgb = function(hex) {
	hex = hex.toLowerCase();
	var ret = [];
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(1));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(2));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(3));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(4));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(5));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(6));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	return ret;
};
hsluv_Hsluv.lchToRgb = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.lchToLuv(tuple,result);
	hsluv_Hsluv.luvToXyz(result,result);
	hsluv_Hsluv.xyzToRgb(result,result);
	return result;
};
hsluv_Hsluv.rgbToLch = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.rgbToXyz(tuple,result);
	hsluv_Hsluv.xyzToLuv(result,result);
	hsluv_Hsluv.luvToLch(result,result);
	return result;
};
hsluv_Hsluv.hsluvToRgb = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.hsluvToLch(tuple,result);
	hsluv_Hsluv.lchToRgb(result,result);
	return result;
};
hsluv_Hsluv.rgbToHsluv = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.rgbToLch(tuple,result);
	hsluv_Hsluv.lchToHsluv(result,result);
	return result;
};
hsluv_Hsluv.hpluvToRgb = function(tuple) {
	return hsluv_Hsluv.lchToRgb(hsluv_Hsluv.hpluvToLch(tuple));
};
hsluv_Hsluv.rgbToHpluv = function(tuple) {
	return hsluv_Hsluv.lchToHpluv(hsluv_Hsluv.rgbToLch(tuple));
};
hsluv_Hsluv.hsluvToHex = function(tuple) {
	return hsluv_Hsluv.rgbToHex(hsluv_Hsluv.hsluvToRgb(tuple));
};
hsluv_Hsluv.hpluvToHex = function(tuple) {
	return hsluv_Hsluv.rgbToHex(hsluv_Hsluv.hpluvToRgb(tuple));
};
hsluv_Hsluv.hexToHsluv = function(s) {
	return hsluv_Hsluv.rgbToHsluv(hsluv_Hsluv.hexToRgb(s));
};
hsluv_Hsluv.hexToHpluv = function(s) {
	return hsluv_Hsluv.rgbToHpluv(hsluv_Hsluv.hexToRgb(s));
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var tracker_Assert = function() { };
$hxClasses["tracker.Assert"] = tracker_Assert;
tracker_Assert.__name__ = "tracker.Assert";
var tracker_Autorun = function(onRun,afterRun) {
	this.invalidated = false;
	this.boundAutorunArrays = null;
	this.afterRun = null;
	this.onRun = null;
	ceramic_Entity.call(this);
	this.onRun = onRun;
	this.afterRun = afterRun;
	if(onRun != null) {
		this.run();
	}
};
$hxClasses["tracker.Autorun"] = tracker_Autorun;
tracker_Autorun.__name__ = "tracker.Autorun";
tracker_Autorun.unobserve = function() {
	tracker_Autorun.prevCurrent.push(tracker_Autorun.current);
	tracker_Autorun.current = null;
};
tracker_Autorun.reobserve = function() {
	tracker_Autorun.current = tracker_Autorun.prevCurrent.pop();
};
tracker_Autorun.unobserved = function(func) {
	tracker_Autorun.prevCurrent.push(tracker_Autorun.current);
	tracker_Autorun.current = null;
	func();
	tracker_Autorun.current = tracker_Autorun.prevCurrent.pop();
};
tracker_Autorun.getAutorunArray = function() {
	if(tracker_Autorun._autorunArraysLen > 0) {
		tracker_Autorun._autorunArraysLen--;
		var array = tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen];
		tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen] = null;
		return array;
	} else {
		return [];
	}
};
tracker_Autorun.recycleAutorunArray = function(array) {
	array.splice(0,array.length);
	tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen] = array;
	tracker_Autorun._autorunArraysLen++;
};
tracker_Autorun.getArrayOfAutorunArrays = function() {
	if(tracker_Autorun._arrayOfAutorunArraysLen > 0) {
		tracker_Autorun._arrayOfAutorunArraysLen--;
		var array = tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen];
		tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = null;
		return array;
	} else {
		return [];
	}
};
tracker_Autorun.recycleArrayOfAutorunArrays = function(array) {
	array.splice(0,array.length);
	tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = array;
	tracker_Autorun._arrayOfAutorunArraysLen++;
};
tracker_Autorun.__super__ = ceramic_Entity;
tracker_Autorun.prototype = $extend(ceramic_Entity.prototype,{
	emitReset: function() {
		this.unbindFromAllAutorunArrays();
		var len = 0;
		if(this.__cbOnReset != null) {
			len += this.__cbOnReset.length;
		}
		if(this.__cbOnceReset != null) {
			len += this.__cbOnceReset.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnReset.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnReset[ii];
					++i;
				}
			}
			if(this.__cbOnceReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnceReset.length;
				while(_g < _g1) {
					var ii = _g++;
					callbacks.vector[i] = this.__cbOnceReset[ii];
					var unbind = this.__cbOnceOwnerUnbindReset[ii];
					if(unbind != null) {
						unbind();
					}
					++i;
				}
				this.__cbOnceReset = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReset: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "reset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReset(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReset == null) {
				this.__cbOnOwnerUnbindReset = [];
			}
			this.__cbOnOwnerUnbindReset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReset == null) {
				this.__cbOnOwnerUnbindReset = [];
			}
			this.__cbOnOwnerUnbindReset.push(null);
		}
		if(this.__cbOnReset == null) {
			this.__cbOnReset = [];
		}
		this.__cbOnReset.push(handle);
	}
	,onceReset: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "reset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReset(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReset == null) {
				this.__cbOnceOwnerUnbindReset = [];
			}
			this.__cbOnceOwnerUnbindReset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReset == null) {
				this.__cbOnceOwnerUnbindReset = [];
			}
			this.__cbOnceOwnerUnbindReset.push(null);
		}
		if(this.__cbOnceReset == null) {
			this.__cbOnceReset = [];
		}
		this.__cbOnceReset.push(handle);
	}
	,offReset: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReset != null) {
				index = this.__cbOnReset.indexOf(handle);
				if(index != -1) {
					this.__cbOnReset.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReset.splice(index,1);
				}
			}
			if(this.__cbOnceReset != null) {
				index = this.__cbOnceReset.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReset.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReset.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReset = null;
			}
			if(this.__cbOnceOwnerUnbindReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReset = null;
			}
			this.__cbOnReset = null;
			this.__cbOnceReset = null;
		}
	}
	,listensReset: function() {
		if(!(this.__cbOnReset != null && this.__cbOnReset.length > 0)) {
			if(this.__cbOnceReset != null) {
				return this.__cbOnceReset.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.emitReset();
		this.onRun = null;
		this.afterRun = null;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,willEmitReset: function() {
		this.unbindFromAllAutorunArrays();
	}
	,run: function() {
		if(this._lifecycleState < 0) {
			return;
		}
		this.invalidated = false;
		this.emitReset();
		var _prevCurrent = tracker_Autorun.current;
		tracker_Autorun.current = this;
		var numPrevCurrent = tracker_Autorun.prevCurrent.length;
		this.onRun();
		if(this.afterRun != null) {
			tracker_Autorun.prevCurrent.push(tracker_Autorun.current);
			tracker_Autorun.current = null;
			this.afterRun();
			tracker_Autorun.current = tracker_Autorun.prevCurrent.pop();
		}
		while(numPrevCurrent < tracker_Autorun.prevCurrent.length) tracker_Autorun.prevCurrent.pop();
		tracker_Autorun.current = _prevCurrent;
	}
	,invalidate: function() {
		if(this.invalidated) {
			return;
		}
		this.invalidated = true;
		this.unbindFromAllAutorunArrays();
		var _this = tracker_Tracker.backend;
		ceramic_App.app.onceImmediate($bind(this,this.run));
	}
	,bindToAutorunArray: function(autorunArray) {
		if(this.invalidated) {
			return;
		}
		var alreadyBound = false;
		if(this.boundAutorunArrays == null) {
			var tmp;
			if(tracker_Autorun._arrayOfAutorunArraysLen > 0) {
				tracker_Autorun._arrayOfAutorunArraysLen--;
				var array = tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen];
				tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = null;
				tmp = array;
			} else {
				tmp = [];
			}
			this.boundAutorunArrays = tmp;
		} else {
			var _g = 0;
			var _g1 = this.boundAutorunArrays.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.boundAutorunArrays[i] == autorunArray) {
					alreadyBound = true;
					break;
				}
			}
		}
		if(!alreadyBound) {
			var nullIndex = -1;
			var len = autorunArray.length;
			var i = len - 1;
			while(i >= 0) {
				var item = autorunArray[i];
				if(item == null) {
					nullIndex = i;
					break;
				}
				--i;
			}
			if(nullIndex == -1) {
				autorunArray.push(this);
			} else {
				var lenMinus1 = len - 1;
				if(nullIndex < lenMinus1) {
					var _g = nullIndex + 1;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var item = autorunArray[i];
						var iMinus1 = i - 1;
						autorunArray[iMinus1] = item;
					}
				}
				autorunArray[lenMinus1] = this;
			}
			this.boundAutorunArrays.push(autorunArray);
		}
	}
	,unbindFromAllAutorunArrays: function() {
		if(this.boundAutorunArrays != null) {
			var _g = 0;
			var _g1 = this.boundAutorunArrays.length;
			while(_g < _g1) {
				var ii = _g++;
				var autorunArray = this.boundAutorunArrays[ii];
				var numNulls = 0;
				var len = autorunArray.length;
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var i = _g2++;
					var autorun = autorunArray[i];
					if(autorun != null) {
						if(autorun == this) {
							autorunArray[i] = null;
							break;
						}
					}
				}
			}
			var array = this.boundAutorunArrays;
			array.splice(0,array.length);
			tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = array;
			tracker_Autorun._arrayOfAutorunArraysLen++;
			this.boundAutorunArrays = null;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offReset();
	}
	,__class__: tracker_Autorun
});
var tracker_Extensions = function() { };
$hxClasses["tracker.Extensions"] = tracker_Extensions;
tracker_Extensions.__name__ = "tracker.Extensions";
tracker_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
tracker_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
tracker_Extensions.setArrayLength = function(array,length) {
	if(array.length != length) {
		if(array.length > length) {
			array.splice(length,array.length - length);
		} else {
			var dArray = array;
			dArray[length - 1] = null;
		}
	}
};
tracker_Extensions.setProperty = function(instance,field,value) {
	Reflect.setProperty(instance,field,value);
};
tracker_Extensions.getProperty = function(instance,field) {
	return Reflect.getProperty(instance,field);
};
var tracker_Tracker = function() { };
$hxClasses["tracker.Tracker"] = tracker_Tracker;
tracker_Tracker.__name__ = "tracker.Tracker";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
assets_AllAssets.bind();
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
ceramic_Entity.__meta__ = { obj : { editable : null}, fields : { components : { editable : null}}};
ceramic_Entity._fieldInfo = { components : { editable : [], type : "ceramic.ReadOnlyMap<String,ceramic.Component>", index : 1}, scriptContent : { editable : [{ label : "Script"}], type : "ceramic.ScriptContent", index : 2}};
ceramic_Transform._decomposed1 = new ceramic_DecomposedTransform();
ceramic_Transform._decomposed2 = new ceramic_DecomposedTransform();
ceramic_Transform._tmp = new ceramic_Transform();
ceramic_Visual.__meta__ = { obj : { editable : null}, fields : { visible : { editable : [{ group : "active"}]}, touchable : { editable : [{ group : "active"}]}, depth : { editable : [{ group : "depth"}]}, depthRange : { editable : [{ group : "depth", label : "Range"}]}, x : { editable : [{ group : "position"}]}, y : { editable : [{ group : "position"}]}, scaleX : { editable : [{ group : "scale"}]}, scaleY : { editable : [{ group : "scale"}]}, skewX : { editable : [{ group : "skew"}]}, skewY : { editable : [{ group : "skew"}]}, anchorX : { editable : [{ group : "anchor"}]}, anchorY : { editable : [{ group : "anchor"}]}, width : { editable : [{ min : 0, group : "size"}]}, height : { editable : [{ min : 0, group : "size"}]}, roundTranslation : { editable : null}, rotation : { editable : [{ slider : [0,360], degrees : true}]}, alpha : { editable : [{ slider : [0,1]}]}, translateX : { editable : [{ group : "translate"}]}, translateY : { editable : [{ group : "translate"}]}, shader : { editable : null}}};
ceramic_Visual.DEPTH_FACTOR = 2000000;
ceramic_Visual.DEPTH_MARGIN = 0.01;
ceramic_Visual._degToRad = 0.017453292519943295;
ceramic_Visual._matrix = new ceramic_Transform();
ceramic_Visual._point = new ceramic_Point();
ceramic_Visual._minDepth = 0;
ceramic_Visual._maxDepth = 0;
ceramic_Visual._fieldInfo = { skewY : { editable : [{ group : "skew"}], type : "Float", index : 58}, skewX : { editable : [{ group : "skew"}], type : "Float", index : 56}, alpha : { editable : [{ slider : [0,1]}], type : "Float", index : 76}, roundTranslation : { editable : [], type : "Int", index : 72}, visible : { editable : [{ group : "active"}], type : "Bool", index : 40}, depthRange : { editable : [{ group : "depth", label : "Range"}], type : "Float", index : 46}, depth : { editable : [{ group : "depth"}], type : "Float", index : 44}, scaleX : { editable : [{ group : "scale"}], type : "Float", index : 52}, anchorX : { editable : [{ group : "anchor"}], type : "Float", index : 60}, x : { editable : [{ group : "position"}], type : "Float", index : 48}, y : { editable : [{ group : "position"}], type : "Float", index : 50}, touchable : { editable : [{ group : "active"}], type : "Bool", index : 42}, rotation : { editable : [{ slider : [0,360], degrees : true}], type : "Float", index : 74}, height : { editable : [{ min : 0, group : "size"}], type : "Float", index : 68}, translateY : { editable : [{ group : "translate"}], type : "Float", index : 81}, anchorY : { editable : [{ group : "anchor"}], type : "Float", index : 62}, translateX : { editable : [{ group : "translate"}], type : "Float", index : 78}, scaleY : { editable : [{ group : "scale"}], type : "Float", index : 54}, width : { editable : [{ min : 0, group : "size"}], type : "Float", index : 64}, shader : { editable : [], type : "ceramic.Shader", index : 86}};
ceramic_Quad.__meta__ = { obj : { editable : [{ implicitSizeUnlessNull : "texture"}]}, fields : { color : { editable : null}, transparent : { editable : null}, texture : { editable : null}}};
ceramic_Quad._matrix = ceramic_Visual._matrix;
ceramic_Quad._degToRad = 0.017453292519943295;
ceramic_Quad._fieldInfo = { transparent : { editable : [], type : "Bool", index : 3}, color : { editable : [], type : "ceramic.Color", index : 2}, texture : { editable : [], type : "ceramic.Texture", index : 6}};
ceramic_Layer.__meta__ = { obj : { editable : [{ implicitSizeUnlessNull : "texture"}]}};
ceramic_Layer._fieldInfo = { };
Main.lastResizeTime = -1;
Main.lastNewWidth = -1;
Main.lastNewHeight = -1;
Main.readyToDisplay = false;
Main.resizing = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
ceramic_Assets.all = [];
ceramic_Assets.allDirs = [];
ceramic_Assets.allByName = new haxe_ds_StringMap();
ceramic_Assets.allDirsByName = new haxe_ds_StringMap();
ceramic_Assets.customAssetKinds = new haxe_ds_StringMap();
assets_AllAssets.all = ["ceramic@2x.png","ceramic.png","haxe-logo.png","tintBlack.shader","glow.shader","pixelArt.shader","textured.shader","stencil.shader","bloom.shader","msdf.shader","outline.shader","blur.shader","outline.vert","pixelArt.vert","fxaa.vert","msdf.frag","textured.frag","tintBlack.vert","glow.vert","bloom.vert","blur.vert","bloom.frag","blur.frag","glow.frag","msdf.vert","textured.vert","tintBlack.frag","pixelArt.frag","fxaa.frag","outline.frag","RobotoMedium.fnt","white.png","RobotoMedium.png"];
assets_AllAssets.allDirs = [];
assets_AllAssets.allByName = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["white"] = ["white.png"];
	_g.h["tintBlack"] = ["tintBlack.shader","tintBlack.vert","tintBlack.frag"];
	_g.h["textured"] = ["textured.shader","textured.frag","textured.vert"];
	_g.h["stencil"] = ["stencil.shader"];
	_g.h["pixelArt"] = ["pixelArt.shader","pixelArt.vert","pixelArt.frag"];
	_g.h["outline"] = ["outline.shader","outline.vert","outline.frag"];
	_g.h["msdf"] = ["msdf.shader","msdf.frag","msdf.vert"];
	_g.h["haxe-logo"] = ["haxe-logo.png"];
	_g.h["glow"] = ["glow.shader","glow.vert","glow.frag"];
	_g.h["fxaa"] = ["fxaa.vert","fxaa.frag"];
	_g.h["ceramic"] = ["ceramic@2x.png","ceramic.png"];
	_g.h["blur"] = ["blur.shader","blur.vert","blur.frag"];
	_g.h["bloom"] = ["bloom.shader","bloom.vert","bloom.frag"];
	_g.h["RobotoMedium"] = ["RobotoMedium.fnt","RobotoMedium.png"];
	$r = _g;
	return $r;
}(this));
assets_AllAssets.allDirsByName = new haxe_ds_StringMap();
assets_Images.WHITE = "image:white";
assets_Images.ROBOTO_MEDIUM = "image:RobotoMedium";
assets_Images.HAXE_LOGO = "image:haxe-logo";
assets_Images.CERAMIC = "image:ceramic";
backend_ClayEvents.GAMEPAD_STORAGE_SIZE = 32;
backend_Draw.MAX_VERTS_SIZE = 65536;
backend_Draw.MAX_INDICES = 16384;
backend_Draw.MAX_BUFFERS = 64;
backend_Draw.ATTRIBUTE_POS = 0;
backend_Draw.ATTRIBUTE_UV = 1;
backend_Draw.ATTRIBUTE_COLOR = 2;
backend_Draw._posListArray = [];
backend_Draw._indiceListArray = [];
backend_Draw._uvListArray = [];
backend_Draw._colorListArray = [];
backend_Draw._activeTextureSlot = 0;
backend_Draw._batchMultiTexture = false;
backend_Draw._posSize = 0;
backend_Draw._customGLBuffers = [];
backend_Draw._projectionMatrix = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
backend_Draw._modelViewMatrix = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
backend_Draw._modelViewTransform = new ceramic_Transform();
backend_Draw._renderTargetTransform = new ceramic_Transform();
backend_Draw._blackTransparentColor = (function($this) {
	var $r;
	var alpha = 0;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (0 | 0) + (-16777216);
	{
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	}
	var this1 = value;
	$r = this1;
	return $r;
}(this));
backend_Draw._whiteTransparentColor = (function($this) {
	var $r;
	var alpha = 0;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (16777215 | 0) + (-16777216);
	{
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	}
	var this1 = value;
	$r = this1;
	return $r;
}(this));
backend_Draw._maxVerts = 0;
backend_Draw._vertexSize = 0;
backend_Draw._numIndices = 0;
backend_Draw._numPos = 0;
backend_Draw._posIndex = 0;
backend_Draw._floatAttributesSize = 0;
backend_Draw._numUVs = 0;
backend_Draw._uvIndex = 0;
backend_Draw._numColors = 0;
backend_Draw._colorIndex = 0;
backend_Draw._drawingInStencilBuffer = false;
backend_Shaders.SHADER_ATTRIBUTES = ["vertexPosition","vertexTCoord","vertexColor"];
backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE = ["vertexPosition","vertexTCoord","vertexColor","vertexTextureId"];
backend_Shaders._maxIfStatementsByFragmentShader = -1;
backend_TextureId.DEFAULT = null;
backend_Textures._maxTexturesByBatch = -1;
ceramic_ArrayPool.ALLOC_STEP = 10;
ceramic_ArrayPool.dynPool10 = new ceramic_ArrayPool(10);
ceramic_ArrayPool.dynPool100 = new ceramic_ArrayPool(100);
ceramic_ArrayPool.dynPool1000 = new ceramic_ArrayPool(1000);
ceramic_ArrayPool.dynPool10000 = new ceramic_ArrayPool(10000);
ceramic_ArrayPool.dynPool100000 = new ceramic_ArrayPool(100000);
ceramic_ArrayPool.didNotifyLargePool = false;
ceramic_Asset.__meta__ = { fields : { unobservedStatus : { observe : null}}};
ceramic_BezierEasing.SPLINE_TABLE_SIZE = 11;
ceramic_BezierEasing.SAMPLE_STEP_SIZE = 1.0 / (ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1.0);
ceramic_BezierEasing.NEWTON_ITERATIONS = 4;
ceramic_BezierEasing.NEWTON_MIN_SLOPE = 0.001;
ceramic_BezierEasing.SUBDIVISION_PRECISION = 0.0000001;
ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS = 10;
ceramic_BezierEasing.TWO_THIRD = 0.66666666666666663;
ceramic_BezierEasing.CACHE_SIZE = 10000;
ceramic_BezierEasing.numCachedInstances = 0;
ceramic_BinaryAsset.__meta__ = { fields : { unobservedBytes : { observe : null}}};
ceramic_CollectionImpl._nextInternalId = 0;
ceramic_CollectionEntry.__meta__ = { fields : { id : { editable : null}, name : { editable : null}}};
ceramic_CollectionEntry._nextId = 1;
ceramic_CollectionEntry._nextIndex = 1;
ceramic_CollectionEntry._fieldInfo = { name : { editable : [], type : "String"}, id : { editable : [], type : "String"}, index : { type : "Int"}};
ceramic_Color.NONE = -1;
ceramic_Color.WHITE = 16777215;
ceramic_Color.GRAY = 8421504;
ceramic_Color.BLACK = 0;
ceramic_Color.GREEN = 32768;
ceramic_Color.LIME = 65280;
ceramic_Color.YELLOW = 16776960;
ceramic_Color.ORANGE = 16753920;
ceramic_Color.RED = 16711680;
ceramic_Color.PURPLE = 8388736;
ceramic_Color.BLUE = 255;
ceramic_Color.BROWN = 9127187;
ceramic_Color.PINK = 16761035;
ceramic_Color.MAGENTA = 16711935;
ceramic_Color.CYAN = 65535;
ceramic_Color.colorLookup = new haxe_ds_StringMap();
ceramic_Color._hsluvTuple = [0,0,0];
ceramic_Color._hsluvResult = [0,0,0];
ceramic_DatabaseAsset.__meta__ = { fields : { unobservedDatabase : { observe : null}}};
ceramic_EasingUtils._emptyArray = [];
ceramic_FieldInfo.fieldInfoMap = new haxe_ds_StringMap();
ceramic_Filter.__meta__ = { fields : { unobservedRenderTexture : { observe : null}}};
ceramic_Filter._matrix = ceramic_Visual._matrix;
ceramic_FontAsset.__meta__ = { fields : { unobservedFont : { observe : null}}};
ceramic_Fragment.__meta__ = { obj : { editable : [{ implicitSizeUnlessTrue : "resizable"}]}, fields : { fragmentData : { editable : null}, resizable : { editable : null}, autoUpdateTimeline : { editable : null}, floatA : { editable : [{ group : "floatsAB"}]}, floatB : { editable : [{ group : "floatsAB"}]}, floatC : { editable : [{ group : "floatsCD"}]}, floatD : { editable : [{ group : "floatsCD"}]}}};
ceramic_Fragment.basicTypes = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["Bool"] = true;
	_g.h["Int"] = true;
	_g.h["Float"] = true;
	_g.h["String"] = true;
	_g.h["ceramic.Color"] = true;
	_g.h["ceramic.ScriptContent"] = true;
	$r = _g;
	return $r;
}(this));
ceramic_Fragment.cachedFragmentData = new haxe_ds_StringMap();
ceramic_Fragment._trackResult = new ceramic_Value();
ceramic_Fragment._keyframeResult = new ceramic_Value();
ceramic_Fragment._usedKeyframes = [];
ceramic_Fragment._fieldInfo = { autoUpdateTimeline : { editable : [], type : "Bool", index : 53}, floatD : { editable : [{ group : "floatsCD"}], type : "Float", index : 61}, floatA : { editable : [{ group : "floatsAB"}], type : "Float", index : 55}, resizable : { editable : [], type : "Bool", index : 52}, floatC : { editable : [{ group : "floatsCD"}], type : "Float", index : 59}, floatB : { editable : [{ group : "floatsAB"}], type : "Float", index : 57}, fragmentData : { editable : [], type : "ceramic.FragmentData", index : 51}};
ceramic_FragmentsAsset.__meta__ = { fields : { unobservedFragments : { observe : null}}};
ceramic_GamepadAxis.LEFT_X = 0;
ceramic_GamepadAxis.LEFT_Y = 1;
ceramic_GamepadAxis.RIGHT_X = 2;
ceramic_GamepadAxis.RIGHT_Y = 3;
ceramic_GamepadButton.A = 0;
ceramic_GamepadButton.B = 1;
ceramic_GamepadButton.X = 2;
ceramic_GamepadButton.Y = 3;
ceramic_GamepadButton.L1 = 4;
ceramic_GamepadButton.R1 = 5;
ceramic_GamepadButton.L2 = 6;
ceramic_GamepadButton.R2 = 7;
ceramic_GamepadButton.SELECT = 8;
ceramic_GamepadButton.START = 9;
ceramic_GamepadButton.L3 = 10;
ceramic_GamepadButton.R3 = 11;
ceramic_GamepadButton.DPAD_UP = 12;
ceramic_GamepadButton.DPAD_DOWN = 13;
ceramic_GamepadButton.DPAD_LEFT = 14;
ceramic_GamepadButton.DPAD_RIGHT = 15;
ceramic_HashedString._lastDecodeIncomplete = false;
ceramic_ImageAsset.__meta__ = { fields : { unobservedTexture : { observe : null}}};
ceramic_Input.GAMEPAD_STORAGE_SIZE = 32;
ceramic_IntMap.NO_VALUE = 0;
ceramic_IntMap.NULL_VALUE = 1;
ceramic_IntMap.RESERVED_GAP = 2;
ceramic_KeyCode.UNKNOWN = 0;
ceramic_KeyCode.ENTER = 13;
ceramic_KeyCode.ESCAPE = 27;
ceramic_KeyCode.BACKSPACE = 8;
ceramic_KeyCode.TAB = 9;
ceramic_KeyCode.SPACE = 32;
ceramic_KeyCode.EXCLAIM = 33;
ceramic_KeyCode.QUOTEDBL = 34;
ceramic_KeyCode.HASH = 35;
ceramic_KeyCode.PERCENT = 37;
ceramic_KeyCode.DOLLAR = 36;
ceramic_KeyCode.AMPERSAND = 38;
ceramic_KeyCode.QUOTE = 39;
ceramic_KeyCode.LEFTPAREN = 40;
ceramic_KeyCode.RIGHTPAREN = 41;
ceramic_KeyCode.ASTERISK = 42;
ceramic_KeyCode.PLUS = 43;
ceramic_KeyCode.COMMA = 44;
ceramic_KeyCode.MINUS = 45;
ceramic_KeyCode.PERIOD = 46;
ceramic_KeyCode.SLASH = 47;
ceramic_KeyCode.KEY_0 = 48;
ceramic_KeyCode.KEY_1 = 49;
ceramic_KeyCode.KEY_2 = 50;
ceramic_KeyCode.KEY_3 = 51;
ceramic_KeyCode.KEY_4 = 52;
ceramic_KeyCode.KEY_5 = 53;
ceramic_KeyCode.KEY_6 = 54;
ceramic_KeyCode.KEY_7 = 55;
ceramic_KeyCode.KEY_8 = 56;
ceramic_KeyCode.KEY_9 = 57;
ceramic_KeyCode.COLON = 58;
ceramic_KeyCode.SEMICOLON = 59;
ceramic_KeyCode.LESS = 60;
ceramic_KeyCode.EQUALS = 61;
ceramic_KeyCode.GREATER = 62;
ceramic_KeyCode.QUESTION = 63;
ceramic_KeyCode.AT = 64;
ceramic_KeyCode.LEFTBRACKET = 91;
ceramic_KeyCode.BACKSLASH = 92;
ceramic_KeyCode.RIGHTBRACKET = 93;
ceramic_KeyCode.CARET = 94;
ceramic_KeyCode.UNDERSCORE = 95;
ceramic_KeyCode.BACKQUOTE = 96;
ceramic_KeyCode.KEY_A = 97;
ceramic_KeyCode.KEY_B = 98;
ceramic_KeyCode.KEY_C = 99;
ceramic_KeyCode.KEY_D = 100;
ceramic_KeyCode.KEY_E = 101;
ceramic_KeyCode.KEY_F = 102;
ceramic_KeyCode.KEY_G = 103;
ceramic_KeyCode.KEY_H = 104;
ceramic_KeyCode.KEY_I = 105;
ceramic_KeyCode.KEY_J = 106;
ceramic_KeyCode.KEY_K = 107;
ceramic_KeyCode.KEY_L = 108;
ceramic_KeyCode.KEY_M = 109;
ceramic_KeyCode.KEY_N = 110;
ceramic_KeyCode.KEY_O = 111;
ceramic_KeyCode.KEY_P = 112;
ceramic_KeyCode.KEY_Q = 113;
ceramic_KeyCode.KEY_R = 114;
ceramic_KeyCode.KEY_S = 115;
ceramic_KeyCode.KEY_T = 116;
ceramic_KeyCode.KEY_U = 117;
ceramic_KeyCode.KEY_V = 118;
ceramic_KeyCode.KEY_W = 119;
ceramic_KeyCode.KEY_X = 120;
ceramic_KeyCode.KEY_Y = 121;
ceramic_KeyCode.KEY_Z = 122;
ceramic_KeyCode.CAPSLOCK = 1073741881;
ceramic_KeyCode.F1 = 1073741882;
ceramic_KeyCode.F2 = 1073741883;
ceramic_KeyCode.F3 = 1073741884;
ceramic_KeyCode.F4 = 1073741885;
ceramic_KeyCode.F5 = 1073741886;
ceramic_KeyCode.F6 = 1073741887;
ceramic_KeyCode.F7 = 1073741888;
ceramic_KeyCode.F8 = 1073741889;
ceramic_KeyCode.F9 = 1073741890;
ceramic_KeyCode.F10 = 1073741891;
ceramic_KeyCode.F11 = 1073741892;
ceramic_KeyCode.F12 = 1073741893;
ceramic_KeyCode.PRINTSCREEN = 1073741894;
ceramic_KeyCode.SCROLLLOCK = 1073741895;
ceramic_KeyCode.PAUSE = 1073741896;
ceramic_KeyCode.INSERT = 1073741897;
ceramic_KeyCode.HOME = 1073741898;
ceramic_KeyCode.PAGEUP = 1073741899;
ceramic_KeyCode.DELETE = 127;
ceramic_KeyCode.END = 1073741901;
ceramic_KeyCode.PAGEDOWN = 1073741902;
ceramic_KeyCode.RIGHT = 1073741903;
ceramic_KeyCode.LEFT = 1073741904;
ceramic_KeyCode.DOWN = 1073741905;
ceramic_KeyCode.UP = 1073741906;
ceramic_KeyCode.NUMLOCKCLEAR = 1073741907;
ceramic_KeyCode.KP_DIVIDE = 1073741908;
ceramic_KeyCode.KP_MULTIPLY = 1073741909;
ceramic_KeyCode.KP_MINUS = 1073741910;
ceramic_KeyCode.KP_PLUS = 1073741911;
ceramic_KeyCode.KP_ENTER = 1073741912;
ceramic_KeyCode.KP_1 = 1073741913;
ceramic_KeyCode.KP_2 = 1073741914;
ceramic_KeyCode.KP_3 = 1073741915;
ceramic_KeyCode.KP_4 = 1073741916;
ceramic_KeyCode.KP_5 = 1073741917;
ceramic_KeyCode.KP_6 = 1073741918;
ceramic_KeyCode.KP_7 = 1073741919;
ceramic_KeyCode.KP_8 = 1073741920;
ceramic_KeyCode.KP_9 = 1073741921;
ceramic_KeyCode.KP_0 = 1073741922;
ceramic_KeyCode.KP_PERIOD = 1073741923;
ceramic_KeyCode.APPLICATION = 1073741925;
ceramic_KeyCode.POWER = 1073741926;
ceramic_KeyCode.KP_EQUALS = 1073741927;
ceramic_KeyCode.F13 = 1073741928;
ceramic_KeyCode.F14 = 1073741929;
ceramic_KeyCode.F15 = 1073741930;
ceramic_KeyCode.F16 = 1073741931;
ceramic_KeyCode.F17 = 1073741932;
ceramic_KeyCode.F18 = 1073741933;
ceramic_KeyCode.F19 = 1073741934;
ceramic_KeyCode.F20 = 1073741935;
ceramic_KeyCode.F21 = 1073741936;
ceramic_KeyCode.F22 = 1073741937;
ceramic_KeyCode.F23 = 1073741938;
ceramic_KeyCode.F24 = 1073741939;
ceramic_KeyCode.EXECUTE = 1073741940;
ceramic_KeyCode.HELP = 1073741941;
ceramic_KeyCode.MENU = 1073741942;
ceramic_KeyCode.SELECT = 1073741943;
ceramic_KeyCode.STOP = 1073741944;
ceramic_KeyCode.AGAIN = 1073741945;
ceramic_KeyCode.UNDO = 1073741946;
ceramic_KeyCode.CUT = 1073741947;
ceramic_KeyCode.COPY = 1073741948;
ceramic_KeyCode.PASTE = 1073741949;
ceramic_KeyCode.FIND = 1073741950;
ceramic_KeyCode.MUTE = 1073741951;
ceramic_KeyCode.VOLUMEUP = 1073741952;
ceramic_KeyCode.VOLUMEDOWN = 1073741953;
ceramic_KeyCode.KP_COMMA = 1073741957;
ceramic_KeyCode.KP_EQUALSAS400 = 1073741958;
ceramic_KeyCode.ALTERASE = 1073741977;
ceramic_KeyCode.SYSREQ = 1073741978;
ceramic_KeyCode.CANCEL = 1073741979;
ceramic_KeyCode.CLEAR = 1073741980;
ceramic_KeyCode.PRIOR = 1073741981;
ceramic_KeyCode.RETURN2 = 1073741982;
ceramic_KeyCode.SEPARATOR = 1073741983;
ceramic_KeyCode.OUT = 1073741984;
ceramic_KeyCode.OPER = 1073741985;
ceramic_KeyCode.CLEARAGAIN = 1073741986;
ceramic_KeyCode.CRSEL = 1073741987;
ceramic_KeyCode.EXSEL = 1073741988;
ceramic_KeyCode.KP_00 = 1073742000;
ceramic_KeyCode.KP_000 = 1073742001;
ceramic_KeyCode.THOUSANDSSEPARATOR = 1073742002;
ceramic_KeyCode.DECIMALSEPARATOR = 1073742003;
ceramic_KeyCode.CURRENCYUNIT = 1073742004;
ceramic_KeyCode.CURRENCYSUBUNIT = 1073742005;
ceramic_KeyCode.KP_LEFTPAREN = 1073742006;
ceramic_KeyCode.KP_RIGHTPAREN = 1073742007;
ceramic_KeyCode.KP_LEFTBRACE = 1073742008;
ceramic_KeyCode.KP_RIGHTBRACE = 1073742009;
ceramic_KeyCode.KP_TAB = 1073742010;
ceramic_KeyCode.KP_BACKSPACE = 1073742011;
ceramic_KeyCode.KP_A = 1073742012;
ceramic_KeyCode.KP_B = 1073742013;
ceramic_KeyCode.KP_C = 1073742014;
ceramic_KeyCode.KP_D = 1073742015;
ceramic_KeyCode.KP_E = 1073742016;
ceramic_KeyCode.KP_F = 1073742017;
ceramic_KeyCode.KP_XOR = 1073742018;
ceramic_KeyCode.KP_POWER = 1073742019;
ceramic_KeyCode.KP_PERCENT = 1073742020;
ceramic_KeyCode.KP_LESS = 1073742021;
ceramic_KeyCode.KP_GREATER = 1073742022;
ceramic_KeyCode.KP_AMPERSAND = 1073742023;
ceramic_KeyCode.KP_DBLAMPERSAND = 1073742024;
ceramic_KeyCode.KP_VERTICALBAR = 1073742025;
ceramic_KeyCode.KP_DBLVERTICALBAR = 1073742026;
ceramic_KeyCode.KP_COLON = 1073742027;
ceramic_KeyCode.KP_HASH = 1073742028;
ceramic_KeyCode.KP_SPACE = 1073742029;
ceramic_KeyCode.KP_AT = 1073742030;
ceramic_KeyCode.KP_EXCLAM = 1073742031;
ceramic_KeyCode.KP_MEMSTORE = 1073742032;
ceramic_KeyCode.KP_MEMRECALL = 1073742033;
ceramic_KeyCode.KP_MEMCLEAR = 1073742034;
ceramic_KeyCode.KP_MEMADD = 1073742035;
ceramic_KeyCode.KP_MEMSUBTRACT = 1073742036;
ceramic_KeyCode.KP_MEMMULTIPLY = 1073742037;
ceramic_KeyCode.KP_MEMDIVIDE = 1073742038;
ceramic_KeyCode.KP_PLUSMINUS = 1073742039;
ceramic_KeyCode.KP_CLEAR = 1073742040;
ceramic_KeyCode.KP_CLEARENTRY = 1073742041;
ceramic_KeyCode.KP_BINARY = 1073742042;
ceramic_KeyCode.KP_OCTAL = 1073742043;
ceramic_KeyCode.KP_DECIMAL = 1073742044;
ceramic_KeyCode.KP_HEXADECIMAL = 1073742045;
ceramic_KeyCode.LCTRL = 1073742048;
ceramic_KeyCode.LSHIFT = 1073742049;
ceramic_KeyCode.LALT = 1073742050;
ceramic_KeyCode.LMETA = 1073742051;
ceramic_KeyCode.RCTRL = 1073742052;
ceramic_KeyCode.RSHIFT = 1073742053;
ceramic_KeyCode.RALT = 1073742054;
ceramic_KeyCode.RMETA = 1073742055;
ceramic_KeyCode.MODE = 1073742081;
ceramic_KeyCode.AUDIONEXT = 1073742082;
ceramic_KeyCode.AUDIOPREV = 1073742083;
ceramic_KeyCode.AUDIOSTOP = 1073742084;
ceramic_KeyCode.AUDIOPLAY = 1073742085;
ceramic_KeyCode.AUDIOMUTE = 1073742086;
ceramic_KeyCode.MEDIASELECT = 1073742087;
ceramic_KeyCode.WWW = 1073742088;
ceramic_KeyCode.MAIL = 1073742089;
ceramic_KeyCode.CALCULATOR = 1073742090;
ceramic_KeyCode.COMPUTER = 1073742091;
ceramic_KeyCode.AC_SEARCH = 1073742092;
ceramic_KeyCode.AC_HOME = 1073742093;
ceramic_KeyCode.AC_BACK = 1073742094;
ceramic_KeyCode.AC_FORWARD = 1073742095;
ceramic_KeyCode.AC_STOP = 1073742096;
ceramic_KeyCode.AC_REFRESH = 1073742097;
ceramic_KeyCode.AC_BOOKMARKS = 1073742098;
ceramic_KeyCode.BRIGHTNESSDOWN = 1073742099;
ceramic_KeyCode.BRIGHTNESSUP = 1073742100;
ceramic_KeyCode.DISPLAYSWITCH = 1073742101;
ceramic_KeyCode.KBDILLUMTOGGLE = 1073742102;
ceramic_KeyCode.KBDILLUMDOWN = 1073742103;
ceramic_KeyCode.KBDILLUMUP = 1073742104;
ceramic_KeyCode.EJECT = 1073742105;
ceramic_KeyCode.SLEEP = 1073742106;
ceramic_Logger._hasElectronRunner = false;
ceramic_Logger.didInitOnce = false;
ceramic_Mesh.__meta__ = { obj : { editable : [{ highlight : { points : "vertices"}, helpers : [{ name : "Grid", method : "grid", params : [{ name : "Columns", type : "Int", value : 1, slider : [1,64]},{ name : "Rows", type : "Int", value : 1, slider : [1,64]}]},{ name : "Grid From Texture", method : "gridFromTexture", params : [{ name : "Columns", type : "Int", value : 1, slider : [1,64]},{ name : "Rows", type : "Int", value : 1, slider : [1,64]}]}]}]}, fields : { complexHit : { editable : null}, color : { editable : null}, vertices : { editable : null}, indices : { editable : null}, texture : { editable : null}, uvs : { editable : null}}};
ceramic_Mesh._matrix = ceramic_Visual._matrix;
ceramic_Mesh._fieldInfo = { vertices : { editable : [], type : "Array<Float>", index : 9}, complexHit : { editable : [], type : "Bool", index : 3}, uvs : { editable : [], type : "Array<Float>", index : 14}, color : { editable : [], type : "ceramic.Color", index : 6}, indices : { editable : [], type : "Array<Int>", index : 10}, texture : { editable : [], type : "ceramic.Texture", index : 12}};
ceramic_Texture._nextIndex = 1;
ceramic_ScanCode.MASK = 1073741824;
ceramic_ScanCode.UNKNOWN = 0;
ceramic_ScanCode.KEY_A = 4;
ceramic_ScanCode.KEY_B = 5;
ceramic_ScanCode.KEY_C = 6;
ceramic_ScanCode.KEY_D = 7;
ceramic_ScanCode.KEY_E = 8;
ceramic_ScanCode.KEY_F = 9;
ceramic_ScanCode.KEY_G = 10;
ceramic_ScanCode.KEY_H = 11;
ceramic_ScanCode.KEY_I = 12;
ceramic_ScanCode.KEY_J = 13;
ceramic_ScanCode.KEY_K = 14;
ceramic_ScanCode.KEY_L = 15;
ceramic_ScanCode.KEY_M = 16;
ceramic_ScanCode.KEY_N = 17;
ceramic_ScanCode.KEY_O = 18;
ceramic_ScanCode.KEY_P = 19;
ceramic_ScanCode.KEY_Q = 20;
ceramic_ScanCode.KEY_R = 21;
ceramic_ScanCode.KEY_S = 22;
ceramic_ScanCode.KEY_T = 23;
ceramic_ScanCode.KEY_U = 24;
ceramic_ScanCode.KEY_V = 25;
ceramic_ScanCode.KEY_W = 26;
ceramic_ScanCode.KEY_X = 27;
ceramic_ScanCode.KEY_Y = 28;
ceramic_ScanCode.KEY_Z = 29;
ceramic_ScanCode.KEY_1 = 30;
ceramic_ScanCode.KEY_2 = 31;
ceramic_ScanCode.KEY_3 = 32;
ceramic_ScanCode.KEY_4 = 33;
ceramic_ScanCode.KEY_5 = 34;
ceramic_ScanCode.KEY_6 = 35;
ceramic_ScanCode.KEY_7 = 36;
ceramic_ScanCode.KEY_8 = 37;
ceramic_ScanCode.KEY_9 = 38;
ceramic_ScanCode.KEY_0 = 39;
ceramic_ScanCode.ENTER = 40;
ceramic_ScanCode.ESCAPE = 41;
ceramic_ScanCode.BACKSPACE = 42;
ceramic_ScanCode.TAB = 43;
ceramic_ScanCode.SPACE = 44;
ceramic_ScanCode.MINUS = 45;
ceramic_ScanCode.EQUALS = 46;
ceramic_ScanCode.LEFTBRACKET = 47;
ceramic_ScanCode.RIGHTBRACKET = 48;
ceramic_ScanCode.BACKSLASH = 49;
ceramic_ScanCode.NONUSHASH = 50;
ceramic_ScanCode.SEMICOLON = 51;
ceramic_ScanCode.APOSTROPHE = 52;
ceramic_ScanCode.GRAVE = 53;
ceramic_ScanCode.COMMA = 54;
ceramic_ScanCode.PERIOD = 55;
ceramic_ScanCode.SLASH = 56;
ceramic_ScanCode.CAPSLOCK = 57;
ceramic_ScanCode.F1 = 58;
ceramic_ScanCode.F2 = 59;
ceramic_ScanCode.F3 = 60;
ceramic_ScanCode.F4 = 61;
ceramic_ScanCode.F5 = 62;
ceramic_ScanCode.F6 = 63;
ceramic_ScanCode.F7 = 64;
ceramic_ScanCode.F8 = 65;
ceramic_ScanCode.F9 = 66;
ceramic_ScanCode.F10 = 67;
ceramic_ScanCode.F11 = 68;
ceramic_ScanCode.F12 = 69;
ceramic_ScanCode.PRINTSCREEN = 70;
ceramic_ScanCode.SCROLLLOCK = 71;
ceramic_ScanCode.PAUSE = 72;
ceramic_ScanCode.INSERT = 73;
ceramic_ScanCode.HOME = 74;
ceramic_ScanCode.PAGEUP = 75;
ceramic_ScanCode.DELETE = 76;
ceramic_ScanCode.END = 77;
ceramic_ScanCode.PAGEDOWN = 78;
ceramic_ScanCode.RIGHT = 79;
ceramic_ScanCode.LEFT = 80;
ceramic_ScanCode.DOWN = 81;
ceramic_ScanCode.UP = 82;
ceramic_ScanCode.NUMLOCKCLEAR = 83;
ceramic_ScanCode.KP_DIVIDE = 84;
ceramic_ScanCode.KP_MULTIPLY = 85;
ceramic_ScanCode.KP_MINUS = 86;
ceramic_ScanCode.KP_PLUS = 87;
ceramic_ScanCode.KP_ENTER = 88;
ceramic_ScanCode.KP_1 = 89;
ceramic_ScanCode.KP_2 = 90;
ceramic_ScanCode.KP_3 = 91;
ceramic_ScanCode.KP_4 = 92;
ceramic_ScanCode.KP_5 = 93;
ceramic_ScanCode.KP_6 = 94;
ceramic_ScanCode.KP_7 = 95;
ceramic_ScanCode.KP_8 = 96;
ceramic_ScanCode.KP_9 = 97;
ceramic_ScanCode.KP_0 = 98;
ceramic_ScanCode.KP_PERIOD = 99;
ceramic_ScanCode.NONUSBACKSLASH = 100;
ceramic_ScanCode.APPLICATION = 101;
ceramic_ScanCode.POWER = 102;
ceramic_ScanCode.KP_EQUALS = 103;
ceramic_ScanCode.F13 = 104;
ceramic_ScanCode.F14 = 105;
ceramic_ScanCode.F15 = 106;
ceramic_ScanCode.F16 = 107;
ceramic_ScanCode.F17 = 108;
ceramic_ScanCode.F18 = 109;
ceramic_ScanCode.F19 = 110;
ceramic_ScanCode.F20 = 111;
ceramic_ScanCode.F21 = 112;
ceramic_ScanCode.F22 = 113;
ceramic_ScanCode.F23 = 114;
ceramic_ScanCode.F24 = 115;
ceramic_ScanCode.EXECUTE = 116;
ceramic_ScanCode.HELP = 117;
ceramic_ScanCode.MENU = 118;
ceramic_ScanCode.SELECT = 119;
ceramic_ScanCode.STOP = 120;
ceramic_ScanCode.AGAIN = 121;
ceramic_ScanCode.UNDO = 122;
ceramic_ScanCode.CUT = 123;
ceramic_ScanCode.COPY = 124;
ceramic_ScanCode.PASTE = 125;
ceramic_ScanCode.FIND = 126;
ceramic_ScanCode.MUTE = 127;
ceramic_ScanCode.VOLUMEUP = 128;
ceramic_ScanCode.VOLUMEDOWN = 129;
ceramic_ScanCode.KP_COMMA = 133;
ceramic_ScanCode.KP_EQUALSAS400 = 134;
ceramic_ScanCode.INTERNATIONAL1 = 135;
ceramic_ScanCode.INTERNATIONAL2 = 136;
ceramic_ScanCode.INTERNATIONAL3 = 137;
ceramic_ScanCode.INTERNATIONAL4 = 138;
ceramic_ScanCode.INTERNATIONAL5 = 139;
ceramic_ScanCode.INTERNATIONAL6 = 140;
ceramic_ScanCode.INTERNATIONAL7 = 141;
ceramic_ScanCode.INTERNATIONAL8 = 142;
ceramic_ScanCode.INTERNATIONAL9 = 143;
ceramic_ScanCode.LANG1 = 144;
ceramic_ScanCode.LANG2 = 145;
ceramic_ScanCode.LANG3 = 146;
ceramic_ScanCode.LANG4 = 147;
ceramic_ScanCode.LANG5 = 148;
ceramic_ScanCode.LANG6 = 149;
ceramic_ScanCode.LANG7 = 150;
ceramic_ScanCode.LANG8 = 151;
ceramic_ScanCode.LANG9 = 152;
ceramic_ScanCode.ALTERASE = 153;
ceramic_ScanCode.SYSREQ = 154;
ceramic_ScanCode.CANCEL = 155;
ceramic_ScanCode.CLEAR = 156;
ceramic_ScanCode.PRIOR = 157;
ceramic_ScanCode.RETURN2 = 158;
ceramic_ScanCode.SEPARATOR = 159;
ceramic_ScanCode.OUT = 160;
ceramic_ScanCode.OPER = 161;
ceramic_ScanCode.CLEARAGAIN = 162;
ceramic_ScanCode.CRSEL = 163;
ceramic_ScanCode.EXSEL = 164;
ceramic_ScanCode.KP_00 = 176;
ceramic_ScanCode.KP_000 = 177;
ceramic_ScanCode.THOUSANDSSEPARATOR = 178;
ceramic_ScanCode.DECIMALSEPARATOR = 179;
ceramic_ScanCode.CURRENCYUNIT = 180;
ceramic_ScanCode.CURRENCYSUBUNIT = 181;
ceramic_ScanCode.KP_LEFTPAREN = 182;
ceramic_ScanCode.KP_RIGHTPAREN = 183;
ceramic_ScanCode.KP_LEFTBRACE = 184;
ceramic_ScanCode.KP_RIGHTBRACE = 185;
ceramic_ScanCode.KP_TAB = 186;
ceramic_ScanCode.KP_BACKSPACE = 187;
ceramic_ScanCode.KP_A = 188;
ceramic_ScanCode.KP_B = 189;
ceramic_ScanCode.KP_C = 190;
ceramic_ScanCode.KP_D = 191;
ceramic_ScanCode.KP_E = 192;
ceramic_ScanCode.KP_F = 193;
ceramic_ScanCode.KP_XOR = 194;
ceramic_ScanCode.KP_POWER = 195;
ceramic_ScanCode.KP_PERCENT = 196;
ceramic_ScanCode.KP_LESS = 197;
ceramic_ScanCode.KP_GREATER = 198;
ceramic_ScanCode.KP_AMPERSAND = 199;
ceramic_ScanCode.KP_DBLAMPERSAND = 200;
ceramic_ScanCode.KP_VERTICALBAR = 201;
ceramic_ScanCode.KP_DBLVERTICALBAR = 202;
ceramic_ScanCode.KP_COLON = 203;
ceramic_ScanCode.KP_HASH = 204;
ceramic_ScanCode.KP_SPACE = 205;
ceramic_ScanCode.KP_AT = 206;
ceramic_ScanCode.KP_EXCLAM = 207;
ceramic_ScanCode.KP_MEMSTORE = 208;
ceramic_ScanCode.KP_MEMRECALL = 209;
ceramic_ScanCode.KP_MEMCLEAR = 210;
ceramic_ScanCode.KP_MEMADD = 211;
ceramic_ScanCode.KP_MEMSUBTRACT = 212;
ceramic_ScanCode.KP_MEMMULTIPLY = 213;
ceramic_ScanCode.KP_MEMDIVIDE = 214;
ceramic_ScanCode.KP_PLUSMINUS = 215;
ceramic_ScanCode.KP_CLEAR = 216;
ceramic_ScanCode.KP_CLEARENTRY = 217;
ceramic_ScanCode.KP_BINARY = 218;
ceramic_ScanCode.KP_OCTAL = 219;
ceramic_ScanCode.KP_DECIMAL = 220;
ceramic_ScanCode.KP_HEXADECIMAL = 221;
ceramic_ScanCode.LCTRL = 224;
ceramic_ScanCode.LSHIFT = 225;
ceramic_ScanCode.LALT = 226;
ceramic_ScanCode.LMETA = 227;
ceramic_ScanCode.RCTRL = 228;
ceramic_ScanCode.RSHIFT = 229;
ceramic_ScanCode.RALT = 230;
ceramic_ScanCode.RMETA = 231;
ceramic_ScanCode.MODE = 257;
ceramic_ScanCode.AUDIONEXT = 258;
ceramic_ScanCode.AUDIOPREV = 259;
ceramic_ScanCode.AUDIOSTOP = 260;
ceramic_ScanCode.AUDIOPLAY = 261;
ceramic_ScanCode.AUDIOMUTE = 262;
ceramic_ScanCode.MEDIASELECT = 263;
ceramic_ScanCode.WWW = 264;
ceramic_ScanCode.MAIL = 265;
ceramic_ScanCode.CALCULATOR = 266;
ceramic_ScanCode.COMPUTER = 267;
ceramic_ScanCode.AC_SEARCH = 268;
ceramic_ScanCode.AC_HOME = 269;
ceramic_ScanCode.AC_BACK = 270;
ceramic_ScanCode.AC_FORWARD = 271;
ceramic_ScanCode.AC_STOP = 272;
ceramic_ScanCode.AC_REFRESH = 273;
ceramic_ScanCode.AC_BOOKMARKS = 274;
ceramic_ScanCode.BRIGHTNESSDOWN = 275;
ceramic_ScanCode.BRIGHTNESSUP = 276;
ceramic_ScanCode.DISPLAYSWITCH = 277;
ceramic_ScanCode.KBDILLUMTOGGLE = 278;
ceramic_ScanCode.KBDILLUMDOWN = 279;
ceramic_ScanCode.KBDILLUMUP = 280;
ceramic_ScanCode.EJECT = 281;
ceramic_ScanCode.SLEEP = 282;
ceramic_ScanCode.APP1 = 283;
ceramic_ScanCode.APP2 = 284;
ceramic_ScanCode.scanCodeNames = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
ceramic_SceneSystem.lazyShared = true;
ceramic_Screen.__meta__ = { fields : { unobservedTexturesDensity : { observe : null}}};
ceramic_Settings.__meta__ = { fields : { unobservedTargetWidth : { observe : null}, unobservedTargetHeight : { observe : null}, unobservedWindowWidth : { observe : null}, unobservedWindowHeight : { observe : null}, unobservedTargetDensity : { observe : null}, unobservedBackground : { observe : null}, unobservedScaling : { observe : null}, unobservedTitle : { observe : null}, unobservedFullscreen : { observe : null}, unobservedMaxDelta : { observe : null}}};
ceramic_SoundAsset.__meta__ = { fields : { unobservedSound : { observe : null}}};
ceramic_Text.__meta__ = { obj : { editable : [{ implicitSize : true}]}, fields : { color : { editable : null}, content : { editable : [{ multiline : true}]}, pointSize : { editable : [{ slider : [6,600]}]}, lineHeight : { editable : [{ slider : [0,10]}]}, letterSpacing : { editable : [{ slider : [-100,100]}]}, font : { editable : null}, align : { editable : null}, fitWidth : { editable : null}, maxLineDiff : { editable : null}}};
ceramic_Text._fieldInfo = { fitWidth : { editable : [], type : "Float", index : 38}, letterSpacing : { editable : [{ slider : [-100,100]}], type : "Float", index : 20}, color : { editable : [], type : "ceramic.Color", index : 12}, content : { editable : [{ multiline : true}], type : "String", index : 14}, align : { editable : [], type : "ceramic.TextAlign", index : 36}, font : { editable : [], type : "ceramic.BitmapFont", index : 22}, maxLineDiff : { editable : [], type : "Float", index : 40}, pointSize : { editable : [{ slider : [6,600]}], type : "Float", index : 16}, lineHeight : { editable : [{ slider : [0,10]}], type : "Float", index : 18}};
ceramic_TextAsset.__meta__ = { fields : { unobservedText : { observe : null}}};
ceramic_Timer.callbacks = [];
ceramic_Timer.next = 999999999;
ceramic_Timer.now = 0;
ceramic_Timer.startTimestamp = new Date().getTime() / 1000.0;
ceramic_Tween._tweens = [];
ceramic_Tween._iteratedTweens = [];
ceramic__$Tween_TweenEasingFunction.k = 0;
ceramic_Utils.RE_ASCII_CHAR = new EReg("^[a-zA-Z0-9]$","");
ceramic_Utils._nextUniqueIntCursor = 0;
ceramic_Utils._nextUniqueInt0 = Math.random() * 2147483646 | 0;
ceramic_Utils._nextUniqueInt1 = new Date().getTime() * 0.0001 | 0;
ceramic_Utils._nextUniqueInt2 = Math.random() * 2147483646 | 0;
ceramic_Utils._nextUniqueInt3 = Math.random() * 2147483646 | 0;
ceramic_WatchDirectory.didTryRequireChokidar = false;
clay_Immediate.immediateCallbacks = [];
clay_Immediate.immediateCallbacksCapacity = 0;
clay_Immediate.immediateCallbacksLen = 0;
clay_KeyCode.UNKNOWN = 0;
clay_KeyCode.ENTER = 13;
clay_KeyCode.ESCAPE = 27;
clay_KeyCode.BACKSPACE = 8;
clay_KeyCode.TAB = 9;
clay_KeyCode.SPACE = 32;
clay_KeyCode.EXCLAIM = 33;
clay_KeyCode.QUOTEDBL = 34;
clay_KeyCode.HASH = 35;
clay_KeyCode.PERCENT = 37;
clay_KeyCode.DOLLAR = 36;
clay_KeyCode.AMPERSAND = 38;
clay_KeyCode.QUOTE = 39;
clay_KeyCode.LEFTPAREN = 40;
clay_KeyCode.RIGHTPAREN = 41;
clay_KeyCode.ASTERISK = 42;
clay_KeyCode.PLUS = 43;
clay_KeyCode.COMMA = 44;
clay_KeyCode.MINUS = 45;
clay_KeyCode.PERIOD = 46;
clay_KeyCode.SLASH = 47;
clay_KeyCode.KEY_0 = 48;
clay_KeyCode.KEY_1 = 49;
clay_KeyCode.KEY_2 = 50;
clay_KeyCode.KEY_3 = 51;
clay_KeyCode.KEY_4 = 52;
clay_KeyCode.KEY_5 = 53;
clay_KeyCode.KEY_6 = 54;
clay_KeyCode.KEY_7 = 55;
clay_KeyCode.KEY_8 = 56;
clay_KeyCode.KEY_9 = 57;
clay_KeyCode.COLON = 58;
clay_KeyCode.SEMICOLON = 59;
clay_KeyCode.LESS = 60;
clay_KeyCode.EQUALS = 61;
clay_KeyCode.GREATER = 62;
clay_KeyCode.QUESTION = 63;
clay_KeyCode.AT = 64;
clay_KeyCode.LEFTBRACKET = 91;
clay_KeyCode.BACKSLASH = 92;
clay_KeyCode.RIGHTBRACKET = 93;
clay_KeyCode.CARET = 94;
clay_KeyCode.UNDERSCORE = 95;
clay_KeyCode.BACKQUOTE = 96;
clay_KeyCode.KEY_A = 97;
clay_KeyCode.KEY_B = 98;
clay_KeyCode.KEY_C = 99;
clay_KeyCode.KEY_D = 100;
clay_KeyCode.KEY_E = 101;
clay_KeyCode.KEY_F = 102;
clay_KeyCode.KEY_G = 103;
clay_KeyCode.KEY_H = 104;
clay_KeyCode.KEY_I = 105;
clay_KeyCode.KEY_J = 106;
clay_KeyCode.KEY_K = 107;
clay_KeyCode.KEY_L = 108;
clay_KeyCode.KEY_M = 109;
clay_KeyCode.KEY_N = 110;
clay_KeyCode.KEY_O = 111;
clay_KeyCode.KEY_P = 112;
clay_KeyCode.KEY_Q = 113;
clay_KeyCode.KEY_R = 114;
clay_KeyCode.KEY_S = 115;
clay_KeyCode.KEY_T = 116;
clay_KeyCode.KEY_U = 117;
clay_KeyCode.KEY_V = 118;
clay_KeyCode.KEY_W = 119;
clay_KeyCode.KEY_X = 120;
clay_KeyCode.KEY_Y = 121;
clay_KeyCode.KEY_Z = 122;
clay_KeyCode.CAPSLOCK = 1073741881;
clay_KeyCode.F1 = 1073741882;
clay_KeyCode.F2 = 1073741883;
clay_KeyCode.F3 = 1073741884;
clay_KeyCode.F4 = 1073741885;
clay_KeyCode.F5 = 1073741886;
clay_KeyCode.F6 = 1073741887;
clay_KeyCode.F7 = 1073741888;
clay_KeyCode.F8 = 1073741889;
clay_KeyCode.F9 = 1073741890;
clay_KeyCode.F10 = 1073741891;
clay_KeyCode.F11 = 1073741892;
clay_KeyCode.F12 = 1073741893;
clay_KeyCode.PRINTSCREEN = 1073741894;
clay_KeyCode.SCROLLLOCK = 1073741895;
clay_KeyCode.PAUSE = 1073741896;
clay_KeyCode.INSERT = 1073741897;
clay_KeyCode.HOME = 1073741898;
clay_KeyCode.PAGEUP = 1073741899;
clay_KeyCode.DELETE = 127;
clay_KeyCode.END = 1073741901;
clay_KeyCode.PAGEDOWN = 1073741902;
clay_KeyCode.RIGHT = 1073741903;
clay_KeyCode.LEFT = 1073741904;
clay_KeyCode.DOWN = 1073741905;
clay_KeyCode.UP = 1073741906;
clay_KeyCode.NUMLOCKCLEAR = 1073741907;
clay_KeyCode.KP_DIVIDE = 1073741908;
clay_KeyCode.KP_MULTIPLY = 1073741909;
clay_KeyCode.KP_MINUS = 1073741910;
clay_KeyCode.KP_PLUS = 1073741911;
clay_KeyCode.KP_ENTER = 1073741912;
clay_KeyCode.KP_1 = 1073741913;
clay_KeyCode.KP_2 = 1073741914;
clay_KeyCode.KP_3 = 1073741915;
clay_KeyCode.KP_4 = 1073741916;
clay_KeyCode.KP_5 = 1073741917;
clay_KeyCode.KP_6 = 1073741918;
clay_KeyCode.KP_7 = 1073741919;
clay_KeyCode.KP_8 = 1073741920;
clay_KeyCode.KP_9 = 1073741921;
clay_KeyCode.KP_0 = 1073741922;
clay_KeyCode.KP_PERIOD = 1073741923;
clay_KeyCode.APPLICATION = 1073741925;
clay_KeyCode.POWER = 1073741926;
clay_KeyCode.KP_EQUALS = 1073741927;
clay_KeyCode.F13 = 1073741928;
clay_KeyCode.F14 = 1073741929;
clay_KeyCode.F15 = 1073741930;
clay_KeyCode.F16 = 1073741931;
clay_KeyCode.F17 = 1073741932;
clay_KeyCode.F18 = 1073741933;
clay_KeyCode.F19 = 1073741934;
clay_KeyCode.F20 = 1073741935;
clay_KeyCode.F21 = 1073741936;
clay_KeyCode.F22 = 1073741937;
clay_KeyCode.F23 = 1073741938;
clay_KeyCode.F24 = 1073741939;
clay_KeyCode.EXECUTE = 1073741940;
clay_KeyCode.HELP = 1073741941;
clay_KeyCode.MENU = 1073741942;
clay_KeyCode.SELECT = 1073741943;
clay_KeyCode.STOP = 1073741944;
clay_KeyCode.AGAIN = 1073741945;
clay_KeyCode.UNDO = 1073741946;
clay_KeyCode.CUT = 1073741947;
clay_KeyCode.COPY = 1073741948;
clay_KeyCode.PASTE = 1073741949;
clay_KeyCode.FIND = 1073741950;
clay_KeyCode.MUTE = 1073741951;
clay_KeyCode.VOLUMEUP = 1073741952;
clay_KeyCode.VOLUMEDOWN = 1073741953;
clay_KeyCode.KP_COMMA = 1073741957;
clay_KeyCode.KP_EQUALSAS400 = 1073741958;
clay_KeyCode.ALTERASE = 1073741977;
clay_KeyCode.SYSREQ = 1073741978;
clay_KeyCode.CANCEL = 1073741979;
clay_KeyCode.CLEAR = 1073741980;
clay_KeyCode.PRIOR = 1073741981;
clay_KeyCode.RETURN2 = 1073741982;
clay_KeyCode.SEPARATOR = 1073741983;
clay_KeyCode.OUT = 1073741984;
clay_KeyCode.OPER = 1073741985;
clay_KeyCode.CLEARAGAIN = 1073741986;
clay_KeyCode.CRSEL = 1073741987;
clay_KeyCode.EXSEL = 1073741988;
clay_KeyCode.KP_00 = 1073742000;
clay_KeyCode.KP_000 = 1073742001;
clay_KeyCode.THOUSANDSSEPARATOR = 1073742002;
clay_KeyCode.DECIMALSEPARATOR = 1073742003;
clay_KeyCode.CURRENCYUNIT = 1073742004;
clay_KeyCode.CURRENCYSUBUNIT = 1073742005;
clay_KeyCode.KP_LEFTPAREN = 1073742006;
clay_KeyCode.KP_RIGHTPAREN = 1073742007;
clay_KeyCode.KP_LEFTBRACE = 1073742008;
clay_KeyCode.KP_RIGHTBRACE = 1073742009;
clay_KeyCode.KP_TAB = 1073742010;
clay_KeyCode.KP_BACKSPACE = 1073742011;
clay_KeyCode.KP_A = 1073742012;
clay_KeyCode.KP_B = 1073742013;
clay_KeyCode.KP_C = 1073742014;
clay_KeyCode.KP_D = 1073742015;
clay_KeyCode.KP_E = 1073742016;
clay_KeyCode.KP_F = 1073742017;
clay_KeyCode.KP_XOR = 1073742018;
clay_KeyCode.KP_POWER = 1073742019;
clay_KeyCode.KP_PERCENT = 1073742020;
clay_KeyCode.KP_LESS = 1073742021;
clay_KeyCode.KP_GREATER = 1073742022;
clay_KeyCode.KP_AMPERSAND = 1073742023;
clay_KeyCode.KP_DBLAMPERSAND = 1073742024;
clay_KeyCode.KP_VERTICALBAR = 1073742025;
clay_KeyCode.KP_DBLVERTICALBAR = 1073742026;
clay_KeyCode.KP_COLON = 1073742027;
clay_KeyCode.KP_HASH = 1073742028;
clay_KeyCode.KP_SPACE = 1073742029;
clay_KeyCode.KP_AT = 1073742030;
clay_KeyCode.KP_EXCLAM = 1073742031;
clay_KeyCode.KP_MEMSTORE = 1073742032;
clay_KeyCode.KP_MEMRECALL = 1073742033;
clay_KeyCode.KP_MEMCLEAR = 1073742034;
clay_KeyCode.KP_MEMADD = 1073742035;
clay_KeyCode.KP_MEMSUBTRACT = 1073742036;
clay_KeyCode.KP_MEMMULTIPLY = 1073742037;
clay_KeyCode.KP_MEMDIVIDE = 1073742038;
clay_KeyCode.KP_PLUSMINUS = 1073742039;
clay_KeyCode.KP_CLEAR = 1073742040;
clay_KeyCode.KP_CLEARENTRY = 1073742041;
clay_KeyCode.KP_BINARY = 1073742042;
clay_KeyCode.KP_OCTAL = 1073742043;
clay_KeyCode.KP_DECIMAL = 1073742044;
clay_KeyCode.KP_HEXADECIMAL = 1073742045;
clay_KeyCode.LCTRL = 1073742048;
clay_KeyCode.LSHIFT = 1073742049;
clay_KeyCode.LALT = 1073742050;
clay_KeyCode.LMETA = 1073742051;
clay_KeyCode.RCTRL = 1073742052;
clay_KeyCode.RSHIFT = 1073742053;
clay_KeyCode.RALT = 1073742054;
clay_KeyCode.RMETA = 1073742055;
clay_KeyCode.MODE = 1073742081;
clay_KeyCode.AUDIONEXT = 1073742082;
clay_KeyCode.AUDIOPREV = 1073742083;
clay_KeyCode.AUDIOSTOP = 1073742084;
clay_KeyCode.AUDIOPLAY = 1073742085;
clay_KeyCode.AUDIOMUTE = 1073742086;
clay_KeyCode.MEDIASELECT = 1073742087;
clay_KeyCode.WWW = 1073742088;
clay_KeyCode.MAIL = 1073742089;
clay_KeyCode.CALCULATOR = 1073742090;
clay_KeyCode.COMPUTER = 1073742091;
clay_KeyCode.AC_SEARCH = 1073742092;
clay_KeyCode.AC_HOME = 1073742093;
clay_KeyCode.AC_BACK = 1073742094;
clay_KeyCode.AC_FORWARD = 1073742095;
clay_KeyCode.AC_STOP = 1073742096;
clay_KeyCode.AC_REFRESH = 1073742097;
clay_KeyCode.AC_BOOKMARKS = 1073742098;
clay_KeyCode.BRIGHTNESSDOWN = 1073742099;
clay_KeyCode.BRIGHTNESSUP = 1073742100;
clay_KeyCode.DISPLAYSWITCH = 1073742101;
clay_KeyCode.KBDILLUMTOGGLE = 1073742102;
clay_KeyCode.KBDILLUMDOWN = 1073742103;
clay_KeyCode.KBDILLUMUP = 1073742104;
clay_KeyCode.EJECT = 1073742105;
clay_KeyCode.SLEEP = 1073742106;
clay_ScanCode.MASK = 1073741824;
clay_ScanCode.UNKNOWN = 0;
clay_ScanCode.KEY_A = 4;
clay_ScanCode.KEY_B = 5;
clay_ScanCode.KEY_C = 6;
clay_ScanCode.KEY_D = 7;
clay_ScanCode.KEY_E = 8;
clay_ScanCode.KEY_F = 9;
clay_ScanCode.KEY_G = 10;
clay_ScanCode.KEY_H = 11;
clay_ScanCode.KEY_I = 12;
clay_ScanCode.KEY_J = 13;
clay_ScanCode.KEY_K = 14;
clay_ScanCode.KEY_L = 15;
clay_ScanCode.KEY_M = 16;
clay_ScanCode.KEY_N = 17;
clay_ScanCode.KEY_O = 18;
clay_ScanCode.KEY_P = 19;
clay_ScanCode.KEY_Q = 20;
clay_ScanCode.KEY_R = 21;
clay_ScanCode.KEY_S = 22;
clay_ScanCode.KEY_T = 23;
clay_ScanCode.KEY_U = 24;
clay_ScanCode.KEY_V = 25;
clay_ScanCode.KEY_W = 26;
clay_ScanCode.KEY_X = 27;
clay_ScanCode.KEY_Y = 28;
clay_ScanCode.KEY_Z = 29;
clay_ScanCode.KEY_1 = 30;
clay_ScanCode.KEY_2 = 31;
clay_ScanCode.KEY_3 = 32;
clay_ScanCode.KEY_4 = 33;
clay_ScanCode.KEY_5 = 34;
clay_ScanCode.KEY_6 = 35;
clay_ScanCode.KEY_7 = 36;
clay_ScanCode.KEY_8 = 37;
clay_ScanCode.KEY_9 = 38;
clay_ScanCode.KEY_0 = 39;
clay_ScanCode.ENTER = 40;
clay_ScanCode.ESCAPE = 41;
clay_ScanCode.BACKSPACE = 42;
clay_ScanCode.TAB = 43;
clay_ScanCode.SPACE = 44;
clay_ScanCode.MINUS = 45;
clay_ScanCode.EQUALS = 46;
clay_ScanCode.LEFTBRACKET = 47;
clay_ScanCode.RIGHTBRACKET = 48;
clay_ScanCode.BACKSLASH = 49;
clay_ScanCode.NONUSHASH = 50;
clay_ScanCode.SEMICOLON = 51;
clay_ScanCode.APOSTROPHE = 52;
clay_ScanCode.GRAVE = 53;
clay_ScanCode.COMMA = 54;
clay_ScanCode.PERIOD = 55;
clay_ScanCode.SLASH = 56;
clay_ScanCode.CAPSLOCK = 57;
clay_ScanCode.F1 = 58;
clay_ScanCode.F2 = 59;
clay_ScanCode.F3 = 60;
clay_ScanCode.F4 = 61;
clay_ScanCode.F5 = 62;
clay_ScanCode.F6 = 63;
clay_ScanCode.F7 = 64;
clay_ScanCode.F8 = 65;
clay_ScanCode.F9 = 66;
clay_ScanCode.F10 = 67;
clay_ScanCode.F11 = 68;
clay_ScanCode.F12 = 69;
clay_ScanCode.PRINTSCREEN = 70;
clay_ScanCode.SCROLLLOCK = 71;
clay_ScanCode.PAUSE = 72;
clay_ScanCode.INSERT = 73;
clay_ScanCode.HOME = 74;
clay_ScanCode.PAGEUP = 75;
clay_ScanCode.DELETE = 76;
clay_ScanCode.END = 77;
clay_ScanCode.PAGEDOWN = 78;
clay_ScanCode.RIGHT = 79;
clay_ScanCode.LEFT = 80;
clay_ScanCode.DOWN = 81;
clay_ScanCode.UP = 82;
clay_ScanCode.NUMLOCKCLEAR = 83;
clay_ScanCode.KP_DIVIDE = 84;
clay_ScanCode.KP_MULTIPLY = 85;
clay_ScanCode.KP_MINUS = 86;
clay_ScanCode.KP_PLUS = 87;
clay_ScanCode.KP_ENTER = 88;
clay_ScanCode.KP_1 = 89;
clay_ScanCode.KP_2 = 90;
clay_ScanCode.KP_3 = 91;
clay_ScanCode.KP_4 = 92;
clay_ScanCode.KP_5 = 93;
clay_ScanCode.KP_6 = 94;
clay_ScanCode.KP_7 = 95;
clay_ScanCode.KP_8 = 96;
clay_ScanCode.KP_9 = 97;
clay_ScanCode.KP_0 = 98;
clay_ScanCode.KP_PERIOD = 99;
clay_ScanCode.NONUSBACKSLASH = 100;
clay_ScanCode.APPLICATION = 101;
clay_ScanCode.POWER = 102;
clay_ScanCode.KP_EQUALS = 103;
clay_ScanCode.F13 = 104;
clay_ScanCode.F14 = 105;
clay_ScanCode.F15 = 106;
clay_ScanCode.F16 = 107;
clay_ScanCode.F17 = 108;
clay_ScanCode.F18 = 109;
clay_ScanCode.F19 = 110;
clay_ScanCode.F20 = 111;
clay_ScanCode.F21 = 112;
clay_ScanCode.F22 = 113;
clay_ScanCode.F23 = 114;
clay_ScanCode.F24 = 115;
clay_ScanCode.EXECUTE = 116;
clay_ScanCode.HELP = 117;
clay_ScanCode.MENU = 118;
clay_ScanCode.SELECT = 119;
clay_ScanCode.STOP = 120;
clay_ScanCode.AGAIN = 121;
clay_ScanCode.UNDO = 122;
clay_ScanCode.CUT = 123;
clay_ScanCode.COPY = 124;
clay_ScanCode.PASTE = 125;
clay_ScanCode.FIND = 126;
clay_ScanCode.MUTE = 127;
clay_ScanCode.VOLUMEUP = 128;
clay_ScanCode.VOLUMEDOWN = 129;
clay_ScanCode.KP_COMMA = 133;
clay_ScanCode.KP_EQUALSAS400 = 134;
clay_ScanCode.INTERNATIONAL1 = 135;
clay_ScanCode.INTERNATIONAL2 = 136;
clay_ScanCode.INTERNATIONAL3 = 137;
clay_ScanCode.INTERNATIONAL4 = 138;
clay_ScanCode.INTERNATIONAL5 = 139;
clay_ScanCode.INTERNATIONAL6 = 140;
clay_ScanCode.INTERNATIONAL7 = 141;
clay_ScanCode.INTERNATIONAL8 = 142;
clay_ScanCode.INTERNATIONAL9 = 143;
clay_ScanCode.LANG1 = 144;
clay_ScanCode.LANG2 = 145;
clay_ScanCode.LANG3 = 146;
clay_ScanCode.LANG4 = 147;
clay_ScanCode.LANG5 = 148;
clay_ScanCode.LANG6 = 149;
clay_ScanCode.LANG7 = 150;
clay_ScanCode.LANG8 = 151;
clay_ScanCode.LANG9 = 152;
clay_ScanCode.ALTERASE = 153;
clay_ScanCode.SYSREQ = 154;
clay_ScanCode.CANCEL = 155;
clay_ScanCode.CLEAR = 156;
clay_ScanCode.PRIOR = 157;
clay_ScanCode.RETURN2 = 158;
clay_ScanCode.SEPARATOR = 159;
clay_ScanCode.OUT = 160;
clay_ScanCode.OPER = 161;
clay_ScanCode.CLEARAGAIN = 162;
clay_ScanCode.CRSEL = 163;
clay_ScanCode.EXSEL = 164;
clay_ScanCode.KP_00 = 176;
clay_ScanCode.KP_000 = 177;
clay_ScanCode.THOUSANDSSEPARATOR = 178;
clay_ScanCode.DECIMALSEPARATOR = 179;
clay_ScanCode.CURRENCYUNIT = 180;
clay_ScanCode.CURRENCYSUBUNIT = 181;
clay_ScanCode.KP_LEFTPAREN = 182;
clay_ScanCode.KP_RIGHTPAREN = 183;
clay_ScanCode.KP_LEFTBRACE = 184;
clay_ScanCode.KP_RIGHTBRACE = 185;
clay_ScanCode.KP_TAB = 186;
clay_ScanCode.KP_BACKSPACE = 187;
clay_ScanCode.KP_A = 188;
clay_ScanCode.KP_B = 189;
clay_ScanCode.KP_C = 190;
clay_ScanCode.KP_D = 191;
clay_ScanCode.KP_E = 192;
clay_ScanCode.KP_F = 193;
clay_ScanCode.KP_XOR = 194;
clay_ScanCode.KP_POWER = 195;
clay_ScanCode.KP_PERCENT = 196;
clay_ScanCode.KP_LESS = 197;
clay_ScanCode.KP_GREATER = 198;
clay_ScanCode.KP_AMPERSAND = 199;
clay_ScanCode.KP_DBLAMPERSAND = 200;
clay_ScanCode.KP_VERTICALBAR = 201;
clay_ScanCode.KP_DBLVERTICALBAR = 202;
clay_ScanCode.KP_COLON = 203;
clay_ScanCode.KP_HASH = 204;
clay_ScanCode.KP_SPACE = 205;
clay_ScanCode.KP_AT = 206;
clay_ScanCode.KP_EXCLAM = 207;
clay_ScanCode.KP_MEMSTORE = 208;
clay_ScanCode.KP_MEMRECALL = 209;
clay_ScanCode.KP_MEMCLEAR = 210;
clay_ScanCode.KP_MEMADD = 211;
clay_ScanCode.KP_MEMSUBTRACT = 212;
clay_ScanCode.KP_MEMMULTIPLY = 213;
clay_ScanCode.KP_MEMDIVIDE = 214;
clay_ScanCode.KP_PLUSMINUS = 215;
clay_ScanCode.KP_CLEAR = 216;
clay_ScanCode.KP_CLEARENTRY = 217;
clay_ScanCode.KP_BINARY = 218;
clay_ScanCode.KP_OCTAL = 219;
clay_ScanCode.KP_DECIMAL = 220;
clay_ScanCode.KP_HEXADECIMAL = 221;
clay_ScanCode.LCTRL = 224;
clay_ScanCode.LSHIFT = 225;
clay_ScanCode.LALT = 226;
clay_ScanCode.LMETA = 227;
clay_ScanCode.RCTRL = 228;
clay_ScanCode.RSHIFT = 229;
clay_ScanCode.RALT = 230;
clay_ScanCode.RMETA = 231;
clay_ScanCode.MODE = 257;
clay_ScanCode.AUDIONEXT = 258;
clay_ScanCode.AUDIOPREV = 259;
clay_ScanCode.AUDIOSTOP = 260;
clay_ScanCode.AUDIOPLAY = 261;
clay_ScanCode.AUDIOMUTE = 262;
clay_ScanCode.MEDIASELECT = 263;
clay_ScanCode.WWW = 264;
clay_ScanCode.MAIL = 265;
clay_ScanCode.CALCULATOR = 266;
clay_ScanCode.COMPUTER = 267;
clay_ScanCode.AC_SEARCH = 268;
clay_ScanCode.AC_HOME = 269;
clay_ScanCode.AC_BACK = 270;
clay_ScanCode.AC_FORWARD = 271;
clay_ScanCode.AC_STOP = 272;
clay_ScanCode.AC_REFRESH = 273;
clay_ScanCode.AC_BOOKMARKS = 274;
clay_ScanCode.BRIGHTNESSDOWN = 275;
clay_ScanCode.BRIGHTNESSUP = 276;
clay_ScanCode.DISPLAYSWITCH = 277;
clay_ScanCode.KBDILLUMTOGGLE = 278;
clay_ScanCode.KBDILLUMDOWN = 279;
clay_ScanCode.KBDILLUMUP = 280;
clay_ScanCode.EJECT = 281;
clay_ScanCode.SLEEP = 282;
clay_ScanCode.APP1 = 283;
clay_ScanCode.APP2 = 284;
clay_ScanCode.scanCodeNames = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
clay_GamepadDeviceEventType.UNKNOWN = 0;
clay_GamepadDeviceEventType.DEVICE_ADDED = 1;
clay_GamepadDeviceEventType.DEVICE_REMOVED = 2;
clay_GamepadDeviceEventType.DEVICE_REMAPPED = 3;
clay_TextEventType.UNKNOWN = 0;
clay_TextEventType.EDIT = 1;
clay_TextEventType.INPUT = 2;
clay_WindowEventType.UNKNOWN = 0;
clay_WindowEventType.SHOWN = 1;
clay_WindowEventType.HIDDEN = 2;
clay_WindowEventType.EXPOSED = 3;
clay_WindowEventType.MOVED = 4;
clay_WindowEventType.RESIZED = 5;
clay_WindowEventType.SIZE_CHANGED = 6;
clay_WindowEventType.MINIMIZED = 7;
clay_WindowEventType.MAXIMIZED = 8;
clay_WindowEventType.RESTORED = 9;
clay_WindowEventType.ENTER = 10;
clay_WindowEventType.LEAVE = 11;
clay_WindowEventType.FOCUS_GAINED = 12;
clay_WindowEventType.FOCUS_LOST = 13;
clay_WindowEventType.CLOSE = 14;
clay_WindowEventType.ENTER_FULLSCREEN = 15;
clay_WindowEventType.EXIT_FULLSCREEN = 16;
clay_AppEventType.UNKNOWN = 0;
clay_AppEventType.TERMINATING = 11;
clay_AppEventType.LOW_MEMORY = 12;
clay_AppEventType.WILL_ENTER_BACKGROUND = 13;
clay_AppEventType.DID_ENTER_BACKGROUND = 14;
clay_AppEventType.WILL_ENTER_FOREGROUND = 15;
clay_AppEventType.DID_ENTER_FOREGROUND = 16;
clay_Utils._nextUniqueIntCursor = 0;
clay_Utils._nextUniqueInt0 = Math.random() * 2147483646 | 0;
clay_Utils._nextUniqueInt1 = new Date().getTime() * 0.0001 | 0;
clay_Utils._nextUniqueInt2 = Math.random() * 2147483646 | 0;
clay_Utils._nextUniqueInt3 = Math.random() * 2147483646 | 0;
clay_audio_AudioEvent.END = 0;
clay_audio_AudioEvent.DESTROYED = 1;
clay_audio_AudioEvent.DESTROYED_SOURCE = 2;
clay_audio_AudioFormat.UNKNOWN = 0;
clay_audio_AudioFormat.CUSTOM = 1;
clay_audio_AudioFormat.OGG = 2;
clay_audio_AudioFormat.WAV = 3;
clay_audio_AudioFormat.PCM = 4;
clay_audio_AudioState.INVALID = -1;
clay_audio_AudioState.PAUSED = 0;
clay_audio_AudioState.PLAYING = 1;
clay_audio_AudioState.STOPPED = 2;
clay_buffers_Float32Array.BYTES_PER_ELEMENT = 4;
clay_buffers_Int32Array.BYTES_PER_ELEMENT = 4;
clay_buffers_Uint16Array.BYTES_PER_ELEMENT = 2;
clay_buffers_Uint8Array.BYTES_PER_ELEMENT = 1;
clay_graphics_Texture._nextIndex = 1;
clay_opengl_GLGraphics.DEPTH24_STENCIL8_OES = 35056;
clay_opengl_GLGraphics.TEXTURE_2D_MULTISAMPLE = 37120;
clay_opengl_GLGraphics._boundTexture2D = [];
clay_opengl_GLGraphics._activeTextureSlot = -1;
clay_opengl_GLGraphics._didFetchDefaultBuffers = false;
clay_opengl_web_GL.DEPTH_BUFFER_BIT = 256;
clay_opengl_web_GL.STENCIL_BUFFER_BIT = 1024;
clay_opengl_web_GL.COLOR_BUFFER_BIT = 16384;
clay_opengl_web_GL.POINTS = 0;
clay_opengl_web_GL.LINES = 1;
clay_opengl_web_GL.LINE_LOOP = 2;
clay_opengl_web_GL.LINE_STRIP = 3;
clay_opengl_web_GL.TRIANGLES = 4;
clay_opengl_web_GL.TRIANGLE_STRIP = 5;
clay_opengl_web_GL.TRIANGLE_FAN = 6;
clay_opengl_web_GL.ZERO = 0;
clay_opengl_web_GL.ONE = 1;
clay_opengl_web_GL.SRC_COLOR = 768;
clay_opengl_web_GL.ONE_MINUS_SRC_COLOR = 769;
clay_opengl_web_GL.SRC_ALPHA = 770;
clay_opengl_web_GL.ONE_MINUS_SRC_ALPHA = 771;
clay_opengl_web_GL.DST_ALPHA = 772;
clay_opengl_web_GL.ONE_MINUS_DST_ALPHA = 773;
clay_opengl_web_GL.DST_COLOR = 774;
clay_opengl_web_GL.ONE_MINUS_DST_COLOR = 775;
clay_opengl_web_GL.SRC_ALPHA_SATURATE = 776;
clay_opengl_web_GL.FUNC_ADD = 32774;
clay_opengl_web_GL.BLEND_EQUATION = 32777;
clay_opengl_web_GL.BLEND_EQUATION_RGB = 32777;
clay_opengl_web_GL.BLEND_EQUATION_ALPHA = 34877;
clay_opengl_web_GL.FUNC_SUBTRACT = 32778;
clay_opengl_web_GL.FUNC_REVERSE_SUBTRACT = 32779;
clay_opengl_web_GL.BLEND_DST_RGB = 32968;
clay_opengl_web_GL.BLEND_SRC_RGB = 32969;
clay_opengl_web_GL.BLEND_DST_ALPHA = 32970;
clay_opengl_web_GL.BLEND_SRC_ALPHA = 32971;
clay_opengl_web_GL.CONSTANT_COLOR = 32769;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
clay_opengl_web_GL.CONSTANT_ALPHA = 32771;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
clay_opengl_web_GL.BLEND_COLOR = 32773;
clay_opengl_web_GL.ARRAY_BUFFER = 34962;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER = 34963;
clay_opengl_web_GL.ARRAY_BUFFER_BINDING = 34964;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
clay_opengl_web_GL.STREAM_DRAW = 35040;
clay_opengl_web_GL.STATIC_DRAW = 35044;
clay_opengl_web_GL.DYNAMIC_DRAW = 35048;
clay_opengl_web_GL.BUFFER_SIZE = 34660;
clay_opengl_web_GL.BUFFER_USAGE = 34661;
clay_opengl_web_GL.CURRENT_VERTEX_ATTRIB = 34342;
clay_opengl_web_GL.FRONT = 1028;
clay_opengl_web_GL.BACK = 1029;
clay_opengl_web_GL.FRONT_AND_BACK = 1032;
clay_opengl_web_GL.CULL_FACE = 2884;
clay_opengl_web_GL.BLEND = 3042;
clay_opengl_web_GL.DITHER = 3024;
clay_opengl_web_GL.STENCIL_TEST = 2960;
clay_opengl_web_GL.DEPTH_TEST = 2929;
clay_opengl_web_GL.SCISSOR_TEST = 3089;
clay_opengl_web_GL.POLYGON_OFFSET_FILL = 32823;
clay_opengl_web_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
clay_opengl_web_GL.SAMPLE_COVERAGE = 32928;
clay_opengl_web_GL.NO_ERROR = 0;
clay_opengl_web_GL.INVALID_ENUM = 1280;
clay_opengl_web_GL.INVALID_VALUE = 1281;
clay_opengl_web_GL.INVALID_OPERATION = 1282;
clay_opengl_web_GL.OUT_OF_MEMORY = 1285;
clay_opengl_web_GL.CW = 2304;
clay_opengl_web_GL.CCW = 2305;
clay_opengl_web_GL.LINE_WIDTH = 2849;
clay_opengl_web_GL.ALIASED_POINT_SIZE_RANGE = 33901;
clay_opengl_web_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
clay_opengl_web_GL.CULL_FACE_MODE = 2885;
clay_opengl_web_GL.FRONT_FACE = 2886;
clay_opengl_web_GL.DEPTH_RANGE = 2928;
clay_opengl_web_GL.DEPTH_WRITEMASK = 2930;
clay_opengl_web_GL.DEPTH_CLEAR_VALUE = 2931;
clay_opengl_web_GL.DEPTH_FUNC = 2932;
clay_opengl_web_GL.STENCIL_CLEAR_VALUE = 2961;
clay_opengl_web_GL.STENCIL_FUNC = 2962;
clay_opengl_web_GL.STENCIL_FAIL = 2964;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_PASS = 2966;
clay_opengl_web_GL.STENCIL_REF = 2967;
clay_opengl_web_GL.STENCIL_VALUE_MASK = 2963;
clay_opengl_web_GL.STENCIL_WRITEMASK = 2968;
clay_opengl_web_GL.STENCIL_BACK_FUNC = 34816;
clay_opengl_web_GL.STENCIL_BACK_FAIL = 34817;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
clay_opengl_web_GL.STENCIL_BACK_REF = 36003;
clay_opengl_web_GL.STENCIL_BACK_VALUE_MASK = 36004;
clay_opengl_web_GL.STENCIL_BACK_WRITEMASK = 36005;
clay_opengl_web_GL.VIEWPORT = 2978;
clay_opengl_web_GL.SCISSOR_BOX = 3088;
clay_opengl_web_GL.COLOR_CLEAR_VALUE = 3106;
clay_opengl_web_GL.COLOR_WRITEMASK = 3107;
clay_opengl_web_GL.UNPACK_ALIGNMENT = 3317;
clay_opengl_web_GL.PACK_ALIGNMENT = 3333;
clay_opengl_web_GL.MAX_TEXTURE_SIZE = 3379;
clay_opengl_web_GL.MAX_VIEWPORT_DIMS = 3386;
clay_opengl_web_GL.SUBPIXEL_BITS = 3408;
clay_opengl_web_GL.RED_BITS = 3410;
clay_opengl_web_GL.GREEN_BITS = 3411;
clay_opengl_web_GL.BLUE_BITS = 3412;
clay_opengl_web_GL.ALPHA_BITS = 3413;
clay_opengl_web_GL.DEPTH_BITS = 3414;
clay_opengl_web_GL.STENCIL_BITS = 3415;
clay_opengl_web_GL.POLYGON_OFFSET_UNITS = 10752;
clay_opengl_web_GL.POLYGON_OFFSET_FACTOR = 32824;
clay_opengl_web_GL.TEXTURE_BINDING_2D = 32873;
clay_opengl_web_GL.SAMPLE_BUFFERS = 32936;
clay_opengl_web_GL.SAMPLES = 32937;
clay_opengl_web_GL.SAMPLE_COVERAGE_VALUE = 32938;
clay_opengl_web_GL.SAMPLE_COVERAGE_INVERT = 32939;
clay_opengl_web_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
clay_opengl_web_GL.DONT_CARE = 4352;
clay_opengl_web_GL.FASTEST = 4353;
clay_opengl_web_GL.NICEST = 4354;
clay_opengl_web_GL.GENERATE_MIPMAP_HINT = 33170;
clay_opengl_web_GL.BYTE = 5120;
clay_opengl_web_GL.UNSIGNED_BYTE = 5121;
clay_opengl_web_GL.SHORT = 5122;
clay_opengl_web_GL.UNSIGNED_SHORT = 5123;
clay_opengl_web_GL.INT = 5124;
clay_opengl_web_GL.UNSIGNED_INT = 5125;
clay_opengl_web_GL.FLOAT = 5126;
clay_opengl_web_GL.DEPTH_COMPONENT = 6402;
clay_opengl_web_GL.ALPHA = 6406;
clay_opengl_web_GL.RGB = 6407;
clay_opengl_web_GL.RGBA = 6408;
clay_opengl_web_GL.LUMINANCE = 6409;
clay_opengl_web_GL.LUMINANCE_ALPHA = 6410;
clay_opengl_web_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
clay_opengl_web_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
clay_opengl_web_GL.UNSIGNED_SHORT_5_6_5 = 33635;
clay_opengl_web_GL.FRAGMENT_SHADER = 35632;
clay_opengl_web_GL.VERTEX_SHADER = 35633;
clay_opengl_web_GL.MAX_VERTEX_ATTRIBS = 34921;
clay_opengl_web_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
clay_opengl_web_GL.MAX_VARYING_VECTORS = 36348;
clay_opengl_web_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
clay_opengl_web_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
clay_opengl_web_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
clay_opengl_web_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
clay_opengl_web_GL.SHADER_TYPE = 35663;
clay_opengl_web_GL.DELETE_STATUS = 35712;
clay_opengl_web_GL.LINK_STATUS = 35714;
clay_opengl_web_GL.VALIDATE_STATUS = 35715;
clay_opengl_web_GL.ATTACHED_SHADERS = 35717;
clay_opengl_web_GL.ACTIVE_UNIFORMS = 35718;
clay_opengl_web_GL.ACTIVE_ATTRIBUTES = 35721;
clay_opengl_web_GL.SHADING_LANGUAGE_VERSION = 35724;
clay_opengl_web_GL.CURRENT_PROGRAM = 35725;
clay_opengl_web_GL.NEVER = 512;
clay_opengl_web_GL.LESS = 513;
clay_opengl_web_GL.EQUAL = 514;
clay_opengl_web_GL.LEQUAL = 515;
clay_opengl_web_GL.GREATER = 516;
clay_opengl_web_GL.NOTEQUAL = 517;
clay_opengl_web_GL.GEQUAL = 518;
clay_opengl_web_GL.ALWAYS = 519;
clay_opengl_web_GL.KEEP = 7680;
clay_opengl_web_GL.REPLACE = 7681;
clay_opengl_web_GL.INCR = 7682;
clay_opengl_web_GL.DECR = 7683;
clay_opengl_web_GL.INVERT = 5386;
clay_opengl_web_GL.INCR_WRAP = 34055;
clay_opengl_web_GL.DECR_WRAP = 34056;
clay_opengl_web_GL.VENDOR = 7936;
clay_opengl_web_GL.RENDERER = 7937;
clay_opengl_web_GL.VERSION = 7938;
clay_opengl_web_GL.NEAREST = 9728;
clay_opengl_web_GL.LINEAR = 9729;
clay_opengl_web_GL.NEAREST_MIPMAP_NEAREST = 9984;
clay_opengl_web_GL.LINEAR_MIPMAP_NEAREST = 9985;
clay_opengl_web_GL.NEAREST_MIPMAP_LINEAR = 9986;
clay_opengl_web_GL.LINEAR_MIPMAP_LINEAR = 9987;
clay_opengl_web_GL.TEXTURE_MAG_FILTER = 10240;
clay_opengl_web_GL.TEXTURE_MIN_FILTER = 10241;
clay_opengl_web_GL.TEXTURE_WRAP_S = 10242;
clay_opengl_web_GL.TEXTURE_WRAP_T = 10243;
clay_opengl_web_GL.TEXTURE_2D = 3553;
clay_opengl_web_GL.TEXTURE = 5890;
clay_opengl_web_GL.TEXTURE_CUBE_MAP = 34067;
clay_opengl_web_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
clay_opengl_web_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
clay_opengl_web_GL.TEXTURE0 = 33984;
clay_opengl_web_GL.TEXTURE1 = 33985;
clay_opengl_web_GL.TEXTURE2 = 33986;
clay_opengl_web_GL.TEXTURE3 = 33987;
clay_opengl_web_GL.TEXTURE4 = 33988;
clay_opengl_web_GL.TEXTURE5 = 33989;
clay_opengl_web_GL.TEXTURE6 = 33990;
clay_opengl_web_GL.TEXTURE7 = 33991;
clay_opengl_web_GL.TEXTURE8 = 33992;
clay_opengl_web_GL.TEXTURE9 = 33993;
clay_opengl_web_GL.TEXTURE10 = 33994;
clay_opengl_web_GL.TEXTURE11 = 33995;
clay_opengl_web_GL.TEXTURE12 = 33996;
clay_opengl_web_GL.TEXTURE13 = 33997;
clay_opengl_web_GL.TEXTURE14 = 33998;
clay_opengl_web_GL.TEXTURE15 = 33999;
clay_opengl_web_GL.TEXTURE16 = 34000;
clay_opengl_web_GL.TEXTURE17 = 34001;
clay_opengl_web_GL.TEXTURE18 = 34002;
clay_opengl_web_GL.TEXTURE19 = 34003;
clay_opengl_web_GL.TEXTURE20 = 34004;
clay_opengl_web_GL.TEXTURE21 = 34005;
clay_opengl_web_GL.TEXTURE22 = 34006;
clay_opengl_web_GL.TEXTURE23 = 34007;
clay_opengl_web_GL.TEXTURE24 = 34008;
clay_opengl_web_GL.TEXTURE25 = 34009;
clay_opengl_web_GL.TEXTURE26 = 34010;
clay_opengl_web_GL.TEXTURE27 = 34011;
clay_opengl_web_GL.TEXTURE28 = 34012;
clay_opengl_web_GL.TEXTURE29 = 34013;
clay_opengl_web_GL.TEXTURE30 = 34014;
clay_opengl_web_GL.TEXTURE31 = 34015;
clay_opengl_web_GL.ACTIVE_TEXTURE = 34016;
clay_opengl_web_GL.REPEAT = 10497;
clay_opengl_web_GL.CLAMP_TO_EDGE = 33071;
clay_opengl_web_GL.MIRRORED_REPEAT = 33648;
clay_opengl_web_GL.FLOAT_VEC2 = 35664;
clay_opengl_web_GL.FLOAT_VEC3 = 35665;
clay_opengl_web_GL.FLOAT_VEC4 = 35666;
clay_opengl_web_GL.INT_VEC2 = 35667;
clay_opengl_web_GL.INT_VEC3 = 35668;
clay_opengl_web_GL.INT_VEC4 = 35669;
clay_opengl_web_GL.BOOL = 35670;
clay_opengl_web_GL.BOOL_VEC2 = 35671;
clay_opengl_web_GL.BOOL_VEC3 = 35672;
clay_opengl_web_GL.BOOL_VEC4 = 35673;
clay_opengl_web_GL.FLOAT_MAT2 = 35674;
clay_opengl_web_GL.FLOAT_MAT3 = 35675;
clay_opengl_web_GL.FLOAT_MAT4 = 35676;
clay_opengl_web_GL.SAMPLER_2D = 35678;
clay_opengl_web_GL.SAMPLER_CUBE = 35680;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
clay_opengl_web_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
clay_opengl_web_GL.POINT_SPRITE = 34913;
clay_opengl_web_GL.COMPILE_STATUS = 35713;
clay_opengl_web_GL.LOW_FLOAT = 36336;
clay_opengl_web_GL.MEDIUM_FLOAT = 36337;
clay_opengl_web_GL.HIGH_FLOAT = 36338;
clay_opengl_web_GL.LOW_INT = 36339;
clay_opengl_web_GL.MEDIUM_INT = 36340;
clay_opengl_web_GL.HIGH_INT = 36341;
clay_opengl_web_GL.FRAMEBUFFER = 36160;
clay_opengl_web_GL.RENDERBUFFER = 36161;
clay_opengl_web_GL.RGBA4 = 32854;
clay_opengl_web_GL.RGB5_A1 = 32855;
clay_opengl_web_GL.RGB565 = 36194;
clay_opengl_web_GL.DEPTH_COMPONENT16 = 33189;
clay_opengl_web_GL.STENCIL_INDEX = 6401;
clay_opengl_web_GL.STENCIL_INDEX8 = 36168;
clay_opengl_web_GL.DEPTH_STENCIL = 34041;
clay_opengl_web_GL.RENDERBUFFER_WIDTH = 36162;
clay_opengl_web_GL.RENDERBUFFER_HEIGHT = 36163;
clay_opengl_web_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
clay_opengl_web_GL.RENDERBUFFER_RED_SIZE = 36176;
clay_opengl_web_GL.RENDERBUFFER_GREEN_SIZE = 36177;
clay_opengl_web_GL.RENDERBUFFER_BLUE_SIZE = 36178;
clay_opengl_web_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
clay_opengl_web_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
clay_opengl_web_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
clay_opengl_web_GL.COLOR_ATTACHMENT0 = 36064;
clay_opengl_web_GL.DEPTH_ATTACHMENT = 36096;
clay_opengl_web_GL.STENCIL_ATTACHMENT = 36128;
clay_opengl_web_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
clay_opengl_web_GL.NONE = 0;
clay_opengl_web_GL.FRAMEBUFFER_COMPLETE = 36053;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
clay_opengl_web_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
clay_opengl_web_GL.FRAMEBUFFER_BINDING = 36006;
clay_opengl_web_GL.RENDERBUFFER_BINDING = 36007;
clay_opengl_web_GL.MAX_RENDERBUFFER_SIZE = 34024;
clay_opengl_web_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
clay_opengl_web_GL.UNPACK_FLIP_Y_WEBGL = 37440;
clay_opengl_web_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
clay_opengl_web_GL.CONTEXT_LOST_WEBGL = 37442;
clay_opengl_web_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
clay_opengl_web_GL.BROWSER_DEFAULT_WEBGL = 37444;
clay_web_WebAssets.POT = true;
clay_web_WebAudio.HALF_PI = 1.5707;
clay_web_WebRuntime.timestampStart = 0.0;
clay_web_WebRuntime.webWindowId = 1;
clay_web__$WebRuntime_DOMKeys.dom_shift = 16;
clay_web__$WebRuntime_DOMKeys.dom_ctrl = 17;
clay_web__$WebRuntime_DOMKeys.dom_alt = 18;
clay_web__$WebRuntime_DOMKeys.dom_capslock = 20;
clay_web__$WebRuntime_DOMKeys.dom_pageup = 33;
clay_web__$WebRuntime_DOMKeys.dom_pagedown = 34;
clay_web__$WebRuntime_DOMKeys.dom_end = 35;
clay_web__$WebRuntime_DOMKeys.dom_home = 36;
clay_web__$WebRuntime_DOMKeys.dom_left = 37;
clay_web__$WebRuntime_DOMKeys.dom_up = 38;
clay_web__$WebRuntime_DOMKeys.dom_right = 39;
clay_web__$WebRuntime_DOMKeys.dom_down = 40;
clay_web__$WebRuntime_DOMKeys.dom_printscr = 44;
clay_web__$WebRuntime_DOMKeys.dom_insert = 45;
clay_web__$WebRuntime_DOMKeys.dom_delete = 46;
clay_web__$WebRuntime_DOMKeys.dom_lmeta = 91;
clay_web__$WebRuntime_DOMKeys.dom_rmeta = 93;
clay_web__$WebRuntime_DOMKeys.dom_kp_0 = 96;
clay_web__$WebRuntime_DOMKeys.dom_kp_1 = 97;
clay_web__$WebRuntime_DOMKeys.dom_kp_2 = 98;
clay_web__$WebRuntime_DOMKeys.dom_kp_3 = 99;
clay_web__$WebRuntime_DOMKeys.dom_kp_4 = 100;
clay_web__$WebRuntime_DOMKeys.dom_kp_5 = 101;
clay_web__$WebRuntime_DOMKeys.dom_kp_6 = 102;
clay_web__$WebRuntime_DOMKeys.dom_kp_7 = 103;
clay_web__$WebRuntime_DOMKeys.dom_kp_8 = 104;
clay_web__$WebRuntime_DOMKeys.dom_kp_9 = 105;
clay_web__$WebRuntime_DOMKeys.dom_kp_multiply = 106;
clay_web__$WebRuntime_DOMKeys.dom_kp_plus = 107;
clay_web__$WebRuntime_DOMKeys.dom_kp_minus = 109;
clay_web__$WebRuntime_DOMKeys.dom_kp_decimal = 110;
clay_web__$WebRuntime_DOMKeys.dom_kp_divide = 111;
clay_web__$WebRuntime_DOMKeys.dom_kp_numlock = 144;
clay_web__$WebRuntime_DOMKeys.dom_f1 = 112;
clay_web__$WebRuntime_DOMKeys.dom_f2 = 113;
clay_web__$WebRuntime_DOMKeys.dom_f3 = 114;
clay_web__$WebRuntime_DOMKeys.dom_f4 = 115;
clay_web__$WebRuntime_DOMKeys.dom_f5 = 116;
clay_web__$WebRuntime_DOMKeys.dom_f6 = 117;
clay_web__$WebRuntime_DOMKeys.dom_f7 = 118;
clay_web__$WebRuntime_DOMKeys.dom_f8 = 119;
clay_web__$WebRuntime_DOMKeys.dom_f9 = 120;
clay_web__$WebRuntime_DOMKeys.dom_f10 = 121;
clay_web__$WebRuntime_DOMKeys.dom_f11 = 122;
clay_web__$WebRuntime_DOMKeys.dom_f12 = 123;
clay_web__$WebRuntime_DOMKeys.dom_f13 = 124;
clay_web__$WebRuntime_DOMKeys.dom_f14 = 125;
clay_web__$WebRuntime_DOMKeys.dom_f15 = 126;
clay_web__$WebRuntime_DOMKeys.dom_f16 = 127;
clay_web__$WebRuntime_DOMKeys.dom_f17 = 128;
clay_web__$WebRuntime_DOMKeys.dom_f18 = 129;
clay_web__$WebRuntime_DOMKeys.dom_f19 = 130;
clay_web__$WebRuntime_DOMKeys.dom_f20 = 131;
clay_web__$WebRuntime_DOMKeys.dom_f21 = 132;
clay_web__$WebRuntime_DOMKeys.dom_f22 = 133;
clay_web__$WebRuntime_DOMKeys.dom_f23 = 134;
clay_web__$WebRuntime_DOMKeys.dom_f24 = 135;
clay_web__$WebRuntime_DOMKeys.dom_caret = 160;
clay_web__$WebRuntime_DOMKeys.dom_exclaim = 161;
clay_web__$WebRuntime_DOMKeys.dom_quotedbl = 162;
clay_web__$WebRuntime_DOMKeys.dom_hash = 163;
clay_web__$WebRuntime_DOMKeys.dom_dollar = 164;
clay_web__$WebRuntime_DOMKeys.dom_percent = 165;
clay_web__$WebRuntime_DOMKeys.dom_ampersand = 166;
clay_web__$WebRuntime_DOMKeys.dom_underscore = 167;
clay_web__$WebRuntime_DOMKeys.dom_leftparen = 168;
clay_web__$WebRuntime_DOMKeys.dom_rightparen = 169;
clay_web__$WebRuntime_DOMKeys.dom_asterisk = 170;
clay_web__$WebRuntime_DOMKeys.dom_plus = 171;
clay_web__$WebRuntime_DOMKeys.dom_pipe = 172;
clay_web__$WebRuntime_DOMKeys.dom_minus = 173;
clay_web__$WebRuntime_DOMKeys.dom_leftbrace = 174;
clay_web__$WebRuntime_DOMKeys.dom_rightbrace = 175;
clay_web__$WebRuntime_DOMKeys.dom_tilde = 176;
clay_web__$WebRuntime_DOMKeys.dom_audiomute = 181;
clay_web__$WebRuntime_DOMKeys.dom_volumedown = 182;
clay_web__$WebRuntime_DOMKeys.dom_volumeup = 183;
clay_web__$WebRuntime_DOMKeys.dom_comma = 188;
clay_web__$WebRuntime_DOMKeys.dom_period = 190;
clay_web__$WebRuntime_DOMKeys.dom_slash = 191;
clay_web__$WebRuntime_DOMKeys.dom_backquote = 192;
clay_web__$WebRuntime_DOMKeys.dom_leftbracket = 219;
clay_web__$WebRuntime_DOMKeys.dom_rightbracket = 221;
clay_web__$WebRuntime_DOMKeys.dom_backslash = 220;
clay_web__$WebRuntime_DOMKeys.dom_quote = 222;
clay_web__$WebRuntime_DOMKeys.dom_meta = 224;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
hsluv_Hsluv.m = [[3.240969941904521,-1.537383177570093,-0.498610760293],[-0.96924363628087,1.87596750150772,0.041555057407175],[0.055630079696993,-0.20397695888897,1.056971514242878]];
hsluv_Hsluv.minv = [[0.41239079926595,0.35758433938387,0.18048078840183],[0.21263900587151,0.71516867876775,0.072192315360733],[0.019330818715591,0.11919477979462,0.95053215224966]];
hsluv_Hsluv.refY = 1.0;
hsluv_Hsluv.refU = 0.19783000664283;
hsluv_Hsluv.refV = 0.46831999493879;
hsluv_Hsluv.kappa = 903.2962962;
hsluv_Hsluv.epsilon = 0.0088564516;
hsluv_Hsluv.hexChars = "0123456789abcdef";
tracker_Autorun.prevCurrent = [];
tracker_Autorun._autorunArrays = [];
tracker_Autorun._autorunArraysLen = 0;
tracker_Autorun._arrayOfAutorunArrays = [];
tracker_Autorun._arrayOfAutorunArraysLen = 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
